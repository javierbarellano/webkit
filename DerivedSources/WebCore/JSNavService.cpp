/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNavService.h"

#include "KURL.h"
#include "NavService.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSNavService);
/* Hash table */

static const HashTableValue JSNavServiceTableValues[] =
{
    { "name", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceName), (intptr_t)0, NoIntrinsic },
    { "url", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceUrl), (intptr_t)0, NoIntrinsic },
    { "eventUrl", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceEventUrl), (intptr_t)0, NoIntrinsic },
    { "uuid", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceUuid), (intptr_t)0, NoIntrinsic },
    { "config", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceConfig), (intptr_t)0, NoIntrinsic },
    { "serviceType", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceServiceType), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServiceTable = { 16, 15, JSNavServiceTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSNavServicePrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServicePrototypeTable = { 1, 0, JSNavServicePrototypeTableValues, 0 };
const ClassInfo JSNavServicePrototype::s_info = { "NavServicePrototype", &Base::s_info, &JSNavServicePrototypeTable, 0, CREATE_METHOD_TABLE(JSNavServicePrototype) };

JSObject* JSNavServicePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNavService>(exec, globalObject);
}

const ClassInfo JSNavService::s_info = { "NavService", &Base::s_info, &JSNavServiceTable, 0 , CREATE_METHOD_TABLE(JSNavService) };

JSNavService::JSNavService(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<NavService> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNavService::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSNavService::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSNavServicePrototype::create(exec->globalData(), globalObject, JSNavServicePrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSNavService::destroy(JSC::JSCell* cell)
{
    JSNavService* thisObject = jsCast<JSNavService*>(cell);
    thisObject->JSNavService::~JSNavService();
}

JSNavService::~JSNavService()
{
    releaseImplIfNotNull();
}

bool JSNavService::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavService* thisObject = jsCast<JSNavService*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSNavService, Base>(exec, &JSNavServiceTable, thisObject, propertyName, slot);
}

bool JSNavService::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavService* thisObject = jsCast<JSNavService*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSNavService, Base>(exec, &JSNavServiceTable, thisObject, propertyName, descriptor);
}

JSValue jsNavServiceName(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavService* castedThis = static_cast<JSNavService*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavService* impl = static_cast<NavService*>(castedThis->impl());
    JSValue result = jsString(exec, impl->name());
    return result;
}


JSValue jsNavServiceUrl(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavService* castedThis = static_cast<JSNavService*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavService* impl = static_cast<NavService*>(castedThis->impl());
    JSValue result = jsString(exec, impl->url());
    return result;
}


JSValue jsNavServiceEventUrl(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavService* castedThis = static_cast<JSNavService*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavService* impl = static_cast<NavService*>(castedThis->impl());
    JSValue result = jsString(exec, impl->eventUrl());
    return result;
}


JSValue jsNavServiceUuid(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavService* castedThis = static_cast<JSNavService*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavService* impl = static_cast<NavService*>(castedThis->impl());
    JSValue result = jsString(exec, impl->uuid());
    return result;
}


JSValue jsNavServiceConfig(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavService* castedThis = static_cast<JSNavService*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavService* impl = static_cast<NavService*>(castedThis->impl());
    JSValue result = jsString(exec, impl->config());
    return result;
}


JSValue jsNavServiceServiceType(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavService* castedThis = static_cast<JSNavService*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavService* impl = static_cast<NavService*>(castedThis->impl());
    JSValue result = jsString(exec, impl->serviceType());
    return result;
}


static inline bool isObservable(JSNavService* jsNavService)
{
    if (jsNavService->hasCustomProperties())
        return true;
    return false;
}

bool JSNavServiceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNavService* jsNavService = static_cast<JSNavService*>(handle.get().asCell());
    if (!isObservable(jsNavService))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNavServiceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNavService* jsNavService = static_cast<JSNavService*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavService->impl(), jsNavService);
    jsNavService->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, NavService* impl)
{
    return wrap<JSNavService>(exec, globalObject, impl);
}

NavService* toNavService(JSC::JSValue value)
{
    return value.inherits(&JSNavService::s_info) ? static_cast<JSNavService*>(asObject(value))->impl() : 0;
}

}
