/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG)

#include "JSSVGTitleElement.h"

#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "ExceptionCode.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSDOMBinding.h"
#include "JSSVGAnimatedString.h"
#include "KURL.h"
#include "SVGTitleElement.h"
#include "StylePropertySet.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGTitleElement);
/* Hash table */

static const HashTableValue JSSVGTitleElementTableValues[] =
{
    { "xmllang", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTitleElementXmllang), (intptr_t)setJSSVGTitleElementXmllang, NoIntrinsic },
    { "xmlspace", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTitleElementXmlspace), (intptr_t)setJSSVGTitleElementXmlspace, NoIntrinsic },
    { "className", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTitleElementClassName), (intptr_t)0, NoIntrinsic },
    { "style", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTitleElementStyle), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTitleElementConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGTitleElementTable = { 16, 15, JSSVGTitleElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGTitleElementConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGTitleElementConstructorTable = { 1, 0, JSSVGTitleElementConstructorTableValues, 0 };
const ClassInfo JSSVGTitleElementConstructor::s_info = { "SVGTitleElementConstructor", &Base::s_info, &JSSVGTitleElementConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGTitleElementConstructor) };

JSSVGTitleElementConstructor::JSSVGTitleElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGTitleElementConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSSVGTitleElementPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSSVGTitleElementConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTitleElementConstructor, JSDOMWrapper>(exec, &JSSVGTitleElementConstructorTable, static_cast<JSSVGTitleElementConstructor*>(cell), propertyName, slot);
}

bool JSSVGTitleElementConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSVGTitleElementConstructor, JSDOMWrapper>(exec, &JSSVGTitleElementConstructorTable, static_cast<JSSVGTitleElementConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSSVGTitleElementPrototypeTableValues[] =
{
    { "getPresentationAttribute", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsSVGTitleElementPrototypeFunctionGetPresentationAttribute), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGTitleElementPrototypeTable = { 2, 1, JSSVGTitleElementPrototypeTableValues, 0 };
const ClassInfo JSSVGTitleElementPrototype::s_info = { "SVGTitleElementPrototype", &Base::s_info, &JSSVGTitleElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGTitleElementPrototype) };

JSObject* JSSVGTitleElementPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGTitleElement>(exec, globalObject);
}

bool JSSVGTitleElementPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSSVGTitleElementPrototype* thisObject = jsCast<JSSVGTitleElementPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGTitleElementPrototypeTable, thisObject, propertyName, slot);
}

bool JSSVGTitleElementPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSSVGTitleElementPrototype* thisObject = jsCast<JSSVGTitleElementPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSSVGTitleElementPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSSVGTitleElement::s_info = { "SVGTitleElement", &Base::s_info, &JSSVGTitleElementTable, 0 , CREATE_METHOD_TABLE(JSSVGTitleElement) };

JSSVGTitleElement::JSSVGTitleElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGTitleElement> impl)
    : JSSVGElement(structure, globalObject, impl)
{
}

void JSSVGTitleElement::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSSVGTitleElement::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSSVGTitleElementPrototype::create(exec->globalData(), globalObject, JSSVGTitleElementPrototype::createStructure(exec->globalData(), globalObject, JSSVGElementPrototype::self(exec, globalObject)));
}

bool JSSVGTitleElement::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSSVGTitleElement* thisObject = jsCast<JSSVGTitleElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSSVGTitleElement, Base>(exec, &JSSVGTitleElementTable, thisObject, propertyName, slot);
}

bool JSSVGTitleElement::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSSVGTitleElement* thisObject = jsCast<JSSVGTitleElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSSVGTitleElement, Base>(exec, &JSSVGTitleElementTable, thisObject, propertyName, descriptor);
}

JSValue jsSVGTitleElementXmllang(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    JSValue result = jsString(exec, impl->xmllang());
    return result;
}


JSValue jsSVGTitleElementXmlspace(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    JSValue result = jsString(exec, impl->xmlspace());
    return result;
}


JSValue jsSVGTitleElementClassName(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    RefPtr<SVGAnimatedString> obj = impl->classNameAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGTitleElementStyle(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->style()));
    return result;
}


JSValue jsSVGTitleElementConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSVGTitleElement* domObject = static_cast<JSSVGTitleElement*>(asObject(slotBase));
    return JSSVGTitleElement::getConstructor(exec, domObject->globalObject());
}

void JSSVGTitleElement::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSSVGTitleElement* thisObject = jsCast<JSSVGTitleElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSSVGTitleElement, Base>(exec, propertyName, value, &JSSVGTitleElementTable, thisObject, slot);
}

void setJSSVGTitleElementXmllang(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(thisObject);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    impl->setXmllang(ustringToString(value.isEmpty() ? UString() : value.toString(exec)->value(exec)));
}


void setJSSVGTitleElementXmlspace(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(thisObject);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    impl->setXmlspace(ustringToString(value.isEmpty() ? UString() : value.toString(exec)->value(exec)));
}


JSValue JSSVGTitleElement::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGTitleElementConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsSVGTitleElementPrototypeFunctionGetPresentationAttribute(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSSVGTitleElement::s_info))
        return throwVMTypeError(exec);
    JSSVGTitleElement* castedThis = static_cast<JSSVGTitleElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSSVGTitleElement::s_info);
    SVGTitleElement* impl = static_cast<SVGTitleElement*>(castedThis->impl());
    const String& name(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->getPresentationAttribute(name)));
    return JSValue::encode(result);
}


}

#endif // ENABLE(SVG)
