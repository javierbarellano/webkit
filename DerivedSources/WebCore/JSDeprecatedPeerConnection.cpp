/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSDeprecatedPeerConnection.h"

#include "DeprecatedPeerConnection.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSMediaStream.h"
#include "JSMediaStreamList.h"
#include "MediaStreamList.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSDeprecatedPeerConnection);
/* Hash table */

static const HashTableValue JSDeprecatedPeerConnectionTableValues[] =
{
    { "readyState", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionReadyState), (intptr_t)0, NoIntrinsic },
    { "localStreams", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionLocalStreams), (intptr_t)0, NoIntrinsic },
    { "remoteStreams", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionRemoteStreams), (intptr_t)0, NoIntrinsic },
    { "onconnecting", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionOnconnecting), (intptr_t)setJSDeprecatedPeerConnectionOnconnecting, NoIntrinsic },
    { "onopen", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionOnopen), (intptr_t)setJSDeprecatedPeerConnectionOnopen, NoIntrinsic },
    { "onmessage", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionOnmessage), (intptr_t)setJSDeprecatedPeerConnectionOnmessage, NoIntrinsic },
    { "onstatechange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionOnstatechange), (intptr_t)setJSDeprecatedPeerConnectionOnstatechange, NoIntrinsic },
    { "onaddstream", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionOnaddstream), (intptr_t)setJSDeprecatedPeerConnectionOnaddstream, NoIntrinsic },
    { "onremovestream", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionOnremovestream), (intptr_t)setJSDeprecatedPeerConnectionOnremovestream, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSDeprecatedPeerConnectionTable = { 34, 31, JSDeprecatedPeerConnectionTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSDeprecatedPeerConnectionConstructorTableValues[] =
{
    { "NEW", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionNEW), (intptr_t)0, NoIntrinsic },
    { "NEGOTIATING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionNEGOTIATING), (intptr_t)0, NoIntrinsic },
    { "ACTIVE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionACTIVE), (intptr_t)0, NoIntrinsic },
    { "CLOSED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionCLOSED), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSDeprecatedPeerConnectionConstructorTable = { 8, 7, JSDeprecatedPeerConnectionConstructorTableValues, 0 };

COMPILE_ASSERT(0 == DeprecatedPeerConnection::NEW, DeprecatedPeerConnectionEnumNEWIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == DeprecatedPeerConnection::NEGOTIATING, DeprecatedPeerConnectionEnumNEGOTIATINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == DeprecatedPeerConnection::ACTIVE, DeprecatedPeerConnectionEnumACTIVEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == DeprecatedPeerConnection::CLOSED, DeprecatedPeerConnectionEnumCLOSEDIsWrongUseDoNotCheckConstants);

const ClassInfo JSDeprecatedPeerConnectionConstructor::s_info = { "DeprecatedPeerConnectionConstructor", &Base::s_info, &JSDeprecatedPeerConnectionConstructorTable, 0, CREATE_METHOD_TABLE(JSDeprecatedPeerConnectionConstructor) };

JSDeprecatedPeerConnectionConstructor::JSDeprecatedPeerConnectionConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSDeprecatedPeerConnectionConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSDeprecatedPeerConnectionPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->globalData(), exec->propertyNames().length, jsNumber(2), ReadOnly | DontDelete | DontEnum);
}

bool JSDeprecatedPeerConnectionConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSDeprecatedPeerConnectionConstructor, JSDOMWrapper>(exec, &JSDeprecatedPeerConnectionConstructorTable, static_cast<JSDeprecatedPeerConnectionConstructor*>(cell), propertyName, slot);
}

bool JSDeprecatedPeerConnectionConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSDeprecatedPeerConnectionConstructor, JSDOMWrapper>(exec, &JSDeprecatedPeerConnectionConstructorTable, static_cast<JSDeprecatedPeerConnectionConstructor*>(object), propertyName, descriptor);
}

ConstructType JSDeprecatedPeerConnectionConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSDeprecatedPeerConnection;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSDeprecatedPeerConnectionPrototypeTableValues[] =
{
    { "NEW", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionNEW), (intptr_t)0, NoIntrinsic },
    { "NEGOTIATING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionNEGOTIATING), (intptr_t)0, NoIntrinsic },
    { "ACTIVE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionACTIVE), (intptr_t)0, NoIntrinsic },
    { "CLOSED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedPeerConnectionCLOSED), (intptr_t)0, NoIntrinsic },
    { "processSignalingMessage", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionProcessSignalingMessage), (intptr_t)1, NoIntrinsic },
    { "send", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionSend), (intptr_t)1, NoIntrinsic },
    { "addStream", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionAddStream), (intptr_t)1, NoIntrinsic },
    { "removeStream", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionRemoveStream), (intptr_t)1, NoIntrinsic },
    { "close", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionClose), (intptr_t)0, NoIntrinsic },
    { "addEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionAddEventListener), (intptr_t)3, NoIntrinsic },
    { "removeEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionRemoveEventListener), (intptr_t)3, NoIntrinsic },
    { "dispatchEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDeprecatedPeerConnectionPrototypeFunctionDispatchEvent), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSDeprecatedPeerConnectionPrototypeTable = { 34, 31, JSDeprecatedPeerConnectionPrototypeTableValues, 0 };
const ClassInfo JSDeprecatedPeerConnectionPrototype::s_info = { "DeprecatedPeerConnectionPrototype", &Base::s_info, &JSDeprecatedPeerConnectionPrototypeTable, 0, CREATE_METHOD_TABLE(JSDeprecatedPeerConnectionPrototype) };

JSObject* JSDeprecatedPeerConnectionPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDeprecatedPeerConnection>(exec, globalObject);
}

bool JSDeprecatedPeerConnectionPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSDeprecatedPeerConnectionPrototype* thisObject = jsCast<JSDeprecatedPeerConnectionPrototype*>(cell);
    return getStaticPropertySlot<JSDeprecatedPeerConnectionPrototype, JSObject>(exec, &JSDeprecatedPeerConnectionPrototypeTable, thisObject, propertyName, slot);
}

bool JSDeprecatedPeerConnectionPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSDeprecatedPeerConnectionPrototype* thisObject = jsCast<JSDeprecatedPeerConnectionPrototype*>(object);
    return getStaticPropertyDescriptor<JSDeprecatedPeerConnectionPrototype, JSObject>(exec, &JSDeprecatedPeerConnectionPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSDeprecatedPeerConnection::s_info = { "DeprecatedPeerConnection", &Base::s_info, &JSDeprecatedPeerConnectionTable, 0 , CREATE_METHOD_TABLE(JSDeprecatedPeerConnection) };

JSDeprecatedPeerConnection::JSDeprecatedPeerConnection(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<DeprecatedPeerConnection> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSDeprecatedPeerConnection::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSDeprecatedPeerConnection::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSDeprecatedPeerConnectionPrototype::create(exec->globalData(), globalObject, JSDeprecatedPeerConnectionPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSDeprecatedPeerConnection::destroy(JSC::JSCell* cell)
{
    JSDeprecatedPeerConnection* thisObject = jsCast<JSDeprecatedPeerConnection*>(cell);
    thisObject->JSDeprecatedPeerConnection::~JSDeprecatedPeerConnection();
}

JSDeprecatedPeerConnection::~JSDeprecatedPeerConnection()
{
    releaseImplIfNotNull();
}

bool JSDeprecatedPeerConnection::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSDeprecatedPeerConnection* thisObject = jsCast<JSDeprecatedPeerConnection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSDeprecatedPeerConnection, Base>(exec, &JSDeprecatedPeerConnectionTable, thisObject, propertyName, slot);
}

bool JSDeprecatedPeerConnection::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSDeprecatedPeerConnection* thisObject = jsCast<JSDeprecatedPeerConnection*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSDeprecatedPeerConnection, Base>(exec, &JSDeprecatedPeerConnectionTable, thisObject, propertyName, descriptor);
}

JSValue jsDeprecatedPeerConnectionReadyState(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    JSValue result = jsNumber(impl->readyState());
    return result;
}


JSValue jsDeprecatedPeerConnectionLocalStreams(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->localStreams()));
    return result;
}


JSValue jsDeprecatedPeerConnectionRemoteStreams(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->remoteStreams()));
    return result;
}


JSValue jsDeprecatedPeerConnectionOnconnecting(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onconnecting()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDeprecatedPeerConnectionOnopen(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onopen()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDeprecatedPeerConnectionOnmessage(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onmessage()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDeprecatedPeerConnectionOnstatechange(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onstatechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDeprecatedPeerConnectionOnaddstream(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onaddstream()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDeprecatedPeerConnectionOnremovestream(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (EventListener* listener = impl->onremovestream()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDeprecatedPeerConnectionConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSDeprecatedPeerConnection* domObject = static_cast<JSDeprecatedPeerConnection*>(asObject(slotBase));
    return JSDeprecatedPeerConnection::getConstructor(exec, domObject->globalObject());
}

void JSDeprecatedPeerConnection::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSDeprecatedPeerConnection* thisObject = jsCast<JSDeprecatedPeerConnection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSDeprecatedPeerConnection, Base>(exec, propertyName, value, &JSDeprecatedPeerConnectionTable, thisObject, slot);
}

void setJSDeprecatedPeerConnectionOnconnecting(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(thisObject);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    impl->setOnconnecting(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDeprecatedPeerConnectionOnopen(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(thisObject);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    impl->setOnopen(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDeprecatedPeerConnectionOnmessage(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(thisObject);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    impl->setOnmessage(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDeprecatedPeerConnectionOnstatechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(thisObject);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    impl->setOnstatechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDeprecatedPeerConnectionOnaddstream(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(thisObject);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    impl->setOnaddstream(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDeprecatedPeerConnectionOnremovestream(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(thisObject);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    impl->setOnremovestream(createJSAttributeEventListener(exec, value, thisObject));
}


JSValue JSDeprecatedPeerConnection::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDeprecatedPeerConnectionConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionProcessSignalingMessage(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    const String& message(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->processSignalingMessage(message, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionSend(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    const String& text(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->send(text, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionAddStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    if (exec->argumentCount() > 0 && !exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(&JSMediaStream::s_info))
        return throwVMTypeError(exec);
    MediaStream* stream(toMediaStream(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->addStream(stream, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionRemoveStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    if (exec->argumentCount() > 0 && !exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(&JSMediaStream::s_info))
        return throwVMTypeError(exec);
    MediaStream* stream(toMediaStream(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->removeStream(stream, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionClose(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    ExceptionCode ec = 0;
    impl->close(ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->addEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->removeEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDeprecatedPeerConnectionPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDeprecatedPeerConnection::s_info))
        return throwVMTypeError(exec);
    JSDeprecatedPeerConnection* castedThis = static_cast<JSDeprecatedPeerConnection*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDeprecatedPeerConnection::s_info);
    DeprecatedPeerConnection* impl = static_cast<DeprecatedPeerConnection*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    Event* event(toEvent(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl->dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSDeprecatedPeerConnection::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSDeprecatedPeerConnection* thisObject = jsCast<JSDeprecatedPeerConnection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

// Constant getters

JSValue jsDeprecatedPeerConnectionNEW(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0));
}

JSValue jsDeprecatedPeerConnectionNEGOTIATING(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

JSValue jsDeprecatedPeerConnectionACTIVE(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(2));
}

JSValue jsDeprecatedPeerConnectionCLOSED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(3));
}

static inline bool isObservable(JSDeprecatedPeerConnection* jsDeprecatedPeerConnection)
{
    if (jsDeprecatedPeerConnection->hasCustomProperties())
        return true;
    if (jsDeprecatedPeerConnection->impl()->hasEventListeners())
        return true;
    return false;
}

bool JSDeprecatedPeerConnectionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSDeprecatedPeerConnection* jsDeprecatedPeerConnection = static_cast<JSDeprecatedPeerConnection*>(handle.get().asCell());
    if (jsDeprecatedPeerConnection->impl()->hasPendingActivity())
        return true;
    if (!isObservable(jsDeprecatedPeerConnection))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSDeprecatedPeerConnectionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSDeprecatedPeerConnection* jsDeprecatedPeerConnection = static_cast<JSDeprecatedPeerConnection*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsDeprecatedPeerConnection->impl(), jsDeprecatedPeerConnection);
    jsDeprecatedPeerConnection->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, DeprecatedPeerConnection* impl)
{
    return wrap<JSDeprecatedPeerConnection>(exec, globalObject, impl);
}

DeprecatedPeerConnection* toDeprecatedPeerConnection(JSC::JSValue value)
{
    return value.inherits(&JSDeprecatedPeerConnection::s_info) ? static_cast<JSDeprecatedPeerConnection*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
