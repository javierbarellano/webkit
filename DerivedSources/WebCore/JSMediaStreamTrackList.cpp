/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamTrackList.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSMediaStreamTrack.h"
#include "MediaStreamTrack.h"
#include "MediaStreamTrackList.h"
#include <runtime/Error.h>
#include <runtime/PropertyNameArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSMediaStreamTrackList);
/* Hash table */

static const HashTableValue JSMediaStreamTrackListTableValues[] =
{
    { "length", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackListLength), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackListConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackListTable = { 5, 3, JSMediaStreamTrackListTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSMediaStreamTrackListConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackListConstructorTable = { 1, 0, JSMediaStreamTrackListConstructorTableValues, 0 };
const ClassInfo JSMediaStreamTrackListConstructor::s_info = { "MediaStreamTrackListConstructor", &Base::s_info, &JSMediaStreamTrackListConstructorTable, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackListConstructor) };

JSMediaStreamTrackListConstructor::JSMediaStreamTrackListConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMediaStreamTrackListConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSMediaStreamTrackListPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSMediaStreamTrackListConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSMediaStreamTrackListConstructor, JSDOMWrapper>(exec, &JSMediaStreamTrackListConstructorTable, static_cast<JSMediaStreamTrackListConstructor*>(cell), propertyName, slot);
}

bool JSMediaStreamTrackListConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSMediaStreamTrackListConstructor, JSDOMWrapper>(exec, &JSMediaStreamTrackListConstructorTable, static_cast<JSMediaStreamTrackListConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSMediaStreamTrackListPrototypeTableValues[] =
{
    { "item", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackListPrototypeFunctionItem), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackListPrototypeTable = { 2, 1, JSMediaStreamTrackListPrototypeTableValues, 0 };
const ClassInfo JSMediaStreamTrackListPrototype::s_info = { "MediaStreamTrackListPrototype", &Base::s_info, &JSMediaStreamTrackListPrototypeTable, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackListPrototype) };

JSObject* JSMediaStreamTrackListPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamTrackList>(exec, globalObject);
}

bool JSMediaStreamTrackListPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSMediaStreamTrackListPrototype* thisObject = jsCast<JSMediaStreamTrackListPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSMediaStreamTrackListPrototypeTable, thisObject, propertyName, slot);
}

bool JSMediaStreamTrackListPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSMediaStreamTrackListPrototype* thisObject = jsCast<JSMediaStreamTrackListPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSMediaStreamTrackListPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSMediaStreamTrackList::s_info = { "MediaStreamTrackList", &Base::s_info, &JSMediaStreamTrackListTable, 0 , CREATE_METHOD_TABLE(JSMediaStreamTrackList) };

JSMediaStreamTrackList::JSMediaStreamTrackList(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MediaStreamTrackList> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSMediaStreamTrackList::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSMediaStreamTrackList::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSMediaStreamTrackListPrototype::create(exec->globalData(), globalObject, JSMediaStreamTrackListPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSMediaStreamTrackList::destroy(JSC::JSCell* cell)
{
    JSMediaStreamTrackList* thisObject = jsCast<JSMediaStreamTrackList*>(cell);
    thisObject->JSMediaStreamTrackList::~JSMediaStreamTrackList();
}

JSMediaStreamTrackList::~JSMediaStreamTrackList()
{
    releaseImplIfNotNull();
}

bool JSMediaStreamTrackList::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSMediaStreamTrackList* thisObject = jsCast<JSMediaStreamTrackList*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    const HashEntry* entry = JSMediaStreamTrackListTable.entry(exec, propertyName);
    if (entry) {
        slot.setCustom(thisObject, entry->propertyGetter());
        return true;
    }
    bool ok;
    unsigned index = propertyName.toUInt32(ok);
    if (ok && index < static_cast<MediaStreamTrackList*>(thisObject->impl())->length()) {
        slot.setCustomIndex(thisObject, index, indexGetter);
        return true;
    }
    return getStaticValueSlot<JSMediaStreamTrackList, Base>(exec, &JSMediaStreamTrackListTable, thisObject, propertyName, slot);
}

bool JSMediaStreamTrackList::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSMediaStreamTrackList* thisObject = jsCast<JSMediaStreamTrackList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    const HashEntry* entry = JSMediaStreamTrackListTable.entry(exec, propertyName);
    if (entry) {
        PropertySlot slot;
        slot.setCustom(thisObject, entry->propertyGetter());
        descriptor.setDescriptor(slot.getValue(exec, propertyName), entry->attributes());
        return true;
    }
    bool ok;
    unsigned index = propertyName.toUInt32(ok);
    if (ok && index < static_cast<MediaStreamTrackList*>(thisObject->impl())->length()) {
        PropertySlot slot;
        slot.setCustomIndex(thisObject, index, indexGetter);
        descriptor.setDescriptor(slot.getValue(exec, propertyName), DontDelete | ReadOnly);
        return true;
    }
    return getStaticValueDescriptor<JSMediaStreamTrackList, Base>(exec, &JSMediaStreamTrackListTable, thisObject, propertyName, descriptor);
}

bool JSMediaStreamTrackList::getOwnPropertySlotByIndex(JSCell* cell, ExecState* exec, unsigned propertyName, PropertySlot& slot)
{
    JSMediaStreamTrackList* thisObject = jsCast<JSMediaStreamTrackList*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    if (propertyName < static_cast<MediaStreamTrackList*>(thisObject->impl())->length()) {
        slot.setCustomIndex(thisObject, propertyName, thisObject->indexGetter);
        return true;
    }
    return thisObject->methodTable()->getOwnPropertySlot(thisObject, exec, Identifier::from(exec, propertyName), slot);
}

JSValue jsMediaStreamTrackListLength(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamTrackList* castedThis = static_cast<JSMediaStreamTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamTrackList* impl = static_cast<MediaStreamTrackList*>(castedThis->impl());
    JSValue result = jsNumber(impl->length());
    return result;
}


JSValue jsMediaStreamTrackListConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamTrackList* domObject = static_cast<JSMediaStreamTrackList*>(asObject(slotBase));
    return JSMediaStreamTrackList::getConstructor(exec, domObject->globalObject());
}

void JSMediaStreamTrackList::getOwnPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
{
    JSMediaStreamTrackList* thisObject = jsCast<JSMediaStreamTrackList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    for (unsigned i = 0; i < static_cast<MediaStreamTrackList*>(thisObject->impl())->length(); ++i)
        propertyNames.add(Identifier::from(exec, i));
     Base::getOwnPropertyNames(thisObject, exec, propertyNames, mode);
}

JSValue JSMediaStreamTrackList::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaStreamTrackListConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackListPrototypeFunctionItem(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSMediaStreamTrackList::s_info))
        return throwVMTypeError(exec);
    JSMediaStreamTrackList* castedThis = static_cast<JSMediaStreamTrackList*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSMediaStreamTrackList::s_info);
    MediaStreamTrackList* impl = static_cast<MediaStreamTrackList*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    int index(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toUInt32(exec));
    if (index < 0) {
        setDOMException(exec, INDEX_SIZE_ERR);
        return JSValue::encode(jsUndefined());
    }
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->item(index)));
    return JSValue::encode(result);
}


JSValue JSMediaStreamTrackList::indexGetter(ExecState* exec, JSValue slotBase, unsigned index)
{
    JSMediaStreamTrackList* thisObj = static_cast<JSMediaStreamTrackList*>(asObject(slotBase));
    ASSERT_GC_OBJECT_INHERITS(thisObj, &s_info);
    return toJS(exec, thisObj->globalObject(), static_cast<MediaStreamTrackList*>(thisObj->impl())->item(index));
}

static inline bool isObservable(JSMediaStreamTrackList* jsMediaStreamTrackList)
{
    if (jsMediaStreamTrackList->hasCustomProperties())
        return true;
    return false;
}

bool JSMediaStreamTrackListOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSMediaStreamTrackList* jsMediaStreamTrackList = static_cast<JSMediaStreamTrackList*>(handle.get().asCell());
    if (!isObservable(jsMediaStreamTrackList))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaStreamTrackListOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSMediaStreamTrackList* jsMediaStreamTrackList = static_cast<JSMediaStreamTrackList*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMediaStreamTrackList->impl(), jsMediaStreamTrackList);
    jsMediaStreamTrackList->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, MediaStreamTrackList* impl)
{
    return wrap<JSMediaStreamTrackList>(exec, globalObject, impl);
}

MediaStreamTrackList* toMediaStreamTrackList(JSC::JSValue value)
{
    return value.inherits(&JSMediaStreamTrackList::s_info) ? static_cast<JSMediaStreamTrackList*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
