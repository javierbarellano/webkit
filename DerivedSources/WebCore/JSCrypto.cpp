/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSCrypto.h"

#include "Crypto.h"
#include "ExceptionCode.h"
#include "JSArrayBufferView.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSCrypto);
/* Hash table for prototype */

static const HashTableValue JSCryptoPrototypeTableValues[] =
{
    { "getRandomValues", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsCryptoPrototypeFunctionGetRandomValues), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSCryptoPrototypeTable = { 2, 1, JSCryptoPrototypeTableValues, 0 };
const ClassInfo JSCryptoPrototype::s_info = { "CryptoPrototype", &Base::s_info, &JSCryptoPrototypeTable, 0, CREATE_METHOD_TABLE(JSCryptoPrototype) };

JSObject* JSCryptoPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCrypto>(exec, globalObject);
}

bool JSCryptoPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSCryptoPrototype* thisObject = jsCast<JSCryptoPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSCryptoPrototypeTable, thisObject, propertyName, slot);
}

bool JSCryptoPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSCryptoPrototype* thisObject = jsCast<JSCryptoPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSCryptoPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSCrypto::s_info = { "Crypto", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSCrypto) };

JSCrypto::JSCrypto(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Crypto> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSCrypto::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSCrypto::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSCryptoPrototype::create(exec->globalData(), globalObject, JSCryptoPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSCrypto::destroy(JSC::JSCell* cell)
{
    JSCrypto* thisObject = jsCast<JSCrypto*>(cell);
    thisObject->JSCrypto::~JSCrypto();
}

JSCrypto::~JSCrypto()
{
    releaseImplIfNotNull();
}

EncodedJSValue JSC_HOST_CALL jsCryptoPrototypeFunctionGetRandomValues(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSCrypto::s_info))
        return throwVMTypeError(exec);
    JSCrypto* castedThis = static_cast<JSCrypto*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSCrypto::s_info);
    Crypto* impl = static_cast<Crypto*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    ArrayBufferView* array(toArrayBufferView(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->getRandomValues(array, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

static inline bool isObservable(JSCrypto* jsCrypto)
{
    if (jsCrypto->hasCustomProperties())
        return true;
    return false;
}

bool JSCryptoOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSCrypto* jsCrypto = static_cast<JSCrypto*>(handle.get().asCell());
    if (!isObservable(jsCrypto))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSCryptoOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSCrypto* jsCrypto = static_cast<JSCrypto*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsCrypto->impl(), jsCrypto);
    jsCrypto->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, Crypto* impl)
{
    return wrap<JSCrypto>(exec, globalObject, impl);
}

Crypto* toCrypto(JSC::JSValue value)
{
    return value.inherits(&JSCrypto::s_info) ? static_cast<JSCrypto*>(asObject(value))->impl() : 0;
}

}
