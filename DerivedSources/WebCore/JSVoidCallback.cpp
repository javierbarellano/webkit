/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSVoidCallback.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "VoidCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSVoidCallback);
/* Hash table for prototype */

static const HashTableValue JSVoidCallbackPrototypeTableValues[] =
{
    { "handleEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsVoidCallbackPrototypeFunctionHandleEvent), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSVoidCallbackPrototypeTable = { 2, 1, JSVoidCallbackPrototypeTableValues, 0 };
const ClassInfo JSVoidCallbackPrototype::s_info = { "VoidCallbackPrototype", &Base::s_info, &JSVoidCallbackPrototypeTable, 0, CREATE_METHOD_TABLE(JSVoidCallbackPrototype) };

JSObject* JSVoidCallbackPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSVoidCallback>(exec, globalObject);
}

bool JSVoidCallbackPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSVoidCallbackPrototype* thisObject = jsCast<JSVoidCallbackPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSVoidCallbackPrototypeTable, thisObject, propertyName, slot);
}

bool JSVoidCallbackPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSVoidCallbackPrototype* thisObject = jsCast<JSVoidCallbackPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSVoidCallbackPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSVoidCallback::s_info = { "VoidCallback", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSVoidCallback) };

JSVoidCallback::JSVoidCallback(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<VoidCallback> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSVoidCallback::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSVoidCallback::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSVoidCallbackPrototype::create(exec->globalData(), globalObject, JSVoidCallbackPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSVoidCallback::destroy(JSC::JSCell* cell)
{
    JSVoidCallback* thisObject = jsCast<JSVoidCallback*>(cell);
    thisObject->JSVoidCallback::~JSVoidCallback();
}

JSVoidCallback::~JSVoidCallback()
{
    releaseImplIfNotNull();
}

EncodedJSValue JSC_HOST_CALL jsVoidCallbackPrototypeFunctionHandleEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSVoidCallback::s_info))
        return throwVMTypeError(exec);
    JSVoidCallback* castedThis = static_cast<JSVoidCallback*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSVoidCallback::s_info);
    VoidCallback* impl = static_cast<VoidCallback*>(castedThis->impl());
    impl->handleEvent();
    return JSValue::encode(jsUndefined());
}

static inline bool isObservable(JSVoidCallback* jsVoidCallback)
{
    if (jsVoidCallback->hasCustomProperties())
        return true;
    return false;
}

bool JSVoidCallbackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSVoidCallback* jsVoidCallback = static_cast<JSVoidCallback*>(handle.get().asCell());
    if (!isObservable(jsVoidCallback))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSVoidCallbackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSVoidCallback* jsVoidCallback = static_cast<JSVoidCallback*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsVoidCallback->impl(), jsVoidCallback);
    jsVoidCallback->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, VoidCallback* impl)
{
    return wrap<JSVoidCallback>(exec, globalObject, impl);
}


}
