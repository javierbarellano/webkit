/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNavServices.h"

#include "NavServices.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSNavServices);
/* Hash table */

static const HashTableValue JSNavServicesTableValues[] =
{
    { "length", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServicesLength), (intptr_t)0, NoIntrinsic },
    { "servicesAvailable", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServicesServicesAvailable), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServicesTable = { 4, 3, JSNavServicesTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSNavServicesPrototypeTableValues[] =
{
    { "item", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsNavServicesPrototypeFunctionItem), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServicesPrototypeTable = { 2, 1, JSNavServicesPrototypeTableValues, 0 };
const ClassInfo JSNavServicesPrototype::s_info = { "NavServicesPrototype", &Base::s_info, &JSNavServicesPrototypeTable, 0, CREATE_METHOD_TABLE(JSNavServicesPrototype) };

JSObject* JSNavServicesPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNavServices>(exec, globalObject);
}

bool JSNavServicesPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavServicesPrototype* thisObject = jsCast<JSNavServicesPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSNavServicesPrototypeTable, thisObject, propertyName, slot);
}

bool JSNavServicesPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavServicesPrototype* thisObject = jsCast<JSNavServicesPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSNavServicesPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSNavServices::s_info = { "NavServices", &Base::s_info, &JSNavServicesTable, 0 , CREATE_METHOD_TABLE(JSNavServices) };

JSNavServices::JSNavServices(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<NavServices> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNavServices::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSNavServices::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSNavServicesPrototype::create(exec->globalData(), globalObject, JSNavServicesPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSNavServices::destroy(JSC::JSCell* cell)
{
    JSNavServices* thisObject = jsCast<JSNavServices*>(cell);
    thisObject->JSNavServices::~JSNavServices();
}

JSNavServices::~JSNavServices()
{
    releaseImplIfNotNull();
}

bool JSNavServices::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavServices* thisObject = jsCast<JSNavServices*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSNavServices, Base>(exec, &JSNavServicesTable, thisObject, propertyName, slot);
}

bool JSNavServices::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavServices* thisObject = jsCast<JSNavServices*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSNavServices, Base>(exec, &JSNavServicesTable, thisObject, propertyName, descriptor);
}

JSValue jsNavServicesLength(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavServices* castedThis = static_cast<JSNavServices*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavServices* impl = static_cast<NavServices*>(castedThis->impl());
    JSValue result = jsNumber(impl->length());
    return result;
}


JSValue jsNavServicesServicesAvailable(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavServices* castedThis = static_cast<JSNavServices*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavServices* impl = static_cast<NavServices*>(castedThis->impl());
    JSValue result = jsNumber(impl->servicesAvailable());
    return result;
}


EncodedJSValue JSC_HOST_CALL jsNavServicesPrototypeFunctionItem(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSNavServices::s_info))
        return throwVMTypeError(exec);
    JSNavServices* castedThis = static_cast<JSNavServices*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSNavServices::s_info);
    return JSValue::encode(castedThis->item(exec));
}

static inline bool isObservable(JSNavServices* jsNavServices)
{
    if (jsNavServices->hasCustomProperties())
        return true;
    return false;
}

bool JSNavServicesOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNavServices* jsNavServices = static_cast<JSNavServices*>(handle.get().asCell());
    if (!isObservable(jsNavServices))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNavServicesOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNavServices* jsNavServices = static_cast<JSNavServices*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavServices->impl(), jsNavServices);
    jsNavServices->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, NavServices* impl)
{
    return wrap<JSNavServices>(exec, globalObject, impl);
}

NavServices* toNavServices(JSC::JSValue value)
{
    return value.inherits(&JSNavServices::s_info) ? static_cast<JSNavServices*>(asObject(value))->impl() : 0;
}

}
