/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNavServiceError.h"

#include "NavServiceError.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSNavServiceError);
/* Hash table */

static const HashTableValue JSNavServiceErrorTableValues[] =
{
    { "code", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceErrorCode), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceErrorConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServiceErrorTable = { 5, 3, JSNavServiceErrorTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSNavServiceErrorConstructorTableValues[] =
{
    { "PERMISSION_DENIED_ERR", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceErrorPERMISSION_DENIED_ERR), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServiceErrorConstructorTable = { 2, 1, JSNavServiceErrorConstructorTableValues, 0 };

COMPILE_ASSERT(1 == NavServiceError::PERMISSION_DENIED_ERR, NavServiceErrorEnumPERMISSION_DENIED_ERRIsWrongUseDoNotCheckConstants);

const ClassInfo JSNavServiceErrorConstructor::s_info = { "NavServiceErrorConstructor", &Base::s_info, &JSNavServiceErrorConstructorTable, 0, CREATE_METHOD_TABLE(JSNavServiceErrorConstructor) };

JSNavServiceErrorConstructor::JSNavServiceErrorConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSNavServiceErrorConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSNavServiceErrorPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSNavServiceErrorConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSNavServiceErrorConstructor, JSDOMWrapper>(exec, &JSNavServiceErrorConstructorTable, static_cast<JSNavServiceErrorConstructor*>(cell), propertyName, slot);
}

bool JSNavServiceErrorConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSNavServiceErrorConstructor, JSDOMWrapper>(exec, &JSNavServiceErrorConstructorTable, static_cast<JSNavServiceErrorConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSNavServiceErrorPrototypeTableValues[] =
{
    { "PERMISSION_DENIED_ERR", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavServiceErrorPERMISSION_DENIED_ERR), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavServiceErrorPrototypeTable = { 2, 1, JSNavServiceErrorPrototypeTableValues, 0 };
const ClassInfo JSNavServiceErrorPrototype::s_info = { "NavServiceErrorPrototype", &Base::s_info, &JSNavServiceErrorPrototypeTable, 0, CREATE_METHOD_TABLE(JSNavServiceErrorPrototype) };

JSObject* JSNavServiceErrorPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNavServiceError>(exec, globalObject);
}

bool JSNavServiceErrorPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavServiceErrorPrototype* thisObject = jsCast<JSNavServiceErrorPrototype*>(cell);
    return getStaticValueSlot<JSNavServiceErrorPrototype, JSObject>(exec, &JSNavServiceErrorPrototypeTable, thisObject, propertyName, slot);
}

bool JSNavServiceErrorPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavServiceErrorPrototype* thisObject = jsCast<JSNavServiceErrorPrototype*>(object);
    return getStaticValueDescriptor<JSNavServiceErrorPrototype, JSObject>(exec, &JSNavServiceErrorPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSNavServiceError::s_info = { "NavServiceError", &Base::s_info, &JSNavServiceErrorTable, 0 , CREATE_METHOD_TABLE(JSNavServiceError) };

JSNavServiceError::JSNavServiceError(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<NavServiceError> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNavServiceError::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSNavServiceError::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSNavServiceErrorPrototype::create(exec->globalData(), globalObject, JSNavServiceErrorPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSNavServiceError::destroy(JSC::JSCell* cell)
{
    JSNavServiceError* thisObject = jsCast<JSNavServiceError*>(cell);
    thisObject->JSNavServiceError::~JSNavServiceError();
}

JSNavServiceError::~JSNavServiceError()
{
    releaseImplIfNotNull();
}

bool JSNavServiceError::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavServiceError* thisObject = jsCast<JSNavServiceError*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSNavServiceError, Base>(exec, &JSNavServiceErrorTable, thisObject, propertyName, slot);
}

bool JSNavServiceError::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavServiceError* thisObject = jsCast<JSNavServiceError*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSNavServiceError, Base>(exec, &JSNavServiceErrorTable, thisObject, propertyName, descriptor);
}

JSValue jsNavServiceErrorCode(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavServiceError* castedThis = static_cast<JSNavServiceError*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavServiceError* impl = static_cast<NavServiceError*>(castedThis->impl());
    JSValue result = jsNumber(impl->code());
    return result;
}


JSValue jsNavServiceErrorConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavServiceError* domObject = static_cast<JSNavServiceError*>(asObject(slotBase));
    return JSNavServiceError::getConstructor(exec, domObject->globalObject());
}

JSValue JSNavServiceError::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNavServiceErrorConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

// Constant getters

JSValue jsNavServiceErrorPERMISSION_DENIED_ERR(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

static inline bool isObservable(JSNavServiceError* jsNavServiceError)
{
    if (jsNavServiceError->hasCustomProperties())
        return true;
    return false;
}

bool JSNavServiceErrorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNavServiceError* jsNavServiceError = static_cast<JSNavServiceError*>(handle.get().asCell());
    if (!isObservable(jsNavServiceError))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNavServiceErrorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNavServiceError* jsNavServiceError = static_cast<JSNavServiceError*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavServiceError->impl(), jsNavServiceError);
    jsNavServiceError->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, NavServiceError* impl)
{
    return wrap<JSNavServiceError>(exec, globalObject, impl);
}

NavServiceError* toNavServiceError(JSC::JSValue value)
{
    return value.inherits(&JSNavServiceError::s_info) ? static_cast<JSNavServiceError*>(asObject(value))->impl() : 0;
}

}
