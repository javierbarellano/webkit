/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSSessionDescription.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSIceCandidate.h"
#include "KURL.h"
#include "SessionDescription.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSessionDescription);
/* Hash table */

static const HashTableValue JSSessionDescriptionTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSessionDescriptionConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSessionDescriptionTable = { 2, 1, JSSessionDescriptionTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSessionDescriptionConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSessionDescriptionConstructorTable = { 1, 0, JSSessionDescriptionConstructorTableValues, 0 };
const ClassInfo JSSessionDescriptionConstructor::s_info = { "SessionDescriptionConstructor", &Base::s_info, &JSSessionDescriptionConstructorTable, 0, CREATE_METHOD_TABLE(JSSessionDescriptionConstructor) };

JSSessionDescriptionConstructor::JSSessionDescriptionConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSessionDescriptionConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSSessionDescriptionPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->globalData(), exec->propertyNames().length, jsNumber(1), ReadOnly | DontDelete | DontEnum);
}

bool JSSessionDescriptionConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSessionDescriptionConstructor, JSDOMWrapper>(exec, &JSSessionDescriptionConstructorTable, static_cast<JSSessionDescriptionConstructor*>(cell), propertyName, slot);
}

bool JSSessionDescriptionConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSessionDescriptionConstructor, JSDOMWrapper>(exec, &JSSessionDescriptionConstructorTable, static_cast<JSSessionDescriptionConstructor*>(object), propertyName, descriptor);
}

EncodedJSValue JSC_HOST_CALL JSSessionDescriptionConstructor::constructJSSessionDescription(ExecState* exec)
{
    JSSessionDescriptionConstructor* castedThis = static_cast<JSSessionDescriptionConstructor*>(exec->callee());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    const String& sdp(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<SessionDescription> object = SessionDescription::create(sdp);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

ConstructType JSSessionDescriptionConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSSessionDescription;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSSessionDescriptionPrototypeTableValues[] =
{
    { "addCandidate", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsSessionDescriptionPrototypeFunctionAddCandidate), (intptr_t)1, NoIntrinsic },
    { "toSdp", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsSessionDescriptionPrototypeFunctionToSdp), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSessionDescriptionPrototypeTable = { 5, 3, JSSessionDescriptionPrototypeTableValues, 0 };
const ClassInfo JSSessionDescriptionPrototype::s_info = { "SessionDescriptionPrototype", &Base::s_info, &JSSessionDescriptionPrototypeTable, 0, CREATE_METHOD_TABLE(JSSessionDescriptionPrototype) };

JSObject* JSSessionDescriptionPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSessionDescription>(exec, globalObject);
}

bool JSSessionDescriptionPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSSessionDescriptionPrototype* thisObject = jsCast<JSSessionDescriptionPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSSessionDescriptionPrototypeTable, thisObject, propertyName, slot);
}

bool JSSessionDescriptionPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSSessionDescriptionPrototype* thisObject = jsCast<JSSessionDescriptionPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSSessionDescriptionPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSSessionDescription::s_info = { "SessionDescription", &Base::s_info, &JSSessionDescriptionTable, 0 , CREATE_METHOD_TABLE(JSSessionDescription) };

JSSessionDescription::JSSessionDescription(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SessionDescription> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSSessionDescription::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSSessionDescription::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSSessionDescriptionPrototype::create(exec->globalData(), globalObject, JSSessionDescriptionPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSSessionDescription::destroy(JSC::JSCell* cell)
{
    JSSessionDescription* thisObject = jsCast<JSSessionDescription*>(cell);
    thisObject->JSSessionDescription::~JSSessionDescription();
}

JSSessionDescription::~JSSessionDescription()
{
    releaseImplIfNotNull();
}

bool JSSessionDescription::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSSessionDescription* thisObject = jsCast<JSSessionDescription*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSSessionDescription, Base>(exec, &JSSessionDescriptionTable, thisObject, propertyName, slot);
}

bool JSSessionDescription::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSSessionDescription* thisObject = jsCast<JSSessionDescription*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSSessionDescription, Base>(exec, &JSSessionDescriptionTable, thisObject, propertyName, descriptor);
}

JSValue jsSessionDescriptionConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSSessionDescription* domObject = static_cast<JSSessionDescription*>(asObject(slotBase));
    return JSSessionDescription::getConstructor(exec, domObject->globalObject());
}

JSValue JSSessionDescription::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSessionDescriptionConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsSessionDescriptionPrototypeFunctionAddCandidate(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSSessionDescription::s_info))
        return throwVMTypeError(exec);
    JSSessionDescription* castedThis = static_cast<JSSessionDescription*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSSessionDescription::s_info);
    SessionDescription* impl = static_cast<SessionDescription*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    IceCandidate* candidate(toIceCandidate(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->addCandidate(candidate);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsSessionDescriptionPrototypeFunctionToSdp(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSSessionDescription::s_info))
        return throwVMTypeError(exec);
    JSSessionDescription* castedThis = static_cast<JSSessionDescription*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSSessionDescription::s_info);
    SessionDescription* impl = static_cast<SessionDescription*>(castedThis->impl());

    JSC::JSValue result = jsString(exec, impl->toSdp());
    return JSValue::encode(result);
}

static inline bool isObservable(JSSessionDescription* jsSessionDescription)
{
    if (jsSessionDescription->hasCustomProperties())
        return true;
    return false;
}

bool JSSessionDescriptionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSSessionDescription* jsSessionDescription = static_cast<JSSessionDescription*>(handle.get().asCell());
    if (!isObservable(jsSessionDescription))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSSessionDescriptionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSSessionDescription* jsSessionDescription = static_cast<JSSessionDescription*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsSessionDescription->impl(), jsSessionDescription);
    jsSessionDescription->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, SessionDescription* impl)
{
    return wrap<JSSessionDescription>(exec, globalObject, impl);
}

SessionDescription* toSessionDescription(JSC::JSValue value)
{
    return value.inherits(&JSSessionDescription::s_info) ? static_cast<JSSessionDescription*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
