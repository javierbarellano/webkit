/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSPeerConnection00.h"

#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSIceCallback.h"
#include "JSIceCandidate.h"
#include "JSMediaStream.h"
#include "JSMediaStreamList.h"
#include "JSSessionDescription.h"
#include "MediaStreamList.h"
#include "PeerConnection00.h"
#include "SessionDescription.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSPeerConnection00);
/* Hash table */

static const HashTableValue JSPeerConnection00TableValues[] =
{
    { "localDescription", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00LocalDescription), (intptr_t)0, NoIntrinsic },
    { "remoteDescription", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00RemoteDescription), (intptr_t)0, NoIntrinsic },
    { "readyState", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ReadyState), (intptr_t)0, NoIntrinsic },
    { "iceState", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00IceState), (intptr_t)0, NoIntrinsic },
    { "localStreams", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00LocalStreams), (intptr_t)0, NoIntrinsic },
    { "remoteStreams", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00RemoteStreams), (intptr_t)0, NoIntrinsic },
    { "onconnecting", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00Onconnecting), (intptr_t)setJSPeerConnection00Onconnecting, NoIntrinsic },
    { "onopen", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00Onopen), (intptr_t)setJSPeerConnection00Onopen, NoIntrinsic },
    { "onstatechange", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00Onstatechange), (intptr_t)setJSPeerConnection00Onstatechange, NoIntrinsic },
    { "onaddstream", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00Onaddstream), (intptr_t)setJSPeerConnection00Onaddstream, NoIntrinsic },
    { "onremovestream", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00Onremovestream), (intptr_t)setJSPeerConnection00Onremovestream, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00Constructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPeerConnection00Table = { 34, 31, JSPeerConnection00TableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSPeerConnection00ConstructorTableValues[] =
{
    { "SDP_OFFER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00SDP_OFFER), (intptr_t)0, NoIntrinsic },
    { "SDP_PRANSWER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00SDP_PRANSWER), (intptr_t)0, NoIntrinsic },
    { "SDP_ANSWER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00SDP_ANSWER), (intptr_t)0, NoIntrinsic },
    { "NEW", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00NEW), (intptr_t)0, NoIntrinsic },
    { "NEGOTIATING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00NEGOTIATING), (intptr_t)0, NoIntrinsic },
    { "ACTIVE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ACTIVE), (intptr_t)0, NoIntrinsic },
    { "CLOSED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00CLOSED), (intptr_t)0, NoIntrinsic },
    { "ICE_GATHERING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_GATHERING), (intptr_t)0, NoIntrinsic },
    { "ICE_WAITING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_WAITING), (intptr_t)0, NoIntrinsic },
    { "ICE_CHECKING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_CHECKING), (intptr_t)0, NoIntrinsic },
    { "ICE_CONNECTED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_CONNECTED), (intptr_t)0, NoIntrinsic },
    { "ICE_COMPLETED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_COMPLETED), (intptr_t)0, NoIntrinsic },
    { "ICE_FAILED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_FAILED), (intptr_t)0, NoIntrinsic },
    { "ICE_CLOSED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_CLOSED), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPeerConnection00ConstructorTable = { 37, 31, JSPeerConnection00ConstructorTableValues, 0 };

COMPILE_ASSERT(0x100 == PeerConnection00::SDP_OFFER, PeerConnection00EnumSDP_OFFERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x200 == PeerConnection00::SDP_PRANSWER, PeerConnection00EnumSDP_PRANSWERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x300 == PeerConnection00::SDP_ANSWER, PeerConnection00EnumSDP_ANSWERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0 == PeerConnection00::NEW, PeerConnection00EnumNEWIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == PeerConnection00::NEGOTIATING, PeerConnection00EnumNEGOTIATINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == PeerConnection00::ACTIVE, PeerConnection00EnumACTIVEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == PeerConnection00::CLOSED, PeerConnection00EnumCLOSEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x100 == PeerConnection00::ICE_GATHERING, PeerConnection00EnumICE_GATHERINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x200 == PeerConnection00::ICE_WAITING, PeerConnection00EnumICE_WAITINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x300 == PeerConnection00::ICE_CHECKING, PeerConnection00EnumICE_CHECKINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x400 == PeerConnection00::ICE_CONNECTED, PeerConnection00EnumICE_CONNECTEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x500 == PeerConnection00::ICE_COMPLETED, PeerConnection00EnumICE_COMPLETEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x600 == PeerConnection00::ICE_FAILED, PeerConnection00EnumICE_FAILEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x700 == PeerConnection00::ICE_CLOSED, PeerConnection00EnumICE_CLOSEDIsWrongUseDoNotCheckConstants);

const ClassInfo JSPeerConnection00Constructor::s_info = { "PeerConnection00Constructor", &Base::s_info, &JSPeerConnection00ConstructorTable, 0, CREATE_METHOD_TABLE(JSPeerConnection00Constructor) };

JSPeerConnection00Constructor::JSPeerConnection00Constructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSPeerConnection00Constructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSPeerConnection00Prototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->globalData(), exec->propertyNames().length, jsNumber(2), ReadOnly | DontDelete | DontEnum);
}

bool JSPeerConnection00Constructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSPeerConnection00Constructor, JSDOMWrapper>(exec, &JSPeerConnection00ConstructorTable, static_cast<JSPeerConnection00Constructor*>(cell), propertyName, slot);
}

bool JSPeerConnection00Constructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSPeerConnection00Constructor, JSDOMWrapper>(exec, &JSPeerConnection00ConstructorTable, static_cast<JSPeerConnection00Constructor*>(object), propertyName, descriptor);
}

EncodedJSValue JSC_HOST_CALL JSPeerConnection00Constructor::constructJSPeerConnection00(ExecState* exec)
{
    JSPeerConnection00Constructor* castedThis = static_cast<JSPeerConnection00Constructor*>(exec->callee());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    const String& serverConfiguration(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    if (exec->argumentCount() <= 1 || !exec->argument(1).isFunction()) {
        setDOMException(exec, TYPE_MISMATCH_ERR);
        return JSValue::encode(jsUndefined());
    }
    RefPtr<IceCallback> iceCallback = JSIceCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwVMError(exec, createReferenceError(exec, "PeerConnection00 constructor associated document is unavailable"));
    RefPtr<PeerConnection00> object = PeerConnection00::create(context, serverConfiguration, iceCallback);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

ConstructType JSPeerConnection00Constructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSPeerConnection00;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSPeerConnection00PrototypeTableValues[] =
{
    { "SDP_OFFER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00SDP_OFFER), (intptr_t)0, NoIntrinsic },
    { "SDP_PRANSWER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00SDP_PRANSWER), (intptr_t)0, NoIntrinsic },
    { "SDP_ANSWER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00SDP_ANSWER), (intptr_t)0, NoIntrinsic },
    { "NEW", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00NEW), (intptr_t)0, NoIntrinsic },
    { "NEGOTIATING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00NEGOTIATING), (intptr_t)0, NoIntrinsic },
    { "ACTIVE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ACTIVE), (intptr_t)0, NoIntrinsic },
    { "CLOSED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00CLOSED), (intptr_t)0, NoIntrinsic },
    { "ICE_GATHERING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_GATHERING), (intptr_t)0, NoIntrinsic },
    { "ICE_WAITING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_WAITING), (intptr_t)0, NoIntrinsic },
    { "ICE_CHECKING", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_CHECKING), (intptr_t)0, NoIntrinsic },
    { "ICE_CONNECTED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_CONNECTED), (intptr_t)0, NoIntrinsic },
    { "ICE_COMPLETED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_COMPLETED), (intptr_t)0, NoIntrinsic },
    { "ICE_FAILED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_FAILED), (intptr_t)0, NoIntrinsic },
    { "ICE_CLOSED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeerConnection00ICE_CLOSED), (intptr_t)0, NoIntrinsic },
    { "createOffer", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionCreateOffer), (intptr_t)1, NoIntrinsic },
    { "createAnswer", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionCreateAnswer), (intptr_t)2, NoIntrinsic },
    { "setLocalDescription", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionSetLocalDescription), (intptr_t)2, NoIntrinsic },
    { "setRemoteDescription", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionSetRemoteDescription), (intptr_t)2, NoIntrinsic },
    { "startIce", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionStartIce), (intptr_t)1, NoIntrinsic },
    { "processIceMessage", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionProcessIceMessage), (intptr_t)1, NoIntrinsic },
    { "addStream", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionAddStream), (intptr_t)2, NoIntrinsic },
    { "removeStream", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionRemoveStream), (intptr_t)1, NoIntrinsic },
    { "close", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionClose), (intptr_t)0, NoIntrinsic },
    { "addEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionAddEventListener), (intptr_t)3, NoIntrinsic },
    { "removeEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionRemoveEventListener), (intptr_t)3, NoIntrinsic },
    { "dispatchEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsPeerConnection00PrototypeFunctionDispatchEvent), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPeerConnection00PrototypeTable = { 71, 63, JSPeerConnection00PrototypeTableValues, 0 };
const ClassInfo JSPeerConnection00Prototype::s_info = { "PeerConnection00Prototype", &Base::s_info, &JSPeerConnection00PrototypeTable, 0, CREATE_METHOD_TABLE(JSPeerConnection00Prototype) };

JSObject* JSPeerConnection00Prototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPeerConnection00>(exec, globalObject);
}

bool JSPeerConnection00Prototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSPeerConnection00Prototype* thisObject = jsCast<JSPeerConnection00Prototype*>(cell);
    return getStaticPropertySlot<JSPeerConnection00Prototype, JSObject>(exec, &JSPeerConnection00PrototypeTable, thisObject, propertyName, slot);
}

bool JSPeerConnection00Prototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSPeerConnection00Prototype* thisObject = jsCast<JSPeerConnection00Prototype*>(object);
    return getStaticPropertyDescriptor<JSPeerConnection00Prototype, JSObject>(exec, &JSPeerConnection00PrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSPeerConnection00::s_info = { "PeerConnection00", &Base::s_info, &JSPeerConnection00Table, 0 , CREATE_METHOD_TABLE(JSPeerConnection00) };

JSPeerConnection00::JSPeerConnection00(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<PeerConnection00> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSPeerConnection00::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSPeerConnection00::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSPeerConnection00Prototype::create(exec->globalData(), globalObject, JSPeerConnection00Prototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSPeerConnection00::destroy(JSC::JSCell* cell)
{
    JSPeerConnection00* thisObject = jsCast<JSPeerConnection00*>(cell);
    thisObject->JSPeerConnection00::~JSPeerConnection00();
}

JSPeerConnection00::~JSPeerConnection00()
{
    releaseImplIfNotNull();
}

bool JSPeerConnection00::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSPeerConnection00* thisObject = jsCast<JSPeerConnection00*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSPeerConnection00, Base>(exec, &JSPeerConnection00Table, thisObject, propertyName, slot);
}

bool JSPeerConnection00::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSPeerConnection00* thisObject = jsCast<JSPeerConnection00*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSPeerConnection00, Base>(exec, &JSPeerConnection00Table, thisObject, propertyName, descriptor);
}

JSValue jsPeerConnection00LocalDescription(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->localDescription()));
    return result;
}


JSValue jsPeerConnection00RemoteDescription(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->remoteDescription()));
    return result;
}


JSValue jsPeerConnection00ReadyState(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    JSValue result = jsNumber(impl->readyState());
    return result;
}


JSValue jsPeerConnection00IceState(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    JSValue result = jsNumber(impl->iceState());
    return result;
}


JSValue jsPeerConnection00LocalStreams(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->localStreams()));
    return result;
}


JSValue jsPeerConnection00RemoteStreams(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->remoteStreams()));
    return result;
}


JSValue jsPeerConnection00Onconnecting(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (EventListener* listener = impl->onconnecting()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsPeerConnection00Onopen(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (EventListener* listener = impl->onopen()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsPeerConnection00Onstatechange(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (EventListener* listener = impl->onstatechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsPeerConnection00Onaddstream(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (EventListener* listener = impl->onaddstream()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsPeerConnection00Onremovestream(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (EventListener* listener = impl->onremovestream()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsPeerConnection00Constructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSPeerConnection00* domObject = static_cast<JSPeerConnection00*>(asObject(slotBase));
    return JSPeerConnection00::getConstructor(exec, domObject->globalObject());
}

void JSPeerConnection00::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSPeerConnection00* thisObject = jsCast<JSPeerConnection00*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSPeerConnection00, Base>(exec, propertyName, value, &JSPeerConnection00Table, thisObject, slot);
}

void setJSPeerConnection00Onconnecting(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(thisObject);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    impl->setOnconnecting(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSPeerConnection00Onopen(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(thisObject);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    impl->setOnopen(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSPeerConnection00Onstatechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(thisObject);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    impl->setOnstatechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSPeerConnection00Onaddstream(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(thisObject);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    impl->setOnaddstream(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSPeerConnection00Onremovestream(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(thisObject);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    impl->setOnremovestream(createJSAttributeEventListener(exec, value, thisObject));
}


JSValue JSPeerConnection00::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPeerConnection00Constructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionCreateOffer(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 0) {

        JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createOffer()));
        return JSValue::encode(result);
    }

    const String& mediaHints(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createOffer(mediaHints)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionCreateAnswer(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    const String& offer(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 1) {

        JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createAnswer(offer)));
        return JSValue::encode(result);
    }

    const String& mediaHints(ustringToString(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createAnswer(offer, mediaHints)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionSetLocalDescription(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    unsigned short action(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toUInt32(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    SessionDescription* desc(toSessionDescription(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->setLocalDescription(action, desc, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionSetRemoteDescription(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    unsigned short action(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toUInt32(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    SessionDescription* desc(toSessionDescription(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->setRemoteDescription(action, desc, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionStartIce(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    ExceptionCode ec = 0;

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 0) {
        impl->startIce(ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    const String& iceOptions(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->startIce(iceOptions, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionProcessIceMessage(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    IceCandidate* candidate(toIceCandidate(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->processIceMessage(candidate, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionAddStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    if (exec->argumentCount() > 0 && !exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(&JSMediaStream::s_info))
        return throwVMTypeError(exec);
    MediaStream* stream(toMediaStream(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 1) {
        impl->addStream(stream, ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    const String& mediaStreamHints(ustringToString(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->addStream(stream, mediaStreamHints, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionRemoveStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    if (exec->argumentCount() > 0 && !exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(&JSMediaStream::s_info))
        return throwVMTypeError(exec);
    MediaStream* stream(toMediaStream(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->removeStream(stream, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionClose(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    ExceptionCode ec = 0;
    impl->close(ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->addEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->removeEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsPeerConnection00PrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSPeerConnection00::s_info))
        return throwVMTypeError(exec);
    JSPeerConnection00* castedThis = static_cast<JSPeerConnection00*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSPeerConnection00::s_info);
    PeerConnection00* impl = static_cast<PeerConnection00*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    Event* event(toEvent(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl->dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSPeerConnection00::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSPeerConnection00* thisObject = jsCast<JSPeerConnection00*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

// Constant getters

JSValue jsPeerConnection00SDP_OFFER(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x100));
}

JSValue jsPeerConnection00SDP_PRANSWER(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x200));
}

JSValue jsPeerConnection00SDP_ANSWER(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x300));
}

JSValue jsPeerConnection00NEW(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0));
}

JSValue jsPeerConnection00NEGOTIATING(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

JSValue jsPeerConnection00ACTIVE(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(2));
}

JSValue jsPeerConnection00CLOSED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(3));
}

JSValue jsPeerConnection00ICE_GATHERING(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x100));
}

JSValue jsPeerConnection00ICE_WAITING(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x200));
}

JSValue jsPeerConnection00ICE_CHECKING(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x300));
}

JSValue jsPeerConnection00ICE_CONNECTED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x400));
}

JSValue jsPeerConnection00ICE_COMPLETED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x500));
}

JSValue jsPeerConnection00ICE_FAILED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x600));
}

JSValue jsPeerConnection00ICE_CLOSED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x700));
}

static inline bool isObservable(JSPeerConnection00* jsPeerConnection00)
{
    if (jsPeerConnection00->hasCustomProperties())
        return true;
    if (jsPeerConnection00->impl()->hasEventListeners())
        return true;
    return false;
}

bool JSPeerConnection00Owner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSPeerConnection00* jsPeerConnection00 = static_cast<JSPeerConnection00*>(handle.get().asCell());
    if (jsPeerConnection00->impl()->hasPendingActivity())
        return true;
    if (!isObservable(jsPeerConnection00))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSPeerConnection00Owner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSPeerConnection00* jsPeerConnection00 = static_cast<JSPeerConnection00*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsPeerConnection00->impl(), jsPeerConnection00);
    jsPeerConnection00->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, PeerConnection00* impl)
{
    return wrap<JSPeerConnection00>(exec, globalObject, impl);
}

PeerConnection00* toPeerConnection00(JSC::JSValue value)
{
    return value.inherits(&JSPeerConnection00::s_info) ? static_cast<JSPeerConnection00*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
