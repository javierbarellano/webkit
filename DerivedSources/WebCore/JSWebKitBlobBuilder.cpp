/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSWebKitBlobBuilder.h"

#include "Blob.h"
#include "ExceptionCode.h"
#include "JSArrayBuffer.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "WebKitBlobBuilder.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSWebKitBlobBuilder);
/* Hash table */

static const HashTableValue JSWebKitBlobBuilderTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitBlobBuilderConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebKitBlobBuilderTable = { 2, 1, JSWebKitBlobBuilderTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSWebKitBlobBuilderConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebKitBlobBuilderConstructorTable = { 1, 0, JSWebKitBlobBuilderConstructorTableValues, 0 };
const ClassInfo JSWebKitBlobBuilderConstructor::s_info = { "WebKitBlobBuilderConstructor", &Base::s_info, &JSWebKitBlobBuilderConstructorTable, 0, CREATE_METHOD_TABLE(JSWebKitBlobBuilderConstructor) };

JSWebKitBlobBuilderConstructor::JSWebKitBlobBuilderConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebKitBlobBuilderConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSWebKitBlobBuilderPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->globalData(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSWebKitBlobBuilderConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSWebKitBlobBuilderConstructor, JSDOMWrapper>(exec, &JSWebKitBlobBuilderConstructorTable, static_cast<JSWebKitBlobBuilderConstructor*>(cell), propertyName, slot);
}

bool JSWebKitBlobBuilderConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSWebKitBlobBuilderConstructor, JSDOMWrapper>(exec, &JSWebKitBlobBuilderConstructorTable, static_cast<JSWebKitBlobBuilderConstructor*>(object), propertyName, descriptor);
}

EncodedJSValue JSC_HOST_CALL JSWebKitBlobBuilderConstructor::constructJSWebKitBlobBuilder(ExecState* exec)
{
    JSWebKitBlobBuilderConstructor* castedThis = static_cast<JSWebKitBlobBuilderConstructor*>(exec->callee());
    RefPtr<WebKitBlobBuilder> object = WebKitBlobBuilder::create();
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

ConstructType JSWebKitBlobBuilderConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSWebKitBlobBuilder;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSWebKitBlobBuilderPrototypeTableValues[] =
{
    { "getBlob", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsWebKitBlobBuilderPrototypeFunctionGetBlob), (intptr_t)1, NoIntrinsic },
    { "append", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsWebKitBlobBuilderPrototypeFunctionAppend), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebKitBlobBuilderPrototypeTable = { 8, 7, JSWebKitBlobBuilderPrototypeTableValues, 0 };
static const HashTable* getJSWebKitBlobBuilderPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSWebKitBlobBuilderPrototypeTable);
}

const ClassInfo JSWebKitBlobBuilderPrototype::s_info = { "WebKitBlobBuilderPrototype", &Base::s_info, 0, getJSWebKitBlobBuilderPrototypeTable, CREATE_METHOD_TABLE(JSWebKitBlobBuilderPrototype) };

JSObject* JSWebKitBlobBuilderPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitBlobBuilder>(exec, globalObject);
}

bool JSWebKitBlobBuilderPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSWebKitBlobBuilderPrototype* thisObject = jsCast<JSWebKitBlobBuilderPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, getJSWebKitBlobBuilderPrototypeTable(exec), thisObject, propertyName, slot);
}

bool JSWebKitBlobBuilderPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSWebKitBlobBuilderPrototype* thisObject = jsCast<JSWebKitBlobBuilderPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, getJSWebKitBlobBuilderPrototypeTable(exec), thisObject, propertyName, descriptor);
}

static const HashTable* getJSWebKitBlobBuilderTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSWebKitBlobBuilderTable);
}

const ClassInfo JSWebKitBlobBuilder::s_info = { "WebKitBlobBuilder", &Base::s_info, 0, getJSWebKitBlobBuilderTable , CREATE_METHOD_TABLE(JSWebKitBlobBuilder) };

JSWebKitBlobBuilder::JSWebKitBlobBuilder(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebKitBlobBuilder> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSWebKitBlobBuilder::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSWebKitBlobBuilder::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSWebKitBlobBuilderPrototype::create(exec->globalData(), globalObject, JSWebKitBlobBuilderPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSWebKitBlobBuilder::destroy(JSC::JSCell* cell)
{
    JSWebKitBlobBuilder* thisObject = jsCast<JSWebKitBlobBuilder*>(cell);
    thisObject->JSWebKitBlobBuilder::~JSWebKitBlobBuilder();
}

JSWebKitBlobBuilder::~JSWebKitBlobBuilder()
{
    releaseImplIfNotNull();
}

bool JSWebKitBlobBuilder::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSWebKitBlobBuilder* thisObject = jsCast<JSWebKitBlobBuilder*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSWebKitBlobBuilder, Base>(exec, getJSWebKitBlobBuilderTable(exec), thisObject, propertyName, slot);
}

bool JSWebKitBlobBuilder::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSWebKitBlobBuilder* thisObject = jsCast<JSWebKitBlobBuilder*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSWebKitBlobBuilder, Base>(exec, getJSWebKitBlobBuilderTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsWebKitBlobBuilderConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSWebKitBlobBuilder* domObject = static_cast<JSWebKitBlobBuilder*>(asObject(slotBase));
    return JSWebKitBlobBuilder::getConstructor(exec, domObject->globalObject());
}

JSValue JSWebKitBlobBuilder::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitBlobBuilderConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsWebKitBlobBuilderPrototypeFunctionGetBlob(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSWebKitBlobBuilder::s_info))
        return throwVMTypeError(exec);
    JSWebKitBlobBuilder* castedThis = static_cast<JSWebKitBlobBuilder*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSWebKitBlobBuilder::s_info);
    WebKitBlobBuilder* impl = static_cast<WebKitBlobBuilder*>(castedThis->impl());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 0) {

        JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->getBlob()));
        return JSValue::encode(result);
    }

    const String& contentType(valueToStringWithUndefinedOrNullCheck(exec, MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->getBlob(contentType)));
    return JSValue::encode(result);
}

static EncodedJSValue JSC_HOST_CALL jsWebKitBlobBuilderPrototypeFunctionAppend1(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSWebKitBlobBuilder::s_info))
        return throwVMTypeError(exec);
    JSWebKitBlobBuilder* castedThis = static_cast<JSWebKitBlobBuilder*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSWebKitBlobBuilder::s_info);
    WebKitBlobBuilder* impl = static_cast<WebKitBlobBuilder*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    Blob* blob(toBlob(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->append(blob);
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebKitBlobBuilderPrototypeFunctionAppend2(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSWebKitBlobBuilder::s_info))
        return throwVMTypeError(exec);
    JSWebKitBlobBuilder* castedThis = static_cast<JSWebKitBlobBuilder*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSWebKitBlobBuilder::s_info);
    WebKitBlobBuilder* impl = static_cast<WebKitBlobBuilder*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ArrayBuffer* arrayBuffer(toArrayBuffer(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->append(arrayBuffer);
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebKitBlobBuilderPrototypeFunctionAppend3(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSWebKitBlobBuilder::s_info))
        return throwVMTypeError(exec);
    JSWebKitBlobBuilder* castedThis = static_cast<JSWebKitBlobBuilder*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSWebKitBlobBuilder::s_info);
    WebKitBlobBuilder* impl = static_cast<WebKitBlobBuilder*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    const String& value(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 1) {
        impl->append(value, ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    const String& endings(valueToStringWithUndefinedOrNullCheck(exec, MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->append(value, endings, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebKitBlobBuilderPrototypeFunctionAppend(ExecState* exec)
{
    size_t argsCount = exec->argumentCount();
    JSValue arg0(exec->argument(0));
    if ((argsCount == 1 && (arg0.isNull() || (arg0.isObject() && asObject(arg0)->inherits(&JSBlob::s_info)))))
        return jsWebKitBlobBuilderPrototypeFunctionAppend1(exec);
    if ((argsCount == 1 && (arg0.isNull() || (arg0.isObject() && asObject(arg0)->inherits(&JSArrayBuffer::s_info)))))
        return jsWebKitBlobBuilderPrototypeFunctionAppend2(exec);
    JSValue arg1(exec->argument(1));
    if ((argsCount == 1 && (arg0.isUndefinedOrNull() || arg0.isString() || arg0.isObject())) || (argsCount == 2 && (arg0.isUndefinedOrNull() || arg0.isString() || arg0.isObject()) && (arg1.isUndefinedOrNull() || arg1.isString() || arg1.isObject())))
        return jsWebKitBlobBuilderPrototypeFunctionAppend3(exec);
    return throwVMTypeError(exec);
}

static inline bool isObservable(JSWebKitBlobBuilder* jsWebKitBlobBuilder)
{
    if (jsWebKitBlobBuilder->hasCustomProperties())
        return true;
    return false;
}

bool JSWebKitBlobBuilderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSWebKitBlobBuilder* jsWebKitBlobBuilder = static_cast<JSWebKitBlobBuilder*>(handle.get().asCell());
    if (!isObservable(jsWebKitBlobBuilder))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebKitBlobBuilderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSWebKitBlobBuilder* jsWebKitBlobBuilder = static_cast<JSWebKitBlobBuilder*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebKitBlobBuilder->impl(), jsWebKitBlobBuilder);
    jsWebKitBlobBuilder->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, WebKitBlobBuilder* impl)
{
    return wrap<JSWebKitBlobBuilder>(exec, globalObject, impl);
}

WebKitBlobBuilder* toWebKitBlobBuilder(JSC::JSValue value)
{
    return value.inherits(&JSWebKitBlobBuilder::s_info) ? static_cast<JSWebKitBlobBuilder*>(asObject(value))->impl() : 0;
}

}
