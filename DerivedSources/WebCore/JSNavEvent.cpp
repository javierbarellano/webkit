/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNavEvent.h"

#include "KURL.h"
#include "NavEvent.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSNavEvent);
/* Hash table */

static const HashTableValue JSNavEventTableValues[] =
{
    { "propertyset", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavEventPropertyset), (intptr_t)0, NoIntrinsic },
    { "uuid", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavEventUuid), (intptr_t)0, NoIntrinsic },
    { "friendlyName", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavEventFriendlyName), (intptr_t)0, NoIntrinsic },
    { "serviceType", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavEventServiceType), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavEventConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavEventTable = { 16, 15, JSNavEventTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSNavEventConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavEventConstructorTable = { 1, 0, JSNavEventConstructorTableValues, 0 };
const ClassInfo JSNavEventConstructor::s_info = { "NavEventConstructor", &Base::s_info, &JSNavEventConstructorTable, 0, CREATE_METHOD_TABLE(JSNavEventConstructor) };

JSNavEventConstructor::JSNavEventConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSNavEventConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSNavEventPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSNavEventConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSNavEventConstructor, JSDOMWrapper>(exec, &JSNavEventConstructorTable, static_cast<JSNavEventConstructor*>(cell), propertyName, slot);
}

bool JSNavEventConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSNavEventConstructor, JSDOMWrapper>(exec, &JSNavEventConstructorTable, static_cast<JSNavEventConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSNavEventPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavEventPrototypeTable = { 1, 0, JSNavEventPrototypeTableValues, 0 };
const ClassInfo JSNavEventPrototype::s_info = { "NavEventPrototype", &Base::s_info, &JSNavEventPrototypeTable, 0, CREATE_METHOD_TABLE(JSNavEventPrototype) };

JSObject* JSNavEventPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNavEvent>(exec, globalObject);
}

const ClassInfo JSNavEvent::s_info = { "NavEvent", &Base::s_info, &JSNavEventTable, 0 , CREATE_METHOD_TABLE(JSNavEvent) };

JSNavEvent::JSNavEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<NavEvent> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNavEvent::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSNavEvent::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSNavEventPrototype::create(exec->globalData(), globalObject, JSNavEventPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSNavEvent::destroy(JSC::JSCell* cell)
{
    JSNavEvent* thisObject = jsCast<JSNavEvent*>(cell);
    thisObject->JSNavEvent::~JSNavEvent();
}

JSNavEvent::~JSNavEvent()
{
    releaseImplIfNotNull();
}

bool JSNavEvent::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavEvent* thisObject = jsCast<JSNavEvent*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSNavEvent, Base>(exec, &JSNavEventTable, thisObject, propertyName, slot);
}

bool JSNavEvent::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavEvent* thisObject = jsCast<JSNavEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSNavEvent, Base>(exec, &JSNavEventTable, thisObject, propertyName, descriptor);
}

JSValue jsNavEventPropertyset(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavEvent* castedThis = static_cast<JSNavEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavEvent* impl = static_cast<NavEvent*>(castedThis->impl());
    JSValue result = jsString(exec, impl->propertyset());
    return result;
}


JSValue jsNavEventUuid(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavEvent* castedThis = static_cast<JSNavEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavEvent* impl = static_cast<NavEvent*>(castedThis->impl());
    JSValue result = jsString(exec, impl->uuid());
    return result;
}


JSValue jsNavEventFriendlyName(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavEvent* castedThis = static_cast<JSNavEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavEvent* impl = static_cast<NavEvent*>(castedThis->impl());
    JSValue result = jsString(exec, impl->friendlyName());
    return result;
}


JSValue jsNavEventServiceType(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavEvent* castedThis = static_cast<JSNavEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavEvent* impl = static_cast<NavEvent*>(castedThis->impl());
    JSValue result = jsString(exec, impl->serviceType());
    return result;
}


JSValue jsNavEventConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavEvent* domObject = static_cast<JSNavEvent*>(asObject(slotBase));
    return JSNavEvent::getConstructor(exec, domObject->globalObject());
}

JSValue JSNavEvent::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNavEventConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSNavEvent* jsNavEvent)
{
    if (jsNavEvent->hasCustomProperties())
        return true;
    return false;
}

bool JSNavEventOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNavEvent* jsNavEvent = static_cast<JSNavEvent*>(handle.get().asCell());
    if (!isObservable(jsNavEvent))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNavEventOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNavEvent* jsNavEvent = static_cast<JSNavEvent*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavEvent->impl(), jsNavEvent);
    jsNavEvent->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, NavEvent* impl)
{
    return wrap<JSNavEvent>(exec, globalObject, impl);
}

NavEvent* toNavEvent(JSC::JSValue value)
{
    return value.inherits(&JSNavEvent::s_info) ? static_cast<JSNavEvent*>(asObject(value))->impl() : 0;
}

}
