/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MUTATION_OBSERVERS)

#include "JSWebKitMutationObserver.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "WebKitMutationObserver.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSWebKitMutationObserver);
/* Hash table */

static const HashTableValue JSWebKitMutationObserverTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitMutationObserverConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebKitMutationObserverTable = { 2, 1, JSWebKitMutationObserverTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSWebKitMutationObserverConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebKitMutationObserverConstructorTable = { 1, 0, JSWebKitMutationObserverConstructorTableValues, 0 };
const ClassInfo JSWebKitMutationObserverConstructor::s_info = { "WebKitMutationObserverConstructor", &Base::s_info, &JSWebKitMutationObserverConstructorTable, 0, CREATE_METHOD_TABLE(JSWebKitMutationObserverConstructor) };

JSWebKitMutationObserverConstructor::JSWebKitMutationObserverConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebKitMutationObserverConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSWebKitMutationObserverPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->globalData(), exec->propertyNames().length, jsNumber(1), ReadOnly | DontDelete | DontEnum);
}

bool JSWebKitMutationObserverConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSWebKitMutationObserverConstructor, JSDOMWrapper>(exec, &JSWebKitMutationObserverConstructorTable, static_cast<JSWebKitMutationObserverConstructor*>(cell), propertyName, slot);
}

bool JSWebKitMutationObserverConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSWebKitMutationObserverConstructor, JSDOMWrapper>(exec, &JSWebKitMutationObserverConstructorTable, static_cast<JSWebKitMutationObserverConstructor*>(object), propertyName, descriptor);
}

ConstructType JSWebKitMutationObserverConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSWebKitMutationObserver;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSWebKitMutationObserverPrototypeTableValues[] =
{
    { "observe", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsWebKitMutationObserverPrototypeFunctionObserve), (intptr_t)2, NoIntrinsic },
    { "disconnect", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsWebKitMutationObserverPrototypeFunctionDisconnect), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebKitMutationObserverPrototypeTable = { 4, 3, JSWebKitMutationObserverPrototypeTableValues, 0 };
const ClassInfo JSWebKitMutationObserverPrototype::s_info = { "WebKitMutationObserverPrototype", &Base::s_info, &JSWebKitMutationObserverPrototypeTable, 0, CREATE_METHOD_TABLE(JSWebKitMutationObserverPrototype) };

JSObject* JSWebKitMutationObserverPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitMutationObserver>(exec, globalObject);
}

bool JSWebKitMutationObserverPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSWebKitMutationObserverPrototype* thisObject = jsCast<JSWebKitMutationObserverPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSWebKitMutationObserverPrototypeTable, thisObject, propertyName, slot);
}

bool JSWebKitMutationObserverPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSWebKitMutationObserverPrototype* thisObject = jsCast<JSWebKitMutationObserverPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSWebKitMutationObserverPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSWebKitMutationObserver::s_info = { "WebKitMutationObserver", &Base::s_info, &JSWebKitMutationObserverTable, 0 , CREATE_METHOD_TABLE(JSWebKitMutationObserver) };

JSWebKitMutationObserver::JSWebKitMutationObserver(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebKitMutationObserver> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSWebKitMutationObserver::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSWebKitMutationObserver::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSWebKitMutationObserverPrototype::create(exec->globalData(), globalObject, JSWebKitMutationObserverPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSWebKitMutationObserver::destroy(JSC::JSCell* cell)
{
    JSWebKitMutationObserver* thisObject = jsCast<JSWebKitMutationObserver*>(cell);
    thisObject->JSWebKitMutationObserver::~JSWebKitMutationObserver();
}

JSWebKitMutationObserver::~JSWebKitMutationObserver()
{
    releaseImplIfNotNull();
}

bool JSWebKitMutationObserver::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSWebKitMutationObserver* thisObject = jsCast<JSWebKitMutationObserver*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSWebKitMutationObserver, Base>(exec, &JSWebKitMutationObserverTable, thisObject, propertyName, slot);
}

bool JSWebKitMutationObserver::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSWebKitMutationObserver* thisObject = jsCast<JSWebKitMutationObserver*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSWebKitMutationObserver, Base>(exec, &JSWebKitMutationObserverTable, thisObject, propertyName, descriptor);
}

JSValue jsWebKitMutationObserverConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSWebKitMutationObserver* domObject = static_cast<JSWebKitMutationObserver*>(asObject(slotBase));
    return JSWebKitMutationObserver::getConstructor(exec, domObject->globalObject());
}

JSValue JSWebKitMutationObserver::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitMutationObserverConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsWebKitMutationObserverPrototypeFunctionObserve(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSWebKitMutationObserver::s_info))
        return throwVMTypeError(exec);
    JSWebKitMutationObserver* castedThis = static_cast<JSWebKitMutationObserver*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSWebKitMutationObserver::s_info);
    return JSValue::encode(castedThis->observe(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebKitMutationObserverPrototypeFunctionDisconnect(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSWebKitMutationObserver::s_info))
        return throwVMTypeError(exec);
    JSWebKitMutationObserver* castedThis = static_cast<JSWebKitMutationObserver*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSWebKitMutationObserver::s_info);
    WebKitMutationObserver* impl = static_cast<WebKitMutationObserver*>(castedThis->impl());
    impl->disconnect();
    return JSValue::encode(jsUndefined());
}

static inline bool isObservable(JSWebKitMutationObserver* jsWebKitMutationObserver)
{
    if (jsWebKitMutationObserver->hasCustomProperties())
        return true;
    return false;
}

bool JSWebKitMutationObserverOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSWebKitMutationObserver* jsWebKitMutationObserver = static_cast<JSWebKitMutationObserver*>(handle.get().asCell());
    if (!isObservable(jsWebKitMutationObserver))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebKitMutationObserverOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSWebKitMutationObserver* jsWebKitMutationObserver = static_cast<JSWebKitMutationObserver*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebKitMutationObserver->impl(), jsWebKitMutationObserver);
    jsWebKitMutationObserver->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, WebKitMutationObserver* impl)
{
    return wrap<JSWebKitMutationObserver>(exec, globalObject, impl);
}

WebKitMutationObserver* toWebKitMutationObserver(JSC::JSValue value)
{
    return value.inherits(&JSWebKitMutationObserver::s_info) ? static_cast<JSWebKitMutationObserver*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MUTATION_OBSERVERS)
