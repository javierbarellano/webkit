/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSNavigatorUserMediaError.h"

#include "NavigatorUserMediaError.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSNavigatorUserMediaError);
/* Hash table */

static const HashTableValue JSNavigatorUserMediaErrorTableValues[] =
{
    { "code", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavigatorUserMediaErrorCode), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavigatorUserMediaErrorConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavigatorUserMediaErrorTable = { 5, 3, JSNavigatorUserMediaErrorTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSNavigatorUserMediaErrorConstructorTableValues[] =
{
    { "PERMISSION_DENIED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavigatorUserMediaErrorPERMISSION_DENIED), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavigatorUserMediaErrorConstructorTable = { 2, 1, JSNavigatorUserMediaErrorConstructorTableValues, 0 };

COMPILE_ASSERT(1 == NavigatorUserMediaError::PERMISSION_DENIED, NavigatorUserMediaErrorEnumPERMISSION_DENIEDIsWrongUseDoNotCheckConstants);

const ClassInfo JSNavigatorUserMediaErrorConstructor::s_info = { "NavigatorUserMediaErrorConstructor", &Base::s_info, &JSNavigatorUserMediaErrorConstructorTable, 0, CREATE_METHOD_TABLE(JSNavigatorUserMediaErrorConstructor) };

JSNavigatorUserMediaErrorConstructor::JSNavigatorUserMediaErrorConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSNavigatorUserMediaErrorConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSNavigatorUserMediaErrorPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSNavigatorUserMediaErrorConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSNavigatorUserMediaErrorConstructor, JSDOMWrapper>(exec, &JSNavigatorUserMediaErrorConstructorTable, static_cast<JSNavigatorUserMediaErrorConstructor*>(cell), propertyName, slot);
}

bool JSNavigatorUserMediaErrorConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSNavigatorUserMediaErrorConstructor, JSDOMWrapper>(exec, &JSNavigatorUserMediaErrorConstructorTable, static_cast<JSNavigatorUserMediaErrorConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSNavigatorUserMediaErrorPrototypeTableValues[] =
{
    { "PERMISSION_DENIED", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNavigatorUserMediaErrorPERMISSION_DENIED), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSNavigatorUserMediaErrorPrototypeTable = { 2, 1, JSNavigatorUserMediaErrorPrototypeTableValues, 0 };
const ClassInfo JSNavigatorUserMediaErrorPrototype::s_info = { "NavigatorUserMediaErrorPrototype", &Base::s_info, &JSNavigatorUserMediaErrorPrototypeTable, 0, CREATE_METHOD_TABLE(JSNavigatorUserMediaErrorPrototype) };

JSObject* JSNavigatorUserMediaErrorPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNavigatorUserMediaError>(exec, globalObject);
}

bool JSNavigatorUserMediaErrorPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavigatorUserMediaErrorPrototype* thisObject = jsCast<JSNavigatorUserMediaErrorPrototype*>(cell);
    return getStaticValueSlot<JSNavigatorUserMediaErrorPrototype, JSObject>(exec, &JSNavigatorUserMediaErrorPrototypeTable, thisObject, propertyName, slot);
}

bool JSNavigatorUserMediaErrorPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavigatorUserMediaErrorPrototype* thisObject = jsCast<JSNavigatorUserMediaErrorPrototype*>(object);
    return getStaticValueDescriptor<JSNavigatorUserMediaErrorPrototype, JSObject>(exec, &JSNavigatorUserMediaErrorPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSNavigatorUserMediaError::s_info = { "NavigatorUserMediaError", &Base::s_info, &JSNavigatorUserMediaErrorTable, 0 , CREATE_METHOD_TABLE(JSNavigatorUserMediaError) };

JSNavigatorUserMediaError::JSNavigatorUserMediaError(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<NavigatorUserMediaError> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNavigatorUserMediaError::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSNavigatorUserMediaError::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSNavigatorUserMediaErrorPrototype::create(exec->globalData(), globalObject, JSNavigatorUserMediaErrorPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSNavigatorUserMediaError::destroy(JSC::JSCell* cell)
{
    JSNavigatorUserMediaError* thisObject = jsCast<JSNavigatorUserMediaError*>(cell);
    thisObject->JSNavigatorUserMediaError::~JSNavigatorUserMediaError();
}

JSNavigatorUserMediaError::~JSNavigatorUserMediaError()
{
    releaseImplIfNotNull();
}

bool JSNavigatorUserMediaError::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSNavigatorUserMediaError* thisObject = jsCast<JSNavigatorUserMediaError*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSNavigatorUserMediaError, Base>(exec, &JSNavigatorUserMediaErrorTable, thisObject, propertyName, slot);
}

bool JSNavigatorUserMediaError::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSNavigatorUserMediaError* thisObject = jsCast<JSNavigatorUserMediaError*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSNavigatorUserMediaError, Base>(exec, &JSNavigatorUserMediaErrorTable, thisObject, propertyName, descriptor);
}

JSValue jsNavigatorUserMediaErrorCode(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavigatorUserMediaError* castedThis = static_cast<JSNavigatorUserMediaError*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    NavigatorUserMediaError* impl = static_cast<NavigatorUserMediaError*>(castedThis->impl());
    JSValue result = jsNumber(impl->code());
    return result;
}


JSValue jsNavigatorUserMediaErrorConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSNavigatorUserMediaError* domObject = static_cast<JSNavigatorUserMediaError*>(asObject(slotBase));
    return JSNavigatorUserMediaError::getConstructor(exec, domObject->globalObject());
}

JSValue JSNavigatorUserMediaError::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNavigatorUserMediaErrorConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

// Constant getters

JSValue jsNavigatorUserMediaErrorPERMISSION_DENIED(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

static inline bool isObservable(JSNavigatorUserMediaError* jsNavigatorUserMediaError)
{
    if (jsNavigatorUserMediaError->hasCustomProperties())
        return true;
    return false;
}

bool JSNavigatorUserMediaErrorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNavigatorUserMediaError* jsNavigatorUserMediaError = static_cast<JSNavigatorUserMediaError*>(handle.get().asCell());
    if (!isObservable(jsNavigatorUserMediaError))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNavigatorUserMediaErrorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNavigatorUserMediaError* jsNavigatorUserMediaError = static_cast<JSNavigatorUserMediaError*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavigatorUserMediaError->impl(), jsNavigatorUserMediaError);
    jsNavigatorUserMediaError->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, NavigatorUserMediaError* impl)
{
    return wrap<JSNavigatorUserMediaError>(exec, globalObject, impl);
}

NavigatorUserMediaError* toNavigatorUserMediaError(JSC::JSValue value)
{
    return value.inherits(&JSNavigatorUserMediaError::s_info) ? static_cast<JSNavigatorUserMediaError*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
