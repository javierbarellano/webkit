// File is generated by Source/WebCore/inspector/CodeGeneratorInspector.py

// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


#include "config.h"
#if ENABLE(INSPECTOR)

#include "InspectorTypeBuilder.h"

namespace WebCore {

namespace TypeBuilder {

const char* const enum_constant_values[] = {
    "Document",
    "Stylesheet",
    "Image",
    "Font",
    "Script",
    "XHR",
    "WebSocket",
    "Other",
    "object",
    "function",
    "undefined",
    "string",
    "number",
    "boolean",
    "array",
    "null",
    "node",
    "regexp",
    "date",
    "html",
    "wml",
    "xml",
    "javascript",
    "network",
    "console-api",
    "other",
    "tip",
    "log",
    "warning",
    "error",
    "debug",
    "dir",
    "dirxml",
    "trace",
    "startGroup",
    "startGroupCollapsed",
    "endGroup",
    "assert",
    "parser",
    "script",
    "user",
    "user-agent",
    "inspector",
    "regular",
    "active",
    "inactive",
    "disabled",
    "style",
    "mediaRule",
    "importRule",
    "linkedSheet",
    "inlineSheet",
    "global",
    "local",
    "with",
    "closure",
    "catch",
    "subtree-modified",
    "attribute-modified",
    "node-removed",
    "DOM",
    "EventListener",
    "exception"
};

String getEnumConstantValue(int code) {
    return enum_constant_values[code];
}

} // namespace TypeBuilder

#if !ASSERT_DISABLED

static void assertAny(InspectorValue*)
{
    // No-op.
}


static void assertString(InspectorValue* value)
{
    String v;
    bool castRes = value->asString(&v);
    ASSERT_UNUSED(castRes, castRes);
}


static void assertBoolean(InspectorValue* value)
{
    bool v;
    bool castRes = value->asBoolean(&v);
    ASSERT_UNUSED(castRes, castRes);
}


static void assertInt(InspectorValue* value)
{
    int v;
    bool castRes = value->asNumber(&v);
    ASSERT_UNUSED(castRes, castRes);
}


void TypeBuilder::Runtime::RemoteObject::Type::assertCorrectValue(InspectorValue* value)
{
    WTF::String s;
    bool cast_res = value->asString(&s);
    ASSERT(cast_res);
    ASSERT(s == "object" || s == "function" || s == "undefined" || s == "string" || s == "number" || s == "boolean");
}


void TypeBuilder::Runtime::RemoteObject::Subtype::assertCorrectValue(InspectorValue* value)
{
    WTF::String s;
    bool cast_res = value->asString(&s);
    ASSERT(cast_res);
    ASSERT(s == "array" || s == "null" || s == "node" || s == "regexp" || s == "date");
}


void TypeBuilder::Runtime::RemoteObject::assertCorrectValue(InspectorValue* value)
{
    RefPtr<InspectorObject> object;
    bool castRes = value->asObject(&object);
    ASSERT_UNUSED(castRes, castRes);
    {
        InspectorObject::iterator typePos;
        typePos = object->find("type");
        ASSERT(typePos != object->end());
        Type::assertCorrectValue(typePos->second.get());
    }
    int foundPropertiesCount = 1;
    {
        InspectorObject::iterator subtypePos;
        subtypePos = object->find("subtype");
        if (subtypePos != object->end()) {
            Subtype::assertCorrectValue(subtypePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator classNamePos;
        classNamePos = object->find("className");
        if (classNamePos != object->end()) {
            assertString(classNamePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator valuePos;
        valuePos = object->find("value");
        if (valuePos != object->end()) {
            assertAny(valuePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator descriptionPos;
        descriptionPos = object->find("description");
        if (descriptionPos != object->end()) {
            assertString(descriptionPos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator objectIdPos;
        objectIdPos = object->find("objectId");
        if (objectIdPos != object->end()) {
            assertString(objectIdPos->second.get());
            ++foundPropertiesCount;
        }
    }
    ASSERT(foundPropertiesCount == object->size());
}


void TypeBuilder::Runtime::PropertyDescriptor::assertCorrectValue(InspectorValue* value)
{
    RefPtr<InspectorObject> object;
    bool castRes = value->asObject(&object);
    ASSERT_UNUSED(castRes, castRes);
    {
        InspectorObject::iterator namePos;
        namePos = object->find("name");
        ASSERT(namePos != object->end());
        assertString(namePos->second.get());
    }
    {
        InspectorObject::iterator configurablePos;
        configurablePos = object->find("configurable");
        ASSERT(configurablePos != object->end());
        assertBoolean(configurablePos->second.get());
    }
    {
        InspectorObject::iterator enumerablePos;
        enumerablePos = object->find("enumerable");
        ASSERT(enumerablePos != object->end());
        assertBoolean(enumerablePos->second.get());
    }
    int foundPropertiesCount = 3;
    {
        InspectorObject::iterator valuePos;
        valuePos = object->find("value");
        if (valuePos != object->end()) {
            TypeBuilder::Runtime::RemoteObject::assertCorrectValue(valuePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator writablePos;
        writablePos = object->find("writable");
        if (writablePos != object->end()) {
            assertBoolean(writablePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator getPos;
        getPos = object->find("get");
        if (getPos != object->end()) {
            TypeBuilder::Runtime::RemoteObject::assertCorrectValue(getPos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator setPos;
        setPos = object->find("set");
        if (setPos != object->end()) {
            TypeBuilder::Runtime::RemoteObject::assertCorrectValue(setPos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator wasThrownPos;
        wasThrownPos = object->find("wasThrown");
        if (wasThrownPos != object->end()) {
            assertBoolean(wasThrownPos->second.get());
            ++foundPropertiesCount;
        }
    }
    ASSERT(foundPropertiesCount == object->size());
}


void TypeBuilder::Debugger::Location::assertCorrectValue(InspectorValue* value)
{
    RefPtr<InspectorObject> object;
    bool castRes = value->asObject(&object);
    ASSERT_UNUSED(castRes, castRes);
    {
        InspectorObject::iterator scriptIdPos;
        scriptIdPos = object->find("scriptId");
        ASSERT(scriptIdPos != object->end());
        assertString(scriptIdPos->second.get());
    }
    {
        InspectorObject::iterator lineNumberPos;
        lineNumberPos = object->find("lineNumber");
        ASSERT(lineNumberPos != object->end());
        assertInt(lineNumberPos->second.get());
    }
    int foundPropertiesCount = 2;
    {
        InspectorObject::iterator columnNumberPos;
        columnNumberPos = object->find("columnNumber");
        if (columnNumberPos != object->end()) {
            assertInt(columnNumberPos->second.get());
            ++foundPropertiesCount;
        }
    }
    ASSERT(foundPropertiesCount == object->size());
}


void TypeBuilder::Debugger::FunctionDetails::assertCorrectValue(InspectorValue* value)
{
    RefPtr<InspectorObject> object;
    bool castRes = value->asObject(&object);
    ASSERT_UNUSED(castRes, castRes);
    {
        InspectorObject::iterator locationPos;
        locationPos = object->find("location");
        ASSERT(locationPos != object->end());
        TypeBuilder::Debugger::Location::assertCorrectValue(locationPos->second.get());
    }
    int foundPropertiesCount = 1;
    {
        InspectorObject::iterator namePos;
        namePos = object->find("name");
        if (namePos != object->end()) {
            assertString(namePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator displayNamePos;
        displayNamePos = object->find("displayName");
        if (displayNamePos != object->end()) {
            assertString(displayNamePos->second.get());
            ++foundPropertiesCount;
        }
    }
    {
        InspectorObject::iterator inferredNamePos;
        inferredNamePos = object->find("inferredName");
        if (inferredNamePos != object->end()) {
            assertString(inferredNamePos->second.get());
            ++foundPropertiesCount;
        }
    }
    ASSERT(foundPropertiesCount == object->size());
}


void TypeBuilder::Debugger::CallFrame::assertCorrectValue(InspectorValue* value)
{
    RefPtr<InspectorObject> object;
    bool castRes = value->asObject(&object);
    ASSERT_UNUSED(castRes, castRes);
    {
        InspectorObject::iterator callFrameIdPos;
        callFrameIdPos = object->find("callFrameId");
        ASSERT(callFrameIdPos != object->end());
        assertString(callFrameIdPos->second.get());
    }
    {
        InspectorObject::iterator functionNamePos;
        functionNamePos = object->find("functionName");
        ASSERT(functionNamePos != object->end());
        assertString(functionNamePos->second.get());
    }
    {
        InspectorObject::iterator locationPos;
        locationPos = object->find("location");
        ASSERT(locationPos != object->end());
        TypeBuilder::Debugger::Location::assertCorrectValue(locationPos->second.get());
    }
    {
        InspectorObject::iterator scopeChainPos;
        scopeChainPos = object->find("scopeChain");
        ASSERT(scopeChainPos != object->end());
        TypeBuilder::Array<TypeBuilder::Debugger::Scope>::assertCorrectValue(scopeChainPos->second.get());
    }
    {
        InspectorObject::iterator thisPos;
        thisPos = object->find("this");
        ASSERT(thisPos != object->end());
        TypeBuilder::Runtime::RemoteObject::assertCorrectValue(thisPos->second.get());
    }
    int foundPropertiesCount = 5;
    ASSERT(foundPropertiesCount == object->size());
}


void TypeBuilder::Debugger::Scope::Type::assertCorrectValue(InspectorValue* value)
{
    WTF::String s;
    bool cast_res = value->asString(&s);
    ASSERT(cast_res);
    ASSERT(s == "global" || s == "local" || s == "with" || s == "closure" || s == "catch");
}


void TypeBuilder::Debugger::Scope::assertCorrectValue(InspectorValue* value)
{
    RefPtr<InspectorObject> object;
    bool castRes = value->asObject(&object);
    ASSERT_UNUSED(castRes, castRes);
    {
        InspectorObject::iterator typePos;
        typePos = object->find("type");
        ASSERT(typePos != object->end());
        Type::assertCorrectValue(typePos->second.get());
    }
    {
        InspectorObject::iterator objectPos;
        objectPos = object->find("object");
        ASSERT(objectPos != object->end());
        TypeBuilder::Runtime::RemoteObject::assertCorrectValue(objectPos->second.get());
    }
    int foundPropertiesCount = 2;
    ASSERT(foundPropertiesCount == object->size());
}




#endif // !ASSERT_DISABLED

} // namespace WebCore

#endif // ENABLE(INSPECTOR)
