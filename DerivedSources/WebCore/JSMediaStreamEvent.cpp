/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamEvent.h"

#include "JSMediaStream.h"
#include "MediaStream.h"
#include "MediaStreamEvent.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSMediaStreamEvent);
/* Hash table */

static const HashTableValue JSMediaStreamEventTableValues[] =
{
    { "stream", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamEventStream), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamEventConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamEventTable = { 5, 3, JSMediaStreamEventTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSMediaStreamEventConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamEventConstructorTable = { 1, 0, JSMediaStreamEventConstructorTableValues, 0 };
const ClassInfo JSMediaStreamEventConstructor::s_info = { "MediaStreamEventConstructor", &Base::s_info, &JSMediaStreamEventConstructorTable, 0, CREATE_METHOD_TABLE(JSMediaStreamEventConstructor) };

JSMediaStreamEventConstructor::JSMediaStreamEventConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMediaStreamEventConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSMediaStreamEventPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSMediaStreamEventConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSMediaStreamEventConstructor, JSDOMWrapper>(exec, &JSMediaStreamEventConstructorTable, static_cast<JSMediaStreamEventConstructor*>(cell), propertyName, slot);
}

bool JSMediaStreamEventConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSMediaStreamEventConstructor, JSDOMWrapper>(exec, &JSMediaStreamEventConstructorTable, static_cast<JSMediaStreamEventConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSMediaStreamEventPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamEventPrototypeTable = { 1, 0, JSMediaStreamEventPrototypeTableValues, 0 };
const ClassInfo JSMediaStreamEventPrototype::s_info = { "MediaStreamEventPrototype", &Base::s_info, &JSMediaStreamEventPrototypeTable, 0, CREATE_METHOD_TABLE(JSMediaStreamEventPrototype) };

JSObject* JSMediaStreamEventPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamEvent>(exec, globalObject);
}

const ClassInfo JSMediaStreamEvent::s_info = { "MediaStreamEvent", &Base::s_info, &JSMediaStreamEventTable, 0 , CREATE_METHOD_TABLE(JSMediaStreamEvent) };

JSMediaStreamEvent::JSMediaStreamEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MediaStreamEvent> impl)
    : JSEvent(structure, globalObject, impl)
{
}

void JSMediaStreamEvent::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSMediaStreamEvent::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSMediaStreamEventPrototype::create(exec->globalData(), globalObject, JSMediaStreamEventPrototype::createStructure(exec->globalData(), globalObject, JSEventPrototype::self(exec, globalObject)));
}

bool JSMediaStreamEvent::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSMediaStreamEvent* thisObject = jsCast<JSMediaStreamEvent*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSMediaStreamEvent, Base>(exec, &JSMediaStreamEventTable, thisObject, propertyName, slot);
}

bool JSMediaStreamEvent::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSMediaStreamEvent* thisObject = jsCast<JSMediaStreamEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSMediaStreamEvent, Base>(exec, &JSMediaStreamEventTable, thisObject, propertyName, descriptor);
}

JSValue jsMediaStreamEventStream(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamEvent* castedThis = static_cast<JSMediaStreamEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamEvent* impl = static_cast<MediaStreamEvent*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->stream()));
    return result;
}


JSValue jsMediaStreamEventConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamEvent* domObject = static_cast<JSMediaStreamEvent*>(asObject(slotBase));
    return JSMediaStreamEvent::getConstructor(exec, domObject->globalObject());
}

JSValue JSMediaStreamEvent::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaStreamEventConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(MEDIA_STREAM)
