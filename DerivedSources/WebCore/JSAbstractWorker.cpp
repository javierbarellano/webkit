/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WORKERS)

#include "JSAbstractWorker.h"

#include "AbstractWorker.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSAbstractWorker);
/* Hash table */

static const HashTableValue JSAbstractWorkerTableValues[] =
{
    { "onerror", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAbstractWorkerOnerror), (intptr_t)setJSAbstractWorkerOnerror, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAbstractWorkerConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAbstractWorkerTable = { 4, 3, JSAbstractWorkerTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSAbstractWorkerConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAbstractWorkerConstructorTable = { 1, 0, JSAbstractWorkerConstructorTableValues, 0 };
const ClassInfo JSAbstractWorkerConstructor::s_info = { "AbstractWorkerConstructor", &Base::s_info, &JSAbstractWorkerConstructorTable, 0, CREATE_METHOD_TABLE(JSAbstractWorkerConstructor) };

JSAbstractWorkerConstructor::JSAbstractWorkerConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAbstractWorkerConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSAbstractWorkerPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSAbstractWorkerConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAbstractWorkerConstructor, JSDOMWrapper>(exec, &JSAbstractWorkerConstructorTable, static_cast<JSAbstractWorkerConstructor*>(cell), propertyName, slot);
}

bool JSAbstractWorkerConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSAbstractWorkerConstructor, JSDOMWrapper>(exec, &JSAbstractWorkerConstructorTable, static_cast<JSAbstractWorkerConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSAbstractWorkerPrototypeTableValues[] =
{
    { "addEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsAbstractWorkerPrototypeFunctionAddEventListener), (intptr_t)3, NoIntrinsic },
    { "removeEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsAbstractWorkerPrototypeFunctionRemoveEventListener), (intptr_t)3, NoIntrinsic },
    { "dispatchEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsAbstractWorkerPrototypeFunctionDispatchEvent), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAbstractWorkerPrototypeTable = { 8, 7, JSAbstractWorkerPrototypeTableValues, 0 };
const ClassInfo JSAbstractWorkerPrototype::s_info = { "AbstractWorkerPrototype", &Base::s_info, &JSAbstractWorkerPrototypeTable, 0, CREATE_METHOD_TABLE(JSAbstractWorkerPrototype) };

JSObject* JSAbstractWorkerPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAbstractWorker>(exec, globalObject);
}

bool JSAbstractWorkerPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSAbstractWorkerPrototype* thisObject = jsCast<JSAbstractWorkerPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSAbstractWorkerPrototypeTable, thisObject, propertyName, slot);
}

bool JSAbstractWorkerPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSAbstractWorkerPrototype* thisObject = jsCast<JSAbstractWorkerPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSAbstractWorkerPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSAbstractWorker::s_info = { "AbstractWorker", &Base::s_info, &JSAbstractWorkerTable, 0 , CREATE_METHOD_TABLE(JSAbstractWorker) };

JSAbstractWorker::JSAbstractWorker(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AbstractWorker> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSAbstractWorker::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSAbstractWorker::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSAbstractWorkerPrototype::create(exec->globalData(), globalObject, JSAbstractWorkerPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSAbstractWorker::destroy(JSC::JSCell* cell)
{
    JSAbstractWorker* thisObject = jsCast<JSAbstractWorker*>(cell);
    thisObject->JSAbstractWorker::~JSAbstractWorker();
}

JSAbstractWorker::~JSAbstractWorker()
{
    releaseImplIfNotNull();
}

bool JSAbstractWorker::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSAbstractWorker* thisObject = jsCast<JSAbstractWorker*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSAbstractWorker, Base>(exec, &JSAbstractWorkerTable, thisObject, propertyName, slot);
}

bool JSAbstractWorker::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSAbstractWorker* thisObject = jsCast<JSAbstractWorker*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSAbstractWorker, Base>(exec, &JSAbstractWorkerTable, thisObject, propertyName, descriptor);
}

JSValue jsAbstractWorkerOnerror(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAbstractWorker* castedThis = static_cast<JSAbstractWorker*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AbstractWorker* impl = static_cast<AbstractWorker*>(castedThis->impl());
    if (EventListener* listener = impl->onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsAbstractWorkerConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAbstractWorker* domObject = static_cast<JSAbstractWorker*>(asObject(slotBase));
    return JSAbstractWorker::getConstructor(exec, domObject->globalObject());
}

void JSAbstractWorker::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSAbstractWorker* thisObject = jsCast<JSAbstractWorker*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSAbstractWorker, Base>(exec, propertyName, value, &JSAbstractWorkerTable, thisObject, slot);
}

void setJSAbstractWorkerOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSAbstractWorker* castedThis = static_cast<JSAbstractWorker*>(thisObject);
    AbstractWorker* impl = static_cast<AbstractWorker*>(castedThis->impl());
    impl->setOnerror(createJSAttributeEventListener(exec, value, thisObject));
}


JSValue JSAbstractWorker::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAbstractWorkerConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsAbstractWorkerPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSAbstractWorker::s_info))
        return throwVMTypeError(exec);
    JSAbstractWorker* castedThis = static_cast<JSAbstractWorker*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSAbstractWorker::s_info);
    AbstractWorker* impl = static_cast<AbstractWorker*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->addEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsAbstractWorkerPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSAbstractWorker::s_info))
        return throwVMTypeError(exec);
    JSAbstractWorker* castedThis = static_cast<JSAbstractWorker*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSAbstractWorker::s_info);
    AbstractWorker* impl = static_cast<AbstractWorker*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->removeEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsAbstractWorkerPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSAbstractWorker::s_info))
        return throwVMTypeError(exec);
    JSAbstractWorker* castedThis = static_cast<JSAbstractWorker*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSAbstractWorker::s_info);
    AbstractWorker* impl = static_cast<AbstractWorker*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    Event* evt(toEvent(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl->dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSAbstractWorker::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSAbstractWorker* thisObject = jsCast<JSAbstractWorker*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

static inline bool isObservable(JSAbstractWorker* jsAbstractWorker)
{
    if (jsAbstractWorker->hasCustomProperties())
        return true;
    if (jsAbstractWorker->impl()->hasEventListeners())
        return true;
    return false;
}

bool JSAbstractWorkerOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSAbstractWorker* jsAbstractWorker = static_cast<JSAbstractWorker*>(handle.get().asCell());
    if (jsAbstractWorker->impl()->hasPendingActivity())
        return true;
    if (!isObservable(jsAbstractWorker))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSAbstractWorkerOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSAbstractWorker* jsAbstractWorker = static_cast<JSAbstractWorker*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsAbstractWorker->impl(), jsAbstractWorker);
    jsAbstractWorker->releaseImpl();
}

AbstractWorker* toAbstractWorker(JSC::JSValue value)
{
    return value.inherits(&JSAbstractWorker::s_info) ? static_cast<JSAbstractWorker*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(WORKERS)
