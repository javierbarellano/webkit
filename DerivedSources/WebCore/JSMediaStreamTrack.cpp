/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamTrack.h"

#include "KURL.h"
#include "MediaStreamTrack.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSMediaStreamTrack);
/* Hash table */

static const HashTableValue JSMediaStreamTrackTableValues[] =
{
    { "kind", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackKind), (intptr_t)0, NoIntrinsic },
    { "label", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackLabel), (intptr_t)0, NoIntrinsic },
    { "enabled", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackEnabled), (intptr_t)setJSMediaStreamTrackEnabled, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackTable = { 9, 7, JSMediaStreamTrackTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSMediaStreamTrackConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackConstructorTable = { 1, 0, JSMediaStreamTrackConstructorTableValues, 0 };
const ClassInfo JSMediaStreamTrackConstructor::s_info = { "MediaStreamTrackConstructor", &Base::s_info, &JSMediaStreamTrackConstructorTable, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackConstructor) };

JSMediaStreamTrackConstructor::JSMediaStreamTrackConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMediaStreamTrackConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSMediaStreamTrackPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSMediaStreamTrackConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSMediaStreamTrackConstructor, JSDOMWrapper>(exec, &JSMediaStreamTrackConstructorTable, static_cast<JSMediaStreamTrackConstructor*>(cell), propertyName, slot);
}

bool JSMediaStreamTrackConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSMediaStreamTrackConstructor, JSDOMWrapper>(exec, &JSMediaStreamTrackConstructorTable, static_cast<JSMediaStreamTrackConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSMediaStreamTrackPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMediaStreamTrackPrototypeTable = { 1, 0, JSMediaStreamTrackPrototypeTableValues, 0 };
const ClassInfo JSMediaStreamTrackPrototype::s_info = { "MediaStreamTrackPrototype", &Base::s_info, &JSMediaStreamTrackPrototypeTable, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackPrototype) };

JSObject* JSMediaStreamTrackPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamTrack>(exec, globalObject);
}

const ClassInfo JSMediaStreamTrack::s_info = { "MediaStreamTrack", &Base::s_info, &JSMediaStreamTrackTable, 0 , CREATE_METHOD_TABLE(JSMediaStreamTrack) };

JSMediaStreamTrack::JSMediaStreamTrack(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MediaStreamTrack> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSMediaStreamTrack::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSMediaStreamTrack::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSMediaStreamTrackPrototype::create(exec->globalData(), globalObject, JSMediaStreamTrackPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSMediaStreamTrack::destroy(JSC::JSCell* cell)
{
    JSMediaStreamTrack* thisObject = jsCast<JSMediaStreamTrack*>(cell);
    thisObject->JSMediaStreamTrack::~JSMediaStreamTrack();
}

JSMediaStreamTrack::~JSMediaStreamTrack()
{
    releaseImplIfNotNull();
}

bool JSMediaStreamTrack::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSMediaStreamTrack* thisObject = jsCast<JSMediaStreamTrack*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSMediaStreamTrack, Base>(exec, &JSMediaStreamTrackTable, thisObject, propertyName, slot);
}

bool JSMediaStreamTrack::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSMediaStreamTrack* thisObject = jsCast<JSMediaStreamTrack*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSMediaStreamTrack, Base>(exec, &JSMediaStreamTrackTable, thisObject, propertyName, descriptor);
}

JSValue jsMediaStreamTrackKind(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamTrack* castedThis = static_cast<JSMediaStreamTrack*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamTrack* impl = static_cast<MediaStreamTrack*>(castedThis->impl());
    JSValue result = jsString(exec, impl->kind());
    return result;
}


JSValue jsMediaStreamTrackLabel(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamTrack* castedThis = static_cast<JSMediaStreamTrack*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamTrack* impl = static_cast<MediaStreamTrack*>(castedThis->impl());
    JSValue result = jsString(exec, impl->label());
    return result;
}


JSValue jsMediaStreamTrackEnabled(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamTrack* castedThis = static_cast<JSMediaStreamTrack*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamTrack* impl = static_cast<MediaStreamTrack*>(castedThis->impl());
    JSValue result = jsBoolean(impl->enabled());
    return result;
}


JSValue jsMediaStreamTrackConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSMediaStreamTrack* domObject = static_cast<JSMediaStreamTrack*>(asObject(slotBase));
    return JSMediaStreamTrack::getConstructor(exec, domObject->globalObject());
}

void JSMediaStreamTrack::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSMediaStreamTrack* thisObject = jsCast<JSMediaStreamTrack*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSMediaStreamTrack, Base>(exec, propertyName, value, &JSMediaStreamTrackTable, thisObject, slot);
}

void setJSMediaStreamTrackEnabled(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSMediaStreamTrack* castedThis = static_cast<JSMediaStreamTrack*>(thisObject);
    MediaStreamTrack* impl = static_cast<MediaStreamTrack*>(castedThis->impl());
    impl->setEnabled(value.toBoolean(exec));
}


JSValue JSMediaStreamTrack::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaStreamTrackConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSMediaStreamTrack* jsMediaStreamTrack)
{
    if (jsMediaStreamTrack->hasCustomProperties())
        return true;
    return false;
}

bool JSMediaStreamTrackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSMediaStreamTrack* jsMediaStreamTrack = static_cast<JSMediaStreamTrack*>(handle.get().asCell());
    if (!isObservable(jsMediaStreamTrack))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaStreamTrackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSMediaStreamTrack* jsMediaStreamTrack = static_cast<JSMediaStreamTrack*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMediaStreamTrack->impl(), jsMediaStreamTrack);
    jsMediaStreamTrack->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, MediaStreamTrack* impl)
{
    return wrap<JSMediaStreamTrack>(exec, globalObject, impl);
}

MediaStreamTrack* toMediaStreamTrack(JSC::JSValue value)
{
    return value.inherits(&JSMediaStreamTrack::s_info) ? static_cast<JSMediaStreamTrack*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
