/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSIceCandidate.h"

#include "ExceptionCode.h"
#include "IceCandidate.h"
#include "JSDOMBinding.h"
#include "KURL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSIceCandidate);
/* Hash table */

static const HashTableValue JSIceCandidateTableValues[] =
{
    { "label", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIceCandidateLabel), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIceCandidateConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIceCandidateTable = { 5, 3, JSIceCandidateTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSIceCandidateConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIceCandidateConstructorTable = { 1, 0, JSIceCandidateConstructorTableValues, 0 };
const ClassInfo JSIceCandidateConstructor::s_info = { "IceCandidateConstructor", &Base::s_info, &JSIceCandidateConstructorTable, 0, CREATE_METHOD_TABLE(JSIceCandidateConstructor) };

JSIceCandidateConstructor::JSIceCandidateConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSIceCandidateConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSIceCandidatePrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->globalData(), exec->propertyNames().length, jsNumber(2), ReadOnly | DontDelete | DontEnum);
}

bool JSIceCandidateConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSIceCandidateConstructor, JSDOMWrapper>(exec, &JSIceCandidateConstructorTable, static_cast<JSIceCandidateConstructor*>(cell), propertyName, slot);
}

bool JSIceCandidateConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSIceCandidateConstructor, JSDOMWrapper>(exec, &JSIceCandidateConstructorTable, static_cast<JSIceCandidateConstructor*>(object), propertyName, descriptor);
}

EncodedJSValue JSC_HOST_CALL JSIceCandidateConstructor::constructJSIceCandidate(ExecState* exec)
{
    JSIceCandidateConstructor* castedThis = static_cast<JSIceCandidateConstructor*>(exec->callee());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    const String& label(ustringToString(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& candidateLine(ustringToString(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).isEmpty() ? UString() : MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).toString(exec)->value(exec)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<IceCandidate> object = IceCandidate::create(label, candidateLine);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

ConstructType JSIceCandidateConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSIceCandidate;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSIceCandidatePrototypeTableValues[] =
{
    { "toSdp", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsIceCandidatePrototypeFunctionToSdp), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIceCandidatePrototypeTable = { 2, 1, JSIceCandidatePrototypeTableValues, 0 };
const ClassInfo JSIceCandidatePrototype::s_info = { "IceCandidatePrototype", &Base::s_info, &JSIceCandidatePrototypeTable, 0, CREATE_METHOD_TABLE(JSIceCandidatePrototype) };

JSObject* JSIceCandidatePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIceCandidate>(exec, globalObject);
}

bool JSIceCandidatePrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSIceCandidatePrototype* thisObject = jsCast<JSIceCandidatePrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSIceCandidatePrototypeTable, thisObject, propertyName, slot);
}

bool JSIceCandidatePrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSIceCandidatePrototype* thisObject = jsCast<JSIceCandidatePrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSIceCandidatePrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSIceCandidate::s_info = { "IceCandidate", &Base::s_info, &JSIceCandidateTable, 0 , CREATE_METHOD_TABLE(JSIceCandidate) };

JSIceCandidate::JSIceCandidate(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<IceCandidate> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSIceCandidate::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSIceCandidate::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSIceCandidatePrototype::create(exec->globalData(), globalObject, JSIceCandidatePrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSIceCandidate::destroy(JSC::JSCell* cell)
{
    JSIceCandidate* thisObject = jsCast<JSIceCandidate*>(cell);
    thisObject->JSIceCandidate::~JSIceCandidate();
}

JSIceCandidate::~JSIceCandidate()
{
    releaseImplIfNotNull();
}

bool JSIceCandidate::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSIceCandidate* thisObject = jsCast<JSIceCandidate*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSIceCandidate, Base>(exec, &JSIceCandidateTable, thisObject, propertyName, slot);
}

bool JSIceCandidate::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSIceCandidate* thisObject = jsCast<JSIceCandidate*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSIceCandidate, Base>(exec, &JSIceCandidateTable, thisObject, propertyName, descriptor);
}

JSValue jsIceCandidateLabel(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSIceCandidate* castedThis = static_cast<JSIceCandidate*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    IceCandidate* impl = static_cast<IceCandidate*>(castedThis->impl());
    JSValue result = jsString(exec, impl->label());
    return result;
}


JSValue jsIceCandidateConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSIceCandidate* domObject = static_cast<JSIceCandidate*>(asObject(slotBase));
    return JSIceCandidate::getConstructor(exec, domObject->globalObject());
}

JSValue JSIceCandidate::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIceCandidateConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsIceCandidatePrototypeFunctionToSdp(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSIceCandidate::s_info))
        return throwVMTypeError(exec);
    JSIceCandidate* castedThis = static_cast<JSIceCandidate*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSIceCandidate::s_info);
    IceCandidate* impl = static_cast<IceCandidate*>(castedThis->impl());

    JSC::JSValue result = jsString(exec, impl->toSdp());
    return JSValue::encode(result);
}

static inline bool isObservable(JSIceCandidate* jsIceCandidate)
{
    if (jsIceCandidate->hasCustomProperties())
        return true;
    return false;
}

bool JSIceCandidateOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSIceCandidate* jsIceCandidate = static_cast<JSIceCandidate*>(handle.get().asCell());
    if (!isObservable(jsIceCandidate))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSIceCandidateOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSIceCandidate* jsIceCandidate = static_cast<JSIceCandidate*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsIceCandidate->impl(), jsIceCandidate);
    jsIceCandidate->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, IceCandidate* impl)
{
    return wrap<JSIceCandidate>(exec, globalObject, impl);
}

IceCandidate* toIceCandidate(JSC::JSValue value)
{
    return value.inherits(&JSIceCandidate::s_info) ? static_cast<JSIceCandidate*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
