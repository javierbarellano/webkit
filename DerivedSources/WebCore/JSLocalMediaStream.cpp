/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSLocalMediaStream.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "LocalMediaStream.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSLocalMediaStream);
/* Hash table */

static const HashTableValue JSLocalMediaStreamTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsLocalMediaStreamConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSLocalMediaStreamTable = { 2, 1, JSLocalMediaStreamTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSLocalMediaStreamConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSLocalMediaStreamConstructorTable = { 1, 0, JSLocalMediaStreamConstructorTableValues, 0 };
const ClassInfo JSLocalMediaStreamConstructor::s_info = { "LocalMediaStreamConstructor", &Base::s_info, &JSLocalMediaStreamConstructorTable, 0, CREATE_METHOD_TABLE(JSLocalMediaStreamConstructor) };

JSLocalMediaStreamConstructor::JSLocalMediaStreamConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSLocalMediaStreamConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSLocalMediaStreamPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSLocalMediaStreamConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSLocalMediaStreamConstructor, JSDOMWrapper>(exec, &JSLocalMediaStreamConstructorTable, static_cast<JSLocalMediaStreamConstructor*>(cell), propertyName, slot);
}

bool JSLocalMediaStreamConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSLocalMediaStreamConstructor, JSDOMWrapper>(exec, &JSLocalMediaStreamConstructorTable, static_cast<JSLocalMediaStreamConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSLocalMediaStreamPrototypeTableValues[] =
{
    { "stop", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsLocalMediaStreamPrototypeFunctionStop), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSLocalMediaStreamPrototypeTable = { 2, 1, JSLocalMediaStreamPrototypeTableValues, 0 };
const ClassInfo JSLocalMediaStreamPrototype::s_info = { "LocalMediaStreamPrototype", &Base::s_info, &JSLocalMediaStreamPrototypeTable, 0, CREATE_METHOD_TABLE(JSLocalMediaStreamPrototype) };

JSObject* JSLocalMediaStreamPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSLocalMediaStream>(exec, globalObject);
}

bool JSLocalMediaStreamPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSLocalMediaStreamPrototype* thisObject = jsCast<JSLocalMediaStreamPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSLocalMediaStreamPrototypeTable, thisObject, propertyName, slot);
}

bool JSLocalMediaStreamPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSLocalMediaStreamPrototype* thisObject = jsCast<JSLocalMediaStreamPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSLocalMediaStreamPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSLocalMediaStream::s_info = { "LocalMediaStream", &Base::s_info, &JSLocalMediaStreamTable, 0 , CREATE_METHOD_TABLE(JSLocalMediaStream) };

JSLocalMediaStream::JSLocalMediaStream(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<LocalMediaStream> impl)
    : JSMediaStream(structure, globalObject, impl)
{
}

void JSLocalMediaStream::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSLocalMediaStream::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSLocalMediaStreamPrototype::create(exec->globalData(), globalObject, JSLocalMediaStreamPrototype::createStructure(exec->globalData(), globalObject, JSMediaStreamPrototype::self(exec, globalObject)));
}

bool JSLocalMediaStream::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSLocalMediaStream* thisObject = jsCast<JSLocalMediaStream*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSLocalMediaStream, Base>(exec, &JSLocalMediaStreamTable, thisObject, propertyName, slot);
}

bool JSLocalMediaStream::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSLocalMediaStream* thisObject = jsCast<JSLocalMediaStream*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSLocalMediaStream, Base>(exec, &JSLocalMediaStreamTable, thisObject, propertyName, descriptor);
}

JSValue jsLocalMediaStreamConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSLocalMediaStream* domObject = static_cast<JSLocalMediaStream*>(asObject(slotBase));
    return JSLocalMediaStream::getConstructor(exec, domObject->globalObject());
}

JSValue JSLocalMediaStream::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSLocalMediaStreamConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsLocalMediaStreamPrototypeFunctionStop(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSLocalMediaStream::s_info))
        return throwVMTypeError(exec);
    JSLocalMediaStream* castedThis = static_cast<JSLocalMediaStream*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSLocalMediaStream::s_info);
    LocalMediaStream* impl = static_cast<LocalMediaStream*>(castedThis->impl());
    impl->stop();
    return JSValue::encode(jsUndefined());
}

void JSLocalMediaStream::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSLocalMediaStream* thisObject = jsCast<JSLocalMediaStream*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl()->visitJSEventListeners(visitor);
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, LocalMediaStream* impl)
{
    return wrap<JSLocalMediaStream>(exec, globalObject, impl);
}

LocalMediaStream* toLocalMediaStream(JSC::JSValue value)
{
    return value.inherits(&JSLocalMediaStream::s_info) ? static_cast<JSLocalMediaStream*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
