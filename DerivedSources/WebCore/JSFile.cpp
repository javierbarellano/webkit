/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSFile.h"

#include "File.h"
#include "KURL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSFile);
/* Hash table */

static const HashTableValue JSFileTableValues[] =
{
    { "name", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileName), (intptr_t)0, NoIntrinsic },
    { "lastModifiedDate", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileLastModifiedDate), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileTable = { 9, 7, JSFileTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSFileConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileConstructorTable = { 1, 0, JSFileConstructorTableValues, 0 };
const ClassInfo JSFileConstructor::s_info = { "FileConstructor", &Base::s_info, &JSFileConstructorTable, 0, CREATE_METHOD_TABLE(JSFileConstructor) };

JSFileConstructor::JSFileConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSFileConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSFilePrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSFileConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSFileConstructor, JSDOMWrapper>(exec, &JSFileConstructorTable, static_cast<JSFileConstructor*>(cell), propertyName, slot);
}

bool JSFileConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSFileConstructor, JSDOMWrapper>(exec, &JSFileConstructorTable, static_cast<JSFileConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSFilePrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFilePrototypeTable = { 1, 0, JSFilePrototypeTableValues, 0 };
static const HashTable* getJSFilePrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFilePrototypeTable);
}

const ClassInfo JSFilePrototype::s_info = { "FilePrototype", &Base::s_info, 0, getJSFilePrototypeTable, CREATE_METHOD_TABLE(JSFilePrototype) };

JSObject* JSFilePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFile>(exec, globalObject);
}

static const HashTable* getJSFileTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileTable);
}

const ClassInfo JSFile::s_info = { "File", &Base::s_info, 0, getJSFileTable , CREATE_METHOD_TABLE(JSFile) };

JSFile::JSFile(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<File> impl)
    : JSBlob(structure, globalObject, impl)
{
}

void JSFile::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSFile::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSFilePrototype::create(exec->globalData(), globalObject, JSFilePrototype::createStructure(exec->globalData(), globalObject, JSBlobPrototype::self(exec, globalObject)));
}

bool JSFile::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSFile* thisObject = jsCast<JSFile*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSFile, Base>(exec, getJSFileTable(exec), thisObject, propertyName, slot);
}

bool JSFile::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSFile* thisObject = jsCast<JSFile*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSFile, Base>(exec, getJSFileTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsFileName(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSFile* castedThis = static_cast<JSFile*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    File* impl = static_cast<File*>(castedThis->impl());
    JSValue result = jsString(exec, impl->name());
    return result;
}


JSValue jsFileLastModifiedDate(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSFile* castedThis = static_cast<JSFile*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    File* impl = static_cast<File*>(castedThis->impl());
    JSValue result = jsDateOrNull(exec, impl->lastModifiedDate());
    return result;
}


JSValue jsFileConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSFile* domObject = static_cast<JSFile*>(asObject(slotBase));
    return JSFile::getConstructor(exec, domObject->globalObject());
}

JSValue JSFile::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFileConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, File* impl)
{
    return wrap<JSFile>(exec, globalObject, impl);
}

File* toFile(JSC::JSValue value)
{
    return value.inherits(&JSFile::s_info) ? static_cast<JSFile*>(asObject(value))->impl() : 0;
}

}
