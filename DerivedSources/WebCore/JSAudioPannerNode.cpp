/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSAudioPannerNode.h"

#include "AudioGain.h"
#include "AudioPannerNode.h"
#include "ExceptionCode.h"
#include "JSAudioGain.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSAudioPannerNode);
/* Hash table */

static const HashTableValue JSAudioPannerNodeTableValues[] =
{
    { "panningModel", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodePanningModel), (intptr_t)setJSAudioPannerNodePanningModel, NoIntrinsic },
    { "distanceModel", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeDistanceModel), (intptr_t)setJSAudioPannerNodeDistanceModel, NoIntrinsic },
    { "refDistance", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeRefDistance), (intptr_t)setJSAudioPannerNodeRefDistance, NoIntrinsic },
    { "maxDistance", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeMaxDistance), (intptr_t)setJSAudioPannerNodeMaxDistance, NoIntrinsic },
    { "rolloffFactor", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeRolloffFactor), (intptr_t)setJSAudioPannerNodeRolloffFactor, NoIntrinsic },
    { "coneInnerAngle", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeConeInnerAngle), (intptr_t)setJSAudioPannerNodeConeInnerAngle, NoIntrinsic },
    { "coneOuterAngle", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeConeOuterAngle), (intptr_t)setJSAudioPannerNodeConeOuterAngle, NoIntrinsic },
    { "coneOuterGain", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeConeOuterGain), (intptr_t)setJSAudioPannerNodeConeOuterGain, NoIntrinsic },
    { "coneGain", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeConeGain), (intptr_t)0, NoIntrinsic },
    { "distanceGain", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeDistanceGain), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioPannerNodeTable = { 35, 31, JSAudioPannerNodeTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSAudioPannerNodeConstructorTableValues[] =
{
    { "EQUALPOWER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeEQUALPOWER), (intptr_t)0, NoIntrinsic },
    { "HRTF", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeHRTF), (intptr_t)0, NoIntrinsic },
    { "SOUNDFIELD", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeSOUNDFIELD), (intptr_t)0, NoIntrinsic },
    { "LINEAR_DISTANCE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeLINEAR_DISTANCE), (intptr_t)0, NoIntrinsic },
    { "INVERSE_DISTANCE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeINVERSE_DISTANCE), (intptr_t)0, NoIntrinsic },
    { "EXPONENTIAL_DISTANCE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeEXPONENTIAL_DISTANCE), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioPannerNodeConstructorTable = { 16, 15, JSAudioPannerNodeConstructorTableValues, 0 };

COMPILE_ASSERT(0 == AudioPannerNode::EQUALPOWER, AudioPannerNodeEnumEQUALPOWERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == AudioPannerNode::HRTF, AudioPannerNodeEnumHRTFIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == AudioPannerNode::SOUNDFIELD, AudioPannerNodeEnumSOUNDFIELDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0 == AudioPannerNode::LINEAR_DISTANCE, AudioPannerNodeEnumLINEAR_DISTANCEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == AudioPannerNode::INVERSE_DISTANCE, AudioPannerNodeEnumINVERSE_DISTANCEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == AudioPannerNode::EXPONENTIAL_DISTANCE, AudioPannerNodeEnumEXPONENTIAL_DISTANCEIsWrongUseDoNotCheckConstants);

const ClassInfo JSAudioPannerNodeConstructor::s_info = { "AudioPannerNodeConstructor", &Base::s_info, &JSAudioPannerNodeConstructorTable, 0, CREATE_METHOD_TABLE(JSAudioPannerNodeConstructor) };

JSAudioPannerNodeConstructor::JSAudioPannerNodeConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAudioPannerNodeConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSAudioPannerNodePrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSAudioPannerNodeConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAudioPannerNodeConstructor, JSDOMWrapper>(exec, &JSAudioPannerNodeConstructorTable, static_cast<JSAudioPannerNodeConstructor*>(cell), propertyName, slot);
}

bool JSAudioPannerNodeConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSAudioPannerNodeConstructor, JSDOMWrapper>(exec, &JSAudioPannerNodeConstructorTable, static_cast<JSAudioPannerNodeConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSAudioPannerNodePrototypeTableValues[] =
{
    { "EQUALPOWER", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeEQUALPOWER), (intptr_t)0, NoIntrinsic },
    { "HRTF", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeHRTF), (intptr_t)0, NoIntrinsic },
    { "SOUNDFIELD", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeSOUNDFIELD), (intptr_t)0, NoIntrinsic },
    { "LINEAR_DISTANCE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeLINEAR_DISTANCE), (intptr_t)0, NoIntrinsic },
    { "INVERSE_DISTANCE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeINVERSE_DISTANCE), (intptr_t)0, NoIntrinsic },
    { "EXPONENTIAL_DISTANCE", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioPannerNodeEXPONENTIAL_DISTANCE), (intptr_t)0, NoIntrinsic },
    { "setPosition", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsAudioPannerNodePrototypeFunctionSetPosition), (intptr_t)3, NoIntrinsic },
    { "setOrientation", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsAudioPannerNodePrototypeFunctionSetOrientation), (intptr_t)3, NoIntrinsic },
    { "setVelocity", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsAudioPannerNodePrototypeFunctionSetVelocity), (intptr_t)3, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioPannerNodePrototypeTable = { 33, 31, JSAudioPannerNodePrototypeTableValues, 0 };
const ClassInfo JSAudioPannerNodePrototype::s_info = { "AudioPannerNodePrototype", &Base::s_info, &JSAudioPannerNodePrototypeTable, 0, CREATE_METHOD_TABLE(JSAudioPannerNodePrototype) };

JSObject* JSAudioPannerNodePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioPannerNode>(exec, globalObject);
}

bool JSAudioPannerNodePrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSAudioPannerNodePrototype* thisObject = jsCast<JSAudioPannerNodePrototype*>(cell);
    return getStaticPropertySlot<JSAudioPannerNodePrototype, JSObject>(exec, &JSAudioPannerNodePrototypeTable, thisObject, propertyName, slot);
}

bool JSAudioPannerNodePrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSAudioPannerNodePrototype* thisObject = jsCast<JSAudioPannerNodePrototype*>(object);
    return getStaticPropertyDescriptor<JSAudioPannerNodePrototype, JSObject>(exec, &JSAudioPannerNodePrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSAudioPannerNode::s_info = { "AudioPannerNode", &Base::s_info, &JSAudioPannerNodeTable, 0 , CREATE_METHOD_TABLE(JSAudioPannerNode) };

JSAudioPannerNode::JSAudioPannerNode(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AudioPannerNode> impl)
    : JSAudioNode(structure, globalObject, impl)
{
}

void JSAudioPannerNode::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSAudioPannerNode::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSAudioPannerNodePrototype::create(exec->globalData(), globalObject, JSAudioPannerNodePrototype::createStructure(exec->globalData(), globalObject, JSAudioNodePrototype::self(exec, globalObject)));
}

bool JSAudioPannerNode::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSAudioPannerNode* thisObject = jsCast<JSAudioPannerNode*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSAudioPannerNode, Base>(exec, &JSAudioPannerNodeTable, thisObject, propertyName, slot);
}

bool JSAudioPannerNode::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSAudioPannerNode* thisObject = jsCast<JSAudioPannerNode*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSAudioPannerNode, Base>(exec, &JSAudioPannerNodeTable, thisObject, propertyName, descriptor);
}

JSValue jsAudioPannerNodePanningModel(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->panningModel());
    return result;
}


JSValue jsAudioPannerNodeDistanceModel(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->distanceModel());
    return result;
}


JSValue jsAudioPannerNodeRefDistance(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->refDistance());
    return result;
}


JSValue jsAudioPannerNodeMaxDistance(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->maxDistance());
    return result;
}


JSValue jsAudioPannerNodeRolloffFactor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->rolloffFactor());
    return result;
}


JSValue jsAudioPannerNodeConeInnerAngle(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->coneInnerAngle());
    return result;
}


JSValue jsAudioPannerNodeConeOuterAngle(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->coneOuterAngle());
    return result;
}


JSValue jsAudioPannerNodeConeOuterGain(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = jsNumber(impl->coneOuterGain());
    return result;
}


JSValue jsAudioPannerNodeConeGain(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->coneGain()));
    return result;
}


JSValue jsAudioPannerNodeDistanceGain(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->distanceGain()));
    return result;
}


JSValue jsAudioPannerNodeConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioPannerNode* domObject = static_cast<JSAudioPannerNode*>(asObject(slotBase));
    return JSAudioPannerNode::getConstructor(exec, domObject->globalObject());
}

void JSAudioPannerNode::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSAudioPannerNode* thisObject = jsCast<JSAudioPannerNode*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSAudioPannerNode, Base>(exec, propertyName, value, &JSAudioPannerNodeTable, thisObject, slot);
}

void setJSAudioPannerNodePanningModel(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    ExceptionCode ec = 0;
    impl->setPanningModel(value.toUInt32(exec), ec);
    setDOMException(exec, ec);
}


void setJSAudioPannerNodeDistanceModel(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setDistanceModel(value.toUInt32(exec));
}


void setJSAudioPannerNodeRefDistance(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setRefDistance(value.toFloat(exec));
}


void setJSAudioPannerNodeMaxDistance(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setMaxDistance(value.toFloat(exec));
}


void setJSAudioPannerNodeRolloffFactor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setRolloffFactor(value.toFloat(exec));
}


void setJSAudioPannerNodeConeInnerAngle(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setConeInnerAngle(value.toFloat(exec));
}


void setJSAudioPannerNodeConeOuterAngle(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setConeOuterAngle(value.toFloat(exec));
}


void setJSAudioPannerNodeConeOuterGain(ExecState* exec, JSObject* thisObject, JSValue value)
{
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(thisObject);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    impl->setConeOuterGain(value.toFloat(exec));
}


JSValue JSAudioPannerNode::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioPannerNodeConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsAudioPannerNodePrototypeFunctionSetPosition(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSAudioPannerNode::s_info))
        return throwVMTypeError(exec);
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSAudioPannerNode::s_info);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    if (exec->argumentCount() < 3)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    float x(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float y(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float z(MAYBE_MISSING_PARAMETER(exec, 2, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->setPosition(x, y, z);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsAudioPannerNodePrototypeFunctionSetOrientation(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSAudioPannerNode::s_info))
        return throwVMTypeError(exec);
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSAudioPannerNode::s_info);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    if (exec->argumentCount() < 3)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    float x(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float y(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float z(MAYBE_MISSING_PARAMETER(exec, 2, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->setOrientation(x, y, z);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsAudioPannerNodePrototypeFunctionSetVelocity(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSAudioPannerNode::s_info))
        return throwVMTypeError(exec);
    JSAudioPannerNode* castedThis = static_cast<JSAudioPannerNode*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSAudioPannerNode::s_info);
    AudioPannerNode* impl = static_cast<AudioPannerNode*>(castedThis->impl());
    if (exec->argumentCount() < 3)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    float x(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float y(MAYBE_MISSING_PARAMETER(exec, 1, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float z(MAYBE_MISSING_PARAMETER(exec, 2, DefaultIsUndefined).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl->setVelocity(x, y, z);
    return JSValue::encode(jsUndefined());
}

// Constant getters

JSValue jsAudioPannerNodeEQUALPOWER(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0));
}

JSValue jsAudioPannerNodeHRTF(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

JSValue jsAudioPannerNodeSOUNDFIELD(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(2));
}

JSValue jsAudioPannerNodeLINEAR_DISTANCE(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0));
}

JSValue jsAudioPannerNodeINVERSE_DISTANCE(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(1));
}

JSValue jsAudioPannerNodeEXPONENTIAL_DISTANCE(ExecState* exec, JSValue, const Identifier&)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(2));
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, AudioPannerNode* impl)
{
    return wrap<JSAudioPannerNode>(exec, globalObject, impl);
}


}

#endif // ENABLE(WEB_AUDIO)
