/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(VIDEO_TRACK)

#include "JSTextTrackList.h"

#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSTextTrack.h"
#include "TextTrack.h"
#include "TextTrackList.h"
#include <runtime/Error.h>
#include <runtime/PropertyNameArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSTextTrackList);
/* Hash table */

static const HashTableValue JSTextTrackListTableValues[] =
{
    { "length", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListLength), (intptr_t)0, NoIntrinsic },
    { "onaddtrack", DontDelete, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListOnaddtrack), (intptr_t)setJSTextTrackListOnaddtrack, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackListConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSTextTrackListTable = { 10, 7, JSTextTrackListTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSTextTrackListConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSTextTrackListConstructorTable = { 1, 0, JSTextTrackListConstructorTableValues, 0 };
const ClassInfo JSTextTrackListConstructor::s_info = { "TextTrackListConstructor", &Base::s_info, &JSTextTrackListConstructorTable, 0, CREATE_METHOD_TABLE(JSTextTrackListConstructor) };

JSTextTrackListConstructor::JSTextTrackListConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSTextTrackListConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSTextTrackListPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSTextTrackListConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTextTrackListConstructor, JSDOMWrapper>(exec, &JSTextTrackListConstructorTable, static_cast<JSTextTrackListConstructor*>(cell), propertyName, slot);
}

bool JSTextTrackListConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSTextTrackListConstructor, JSDOMWrapper>(exec, &JSTextTrackListConstructorTable, static_cast<JSTextTrackListConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSTextTrackListPrototypeTableValues[] =
{
    { "item", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionItem), (intptr_t)1, NoIntrinsic },
    { "addEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionAddEventListener), (intptr_t)3, NoIntrinsic },
    { "removeEventListener", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionRemoveEventListener), (intptr_t)3, NoIntrinsic },
    { "dispatchEvent", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsTextTrackListPrototypeFunctionDispatchEvent), (intptr_t)1, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSTextTrackListPrototypeTable = { 8, 7, JSTextTrackListPrototypeTableValues, 0 };
const ClassInfo JSTextTrackListPrototype::s_info = { "TextTrackListPrototype", &Base::s_info, &JSTextTrackListPrototypeTable, 0, CREATE_METHOD_TABLE(JSTextTrackListPrototype) };

JSObject* JSTextTrackListPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTextTrackList>(exec, globalObject);
}

bool JSTextTrackListPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSTextTrackListPrototype* thisObject = jsCast<JSTextTrackListPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, &JSTextTrackListPrototypeTable, thisObject, propertyName, slot);
}

bool JSTextTrackListPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSTextTrackListPrototype* thisObject = jsCast<JSTextTrackListPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, &JSTextTrackListPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSTextTrackList::s_info = { "TextTrackList", &Base::s_info, &JSTextTrackListTable, 0 , CREATE_METHOD_TABLE(JSTextTrackList) };

JSTextTrackList::JSTextTrackList(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<TextTrackList> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSTextTrackList::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSTextTrackList::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSTextTrackListPrototype::create(exec->globalData(), globalObject, JSTextTrackListPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSTextTrackList::destroy(JSC::JSCell* cell)
{
    JSTextTrackList* thisObject = jsCast<JSTextTrackList*>(cell);
    thisObject->JSTextTrackList::~JSTextTrackList();
}

JSTextTrackList::~JSTextTrackList()
{
    releaseImplIfNotNull();
}

bool JSTextTrackList::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    JSTextTrackList* thisObject = jsCast<JSTextTrackList*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    const HashEntry* entry = JSTextTrackListTable.entry(exec, propertyName);
    if (entry) {
        slot.setCustom(thisObject, entry->propertyGetter());
        return true;
    }
    bool ok;
    unsigned index = propertyName.toUInt32(ok);
    if (ok && index < static_cast<TextTrackList*>(thisObject->impl())->length()) {
        slot.setCustomIndex(thisObject, index, indexGetter);
        return true;
    }
    return getStaticValueSlot<JSTextTrackList, Base>(exec, &JSTextTrackListTable, thisObject, propertyName, slot);
}

bool JSTextTrackList::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    JSTextTrackList* thisObject = jsCast<JSTextTrackList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    const HashEntry* entry = JSTextTrackListTable.entry(exec, propertyName);
    if (entry) {
        PropertySlot slot;
        slot.setCustom(thisObject, entry->propertyGetter());
        descriptor.setDescriptor(slot.getValue(exec, propertyName), entry->attributes());
        return true;
    }
    bool ok;
    unsigned index = propertyName.toUInt32(ok);
    if (ok && index < static_cast<TextTrackList*>(thisObject->impl())->length()) {
        PropertySlot slot;
        slot.setCustomIndex(thisObject, index, indexGetter);
        descriptor.setDescriptor(slot.getValue(exec, propertyName), DontDelete | ReadOnly);
        return true;
    }
    return getStaticValueDescriptor<JSTextTrackList, Base>(exec, &JSTextTrackListTable, thisObject, propertyName, descriptor);
}

bool JSTextTrackList::getOwnPropertySlotByIndex(JSCell* cell, ExecState* exec, unsigned propertyName, PropertySlot& slot)
{
    JSTextTrackList* thisObject = jsCast<JSTextTrackList*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    if (propertyName < static_cast<TextTrackList*>(thisObject->impl())->length()) {
        slot.setCustomIndex(thisObject, propertyName, thisObject->indexGetter);
        return true;
    }
    return thisObject->methodTable()->getOwnPropertySlot(thisObject, exec, Identifier::from(exec, propertyName), slot);
}

JSValue jsTextTrackListLength(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    JSValue result = jsNumber(impl->length());
    return result;
}


JSValue jsTextTrackListOnaddtrack(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    if (EventListener* listener = impl->onaddtrack()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl->scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsTextTrackListConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSTextTrackList* domObject = static_cast<JSTextTrackList*>(asObject(slotBase));
    return JSTextTrackList::getConstructor(exec, domObject->globalObject());
}

void JSTextTrackList::put(JSCell* cell, ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    JSTextTrackList* thisObject = jsCast<JSTextTrackList*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    lookupPut<JSTextTrackList, Base>(exec, propertyName, value, &JSTextTrackListTable, thisObject, slot);
}

void setJSTextTrackListOnaddtrack(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(thisObject);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    impl->setOnaddtrack(createJSAttributeEventListener(exec, value, thisObject));
}


void JSTextTrackList::getOwnPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
{
    JSTextTrackList* thisObject = jsCast<JSTextTrackList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    for (unsigned i = 0; i < static_cast<TextTrackList*>(thisObject->impl())->length(); ++i)
        propertyNames.add(Identifier::from(exec, i));
     Base::getOwnPropertyNames(thisObject, exec, propertyNames, mode);
}

JSValue JSTextTrackList::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTextTrackListConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionItem(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTextTrackList::s_info);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    unsigned index(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined).toUInt32(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->item(index)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTextTrackList::s_info);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->addEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTextTrackList::s_info);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    if (exec->argumentCount() < 2)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl->removeEventListener(ustringToAtomicString(exec->argument(0).toString(exec)->value(exec)), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsTextTrackListPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTextTrackList::s_info))
        return throwVMTypeError(exec);
    JSTextTrackList* castedThis = static_cast<JSTextTrackList*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTextTrackList::s_info);
    TextTrackList* impl = static_cast<TextTrackList*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, "Not enough arguments"));
    ExceptionCode ec = 0;
    Event* evt(toEvent(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl->dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


JSValue JSTextTrackList::indexGetter(ExecState* exec, JSValue slotBase, unsigned index)
{
    JSTextTrackList* thisObj = static_cast<JSTextTrackList*>(asObject(slotBase));
    ASSERT_GC_OBJECT_INHERITS(thisObj, &s_info);
    return toJS(exec, thisObj->globalObject(), static_cast<TextTrackList*>(thisObj->impl())->item(index));
}

void JSTextTrackListOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSTextTrackList* jsTextTrackList = static_cast<JSTextTrackList*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsTextTrackList->impl(), jsTextTrackList);
    jsTextTrackList->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, TextTrackList* impl)
{
    return wrap<JSTextTrackList>(exec, globalObject, impl);
}

TextTrackList* toTextTrackList(JSC::JSValue value)
{
    return value.inherits(&JSTextTrackList::s_info) ? static_cast<JSTextTrackList*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(VIDEO_TRACK)
