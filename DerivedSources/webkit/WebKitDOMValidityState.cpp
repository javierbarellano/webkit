/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "ValidityState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMValidityState.h"
#include "webkit/WebKitDOMValidityStatePrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMValidityState* kit(WebCore::ValidityState* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMValidityState*>(ret);

    return static_cast<WebKitDOMValidityState*>(DOMObjectCache::put(obj, WebKit::wrapValidityState(obj)));
}

WebCore::ValidityState* core(WebKitDOMValidityState* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::ValidityState* coreObject = static_cast<WebCore::ValidityState*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMValidityState* wrapValidityState(WebCore::ValidityState* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_VALIDITY_STATE(g_object_new(WEBKIT_TYPE_DOM_VALIDITY_STATE,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMValidityState, webkit_dom_validity_state, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_VALUE_MISSING,
    PROP_TYPE_MISMATCH,
    PROP_PATTERN_MISMATCH,
    PROP_TOO_LONG,
    PROP_RANGE_UNDERFLOW,
    PROP_RANGE_OVERFLOW,
    PROP_STEP_MISMATCH,
    PROP_CUSTOM_ERROR,
    PROP_VALID,
};

static void webkit_dom_validity_state_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::ValidityState* coreObject = static_cast<WebCore::ValidityState *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_validity_state_parent_class)->finalize(object);
}

static void webkit_dom_validity_state_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_validity_state_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMValidityState* self = WEBKIT_DOM_VALIDITY_STATE(object);
    WebCore::ValidityState* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_VALUE_MISSING:
    {
        g_value_set_boolean(value, coreSelf->valueMissing());
        break;
    }
    case PROP_TYPE_MISMATCH:
    {
        g_value_set_boolean(value, coreSelf->typeMismatch());
        break;
    }
    case PROP_PATTERN_MISMATCH:
    {
        g_value_set_boolean(value, coreSelf->patternMismatch());
        break;
    }
    case PROP_TOO_LONG:
    {
        g_value_set_boolean(value, coreSelf->tooLong());
        break;
    }
    case PROP_RANGE_UNDERFLOW:
    {
        g_value_set_boolean(value, coreSelf->rangeUnderflow());
        break;
    }
    case PROP_RANGE_OVERFLOW:
    {
        g_value_set_boolean(value, coreSelf->rangeOverflow());
        break;
    }
    case PROP_STEP_MISMATCH:
    {
        g_value_set_boolean(value, coreSelf->stepMismatch());
        break;
    }
    case PROP_CUSTOM_ERROR:
    {
        g_value_set_boolean(value, coreSelf->customError());
        break;
    }
    case PROP_VALID:
    {
        g_value_set_boolean(value, coreSelf->valid());
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_validity_state_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_validity_state_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_validity_state_parent_class)->constructed(object);
}

static void webkit_dom_validity_state_class_init(WebKitDOMValidityStateClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_validity_state_finalize;
    gobjectClass->set_property = webkit_dom_validity_state_set_property;
    gobjectClass->get_property = webkit_dom_validity_state_get_property;
    gobjectClass->constructed = webkit_dom_validity_state_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_VALUE_MISSING,
                                    g_param_spec_boolean("value-missing", /* name */
                                                           "validity_state_value-missing", /* short description */
                                                           "read-only  gboolean ValidityState.value-missing", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TYPE_MISMATCH,
                                    g_param_spec_boolean("type-mismatch", /* name */
                                                           "validity_state_type-mismatch", /* short description */
                                                           "read-only  gboolean ValidityState.type-mismatch", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PATTERN_MISMATCH,
                                    g_param_spec_boolean("pattern-mismatch", /* name */
                                                           "validity_state_pattern-mismatch", /* short description */
                                                           "read-only  gboolean ValidityState.pattern-mismatch", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TOO_LONG,
                                    g_param_spec_boolean("too-long", /* name */
                                                           "validity_state_too-long", /* short description */
                                                           "read-only  gboolean ValidityState.too-long", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_RANGE_UNDERFLOW,
                                    g_param_spec_boolean("range-underflow", /* name */
                                                           "validity_state_range-underflow", /* short description */
                                                           "read-only  gboolean ValidityState.range-underflow", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_RANGE_OVERFLOW,
                                    g_param_spec_boolean("range-overflow", /* name */
                                                           "validity_state_range-overflow", /* short description */
                                                           "read-only  gboolean ValidityState.range-overflow", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_STEP_MISMATCH,
                                    g_param_spec_boolean("step-mismatch", /* name */
                                                           "validity_state_step-mismatch", /* short description */
                                                           "read-only  gboolean ValidityState.step-mismatch", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CUSTOM_ERROR,
                                    g_param_spec_boolean("custom-error", /* name */
                                                           "validity_state_custom-error", /* short description */
                                                           "read-only  gboolean ValidityState.custom-error", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_VALID,
                                    g_param_spec_boolean("valid", /* name */
                                                           "validity_state_valid", /* short description */
                                                           "read-only  gboolean ValidityState.valid", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_validity_state_init(WebKitDOMValidityState* request)
{
}

gboolean
webkit_dom_validity_state_get_value_missing(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->valueMissing();
    return res;
}

gboolean
webkit_dom_validity_state_get_type_mismatch(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->typeMismatch();
    return res;
}

gboolean
webkit_dom_validity_state_get_pattern_mismatch(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->patternMismatch();
    return res;
}

gboolean
webkit_dom_validity_state_get_too_long(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->tooLong();
    return res;
}

gboolean
webkit_dom_validity_state_get_range_underflow(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->rangeUnderflow();
    return res;
}

gboolean
webkit_dom_validity_state_get_range_overflow(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->rangeOverflow();
    return res;
}

gboolean
webkit_dom_validity_state_get_step_mismatch(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->stepMismatch();
    return res;
}

gboolean
webkit_dom_validity_state_get_custom_error(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->customError();
    return res;
}

gboolean
webkit_dom_validity_state_get_valid(WebKitDOMValidityState* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::ValidityState * item = WebKit::core(self);
    gboolean res = item->valid();
    return res;
}

