/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "DOMSelection.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "Node.h"
#include "Range.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMDOMSelection.h"
#include "webkit/WebKitDOMDOMSelectionPrivate.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkit/WebKitDOMRange.h"
#include "webkit/WebKitDOMRangePrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMDOMSelection* kit(WebCore::DOMSelection* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMDOMSelection*>(ret);

    return static_cast<WebKitDOMDOMSelection*>(DOMObjectCache::put(obj, WebKit::wrapDOMSelection(obj)));
}

WebCore::DOMSelection* core(WebKitDOMDOMSelection* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::DOMSelection* coreObject = static_cast<WebCore::DOMSelection*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMDOMSelection* wrapDOMSelection(WebCore::DOMSelection* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_DOM_SELECTION(g_object_new(WEBKIT_TYPE_DOM_DOM_SELECTION,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMDOMSelection, webkit_dom_dom_selection, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_ANCHOR_NODE,
    PROP_ANCHOR_OFFSET,
    PROP_FOCUS_NODE,
    PROP_FOCUS_OFFSET,
    PROP_IS_COLLAPSED,
    PROP_RANGE_COUNT,
    PROP_BASE_NODE,
    PROP_BASE_OFFSET,
    PROP_EXTENT_NODE,
    PROP_EXTENT_OFFSET,
    PROP_TYPE,
};

static void webkit_dom_dom_selection_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::DOMSelection* coreObject = static_cast<WebCore::DOMSelection *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_dom_selection_parent_class)->finalize(object);
}

static void webkit_dom_dom_selection_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_dom_selection_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMDOMSelection* self = WEBKIT_DOM_DOM_SELECTION(object);
    WebCore::DOMSelection* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ANCHOR_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->anchorNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_ANCHOR_OFFSET:
    {
        g_value_set_long(value, coreSelf->anchorOffset());
        break;
    }
    case PROP_FOCUS_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->focusNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_FOCUS_OFFSET:
    {
        g_value_set_long(value, coreSelf->focusOffset());
        break;
    }
    case PROP_IS_COLLAPSED:
    {
        g_value_set_boolean(value, coreSelf->isCollapsed());
        break;
    }
    case PROP_RANGE_COUNT:
    {
        g_value_set_long(value, coreSelf->rangeCount());
        break;
    }
    case PROP_BASE_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->baseNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_BASE_OFFSET:
    {
        g_value_set_long(value, coreSelf->baseOffset());
        break;
    }
    case PROP_EXTENT_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->extentNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_EXTENT_OFFSET:
    {
        g_value_set_long(value, coreSelf->extentOffset());
        break;
    }
    case PROP_TYPE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->type()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_dom_selection_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_dom_selection_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_dom_selection_parent_class)->constructed(object);
}

static void webkit_dom_dom_selection_class_init(WebKitDOMDOMSelectionClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_dom_selection_finalize;
    gobjectClass->set_property = webkit_dom_dom_selection_set_property;
    gobjectClass->get_property = webkit_dom_dom_selection_get_property;
    gobjectClass->constructed = webkit_dom_dom_selection_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_ANCHOR_NODE,
                                    g_param_spec_object("anchor-node", /* name */
                                                           "dom_selection_anchor-node", /* short description */
                                                           "read-only  WebKitDOMNode* DOMSelection.anchor-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ANCHOR_OFFSET,
                                    g_param_spec_long("anchor-offset", /* name */
                                                           "dom_selection_anchor-offset", /* short description */
                                                           "read-only  glong DOMSelection.anchor-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FOCUS_NODE,
                                    g_param_spec_object("focus-node", /* name */
                                                           "dom_selection_focus-node", /* short description */
                                                           "read-only  WebKitDOMNode* DOMSelection.focus-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FOCUS_OFFSET,
                                    g_param_spec_long("focus-offset", /* name */
                                                           "dom_selection_focus-offset", /* short description */
                                                           "read-only  glong DOMSelection.focus-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_IS_COLLAPSED,
                                    g_param_spec_boolean("is-collapsed", /* name */
                                                           "dom_selection_is-collapsed", /* short description */
                                                           "read-only  gboolean DOMSelection.is-collapsed", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_RANGE_COUNT,
                                    g_param_spec_long("range-count", /* name */
                                                           "dom_selection_range-count", /* short description */
                                                           "read-only  glong DOMSelection.range-count", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BASE_NODE,
                                    g_param_spec_object("base-node", /* name */
                                                           "dom_selection_base-node", /* short description */
                                                           "read-only  WebKitDOMNode* DOMSelection.base-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BASE_OFFSET,
                                    g_param_spec_long("base-offset", /* name */
                                                           "dom_selection_base-offset", /* short description */
                                                           "read-only  glong DOMSelection.base-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_EXTENT_NODE,
                                    g_param_spec_object("extent-node", /* name */
                                                           "dom_selection_extent-node", /* short description */
                                                           "read-only  WebKitDOMNode* DOMSelection.extent-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_EXTENT_OFFSET,
                                    g_param_spec_long("extent-offset", /* name */
                                                           "dom_selection_extent-offset", /* short description */
                                                           "read-only  glong DOMSelection.extent-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TYPE,
                                    g_param_spec_string("type", /* name */
                                                           "dom_selection_type", /* short description */
                                                           "read-only  gchar* DOMSelection.type", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_dom_selection_init(WebKitDOMDOMSelection* request)
{
}

void
webkit_dom_dom_selection_collapse(WebKitDOMDOMSelection* self, WebKitDOMNode* node, glong index, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(node);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_if_fail(converted_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->collapse(converted_node, index, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_dom_selection_collapse_to_end(WebKitDOMDOMSelection* self, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->collapseToEnd(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_dom_selection_collapse_to_start(WebKitDOMDOMSelection* self, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->collapseToStart(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_dom_selection_delete_from_document(WebKitDOMDOMSelection* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    item->deleteFromDocument();
}

gboolean
webkit_dom_dom_selection_contains_node(WebKitDOMDOMSelection* self, WebKitDOMNode* node, gboolean allow_partial)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_val_if_fail(node, 0);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_val_if_fail(converted_node, 0);
    }
    gboolean res = item->containsNode(converted_node, allow_partial);
    return res;
}

void
webkit_dom_dom_selection_select_all_children(WebKitDOMDOMSelection* self, WebKitDOMNode* node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(node);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_if_fail(converted_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->selectAllChildren(converted_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_dom_selection_extend(WebKitDOMDOMSelection* self, WebKitDOMNode* node, glong offset, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(node);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_if_fail(converted_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->extend(converted_node, offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMRange*
webkit_dom_dom_selection_get_range_at(WebKitDOMDOMSelection* self, glong index, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Range> g_res = WTF::getPtr(item->getRangeAt(index, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMRange* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_dom_selection_remove_all_ranges(WebKitDOMDOMSelection* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    item->removeAllRanges();
}

void
webkit_dom_dom_selection_add_range(WebKitDOMDOMSelection* self, WebKitDOMRange* range)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(range);
    WebCore::Range * converted_range = NULL;
    if (range != NULL) {
        converted_range = WebKit::core(range);
        g_return_if_fail(converted_range);
    }
    item->addRange(converted_range);
}

void
webkit_dom_dom_selection_modify(WebKitDOMDOMSelection* self, const gchar* alter, const gchar* direction, const gchar* granularity)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(alter);
    g_return_if_fail(direction);
    g_return_if_fail(granularity);
    WTF::String converted_alter = WTF::String::fromUTF8(alter);
    WTF::String converted_direction = WTF::String::fromUTF8(direction);
    WTF::String converted_granularity = WTF::String::fromUTF8(granularity);
    item->modify(converted_alter, converted_direction, converted_granularity);
}

void
webkit_dom_dom_selection_set_base_and_extent(WebKitDOMDOMSelection* self, WebKitDOMNode* base_node, glong base_offset, WebKitDOMNode* extent_node, glong extent_offset, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(base_node);
    g_return_if_fail(extent_node);
    WebCore::Node * converted_base_node = NULL;
    if (base_node != NULL) {
        converted_base_node = WebKit::core(base_node);
        g_return_if_fail(converted_base_node);
    }
    WebCore::Node * converted_extent_node = NULL;
    if (extent_node != NULL) {
        converted_extent_node = WebKit::core(extent_node);
        g_return_if_fail(converted_extent_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setBaseAndExtent(converted_base_node, base_offset, converted_extent_node, extent_offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_dom_selection_set_position(WebKitDOMDOMSelection* self, WebKitDOMNode* node, glong offset, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    g_return_if_fail(node);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_if_fail(converted_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setPosition(converted_node, offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_dom_selection_empty(WebKitDOMDOMSelection* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    item->empty();
}

WebKitDOMNode*
webkit_dom_dom_selection_get_anchor_node(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->anchorNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_dom_selection_get_anchor_offset(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    glong res = item->anchorOffset();
    return res;
}

WebKitDOMNode*
webkit_dom_dom_selection_get_focus_node(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->focusNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_dom_selection_get_focus_offset(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    glong res = item->focusOffset();
    return res;
}

gboolean
webkit_dom_dom_selection_get_is_collapsed(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    gboolean res = item->isCollapsed();
    return res;
}

glong
webkit_dom_dom_selection_get_range_count(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    glong res = item->rangeCount();
    return res;
}

WebKitDOMNode*
webkit_dom_dom_selection_get_base_node(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->baseNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_dom_selection_get_base_offset(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    glong res = item->baseOffset();
    return res;
}

WebKitDOMNode*
webkit_dom_dom_selection_get_extent_node(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->extentNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_dom_selection_get_extent_offset(WebKitDOMDOMSelection* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMSelection * item = WebKit::core(self);
    glong res = item->extentOffset();
    return res;
}

