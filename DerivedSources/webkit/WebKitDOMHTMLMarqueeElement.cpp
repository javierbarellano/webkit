/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "HTMLMarqueeElement.h"
#include "HTMLNames.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMHTMLMarqueeElement.h"
#include "webkit/WebKitDOMHTMLMarqueeElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLMarqueeElement* kit(WebCore::HTMLMarqueeElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLMarqueeElement*>(ret);

    return static_cast<WebKitDOMHTMLMarqueeElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLMarqueeElement(obj)));
}

WebCore::HTMLMarqueeElement* core(WebKitDOMHTMLMarqueeElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLMarqueeElement* coreObject = static_cast<WebCore::HTMLMarqueeElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLMarqueeElement* wrapHTMLMarqueeElement(WebCore::HTMLMarqueeElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_MARQUEE_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_MARQUEE_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLMarqueeElement, webkit_dom_html_marquee_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_BEHAVIOR,
    PROP_BG_COLOR,
    PROP_DIRECTION,
    PROP_HEIGHT,
    PROP_HSPACE,
    PROP_LOOP,
    PROP_SCROLL_AMOUNT,
    PROP_SCROLL_DELAY,
    PROP_TRUE_SPEED,
    PROP_VSPACE,
    PROP_WIDTH,
};

static void webkit_dom_html_marquee_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLMarqueeElement* coreObject = static_cast<WebCore::HTMLMarqueeElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_marquee_element_parent_class)->finalize(object);
}

static void webkit_dom_html_marquee_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLMarqueeElement* self = WEBKIT_DOM_HTML_MARQUEE_ELEMENT(object);
    WebCore::HTMLMarqueeElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_BEHAVIOR:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::behaviorAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_BG_COLOR:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::bgcolorAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_DIRECTION:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::directionAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HEIGHT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::heightAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HSPACE:
    {
        coreSelf->setUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr, (g_value_get_ulong(value)));
        break;
    }
    case PROP_LOOP:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setLoop((g_value_get_long(value)), ec);
        break;
    }
    case PROP_SCROLL_AMOUNT:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setScrollAmount((g_value_get_long(value)), ec);
        break;
    }
    case PROP_SCROLL_DELAY:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setScrollDelay((g_value_get_long(value)), ec);
        break;
    }
    case PROP_TRUE_SPEED:
    {
        coreSelf->setBooleanAttribute(WebCore::HTMLNames::truespeedAttr, (g_value_get_boolean(value)));
        break;
    }
    case PROP_VSPACE:
    {
        coreSelf->setUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr, (g_value_get_ulong(value)));
        break;
    }
    case PROP_WIDTH:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::widthAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_marquee_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLMarqueeElement* self = WEBKIT_DOM_HTML_MARQUEE_ELEMENT(object);
    WebCore::HTMLMarqueeElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_BEHAVIOR:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::behaviorAttr)));
        break;
    }
    case PROP_BG_COLOR:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::bgcolorAttr)));
        break;
    }
    case PROP_DIRECTION:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::directionAttr)));
        break;
    }
    case PROP_HEIGHT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::heightAttr)));
        break;
    }
    case PROP_HSPACE:
    {
        g_value_set_ulong(value, coreSelf->getUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr));
        break;
    }
    case PROP_LOOP:
    {
        g_value_set_long(value, coreSelf->loop());
        break;
    }
    case PROP_SCROLL_AMOUNT:
    {
        g_value_set_long(value, coreSelf->scrollAmount());
        break;
    }
    case PROP_SCROLL_DELAY:
    {
        g_value_set_long(value, coreSelf->scrollDelay());
        break;
    }
    case PROP_TRUE_SPEED:
    {
        g_value_set_boolean(value, coreSelf->hasAttribute(WebCore::HTMLNames::truespeedAttr));
        break;
    }
    case PROP_VSPACE:
    {
        g_value_set_ulong(value, coreSelf->getUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr));
        break;
    }
    case PROP_WIDTH:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::widthAttr)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_marquee_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_marquee_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_marquee_element_parent_class)->constructed(object);
}

static void webkit_dom_html_marquee_element_class_init(WebKitDOMHTMLMarqueeElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_marquee_element_finalize;
    gobjectClass->set_property = webkit_dom_html_marquee_element_set_property;
    gobjectClass->get_property = webkit_dom_html_marquee_element_get_property;
    gobjectClass->constructed = webkit_dom_html_marquee_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_BEHAVIOR,
                                    g_param_spec_string("behavior", /* name */
                                                           "html_marquee_element_behavior", /* short description */
                                                           "read-write  gchar* HTMLMarqueeElement.behavior", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BG_COLOR,
                                    g_param_spec_string("bg-color", /* name */
                                                           "html_marquee_element_bg-color", /* short description */
                                                           "read-write  gchar* HTMLMarqueeElement.bg-color", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DIRECTION,
                                    g_param_spec_string("direction", /* name */
                                                           "html_marquee_element_direction", /* short description */
                                                           "read-write  gchar* HTMLMarqueeElement.direction", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HEIGHT,
                                    g_param_spec_string("height", /* name */
                                                           "html_marquee_element_height", /* short description */
                                                           "read-write  gchar* HTMLMarqueeElement.height", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HSPACE,
                                    g_param_spec_ulong("hspace", /* name */
                                                           "html_marquee_element_hspace", /* short description */
                                                           "read-write  gulong HTMLMarqueeElement.hspace", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXULONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LOOP,
                                    g_param_spec_long("loop", /* name */
                                                           "html_marquee_element_loop", /* short description */
                                                           "read-write  glong HTMLMarqueeElement.loop", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_AMOUNT,
                                    g_param_spec_long("scroll-amount", /* name */
                                                           "html_marquee_element_scroll-amount", /* short description */
                                                           "read-write  glong HTMLMarqueeElement.scroll-amount", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_DELAY,
                                    g_param_spec_long("scroll-delay", /* name */
                                                           "html_marquee_element_scroll-delay", /* short description */
                                                           "read-write  glong HTMLMarqueeElement.scroll-delay", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TRUE_SPEED,
                                    g_param_spec_boolean("true-speed", /* name */
                                                           "html_marquee_element_true-speed", /* short description */
                                                           "read-write  gboolean HTMLMarqueeElement.true-speed", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_VSPACE,
                                    g_param_spec_ulong("vspace", /* name */
                                                           "html_marquee_element_vspace", /* short description */
                                                           "read-write  gulong HTMLMarqueeElement.vspace", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXULONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WIDTH,
                                    g_param_spec_string("width", /* name */
                                                           "html_marquee_element_width", /* short description */
                                                           "read-write  gchar* HTMLMarqueeElement.width", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_html_marquee_element_init(WebKitDOMHTMLMarqueeElement* request)
{
}

void
webkit_dom_html_marquee_element_start(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    item->start();
}

void
webkit_dom_html_marquee_element_stop(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    item->stop();
}

gchar*
webkit_dom_html_marquee_element_get_behavior(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::behaviorAttr));
    return res;
}

void
webkit_dom_html_marquee_element_set_behavior(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::behaviorAttr, converted_value);
}

gchar*
webkit_dom_html_marquee_element_get_bg_color(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::bgcolorAttr));
    return res;
}

void
webkit_dom_html_marquee_element_set_bg_color(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::bgcolorAttr, converted_value);
}

gchar*
webkit_dom_html_marquee_element_get_direction(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::directionAttr));
    return res;
}

void
webkit_dom_html_marquee_element_set_direction(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::directionAttr, converted_value);
}

gchar*
webkit_dom_html_marquee_element_get_height(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::heightAttr));
    return res;
}

void
webkit_dom_html_marquee_element_set_height(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::heightAttr, converted_value);
}

gulong
webkit_dom_html_marquee_element_get_hspace(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gulong res = item->getUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr);
    return res;
}

void
webkit_dom_html_marquee_element_set_hspace(WebKitDOMHTMLMarqueeElement* self, gulong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    item->setUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr, value);
}

glong
webkit_dom_html_marquee_element_get_loop(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    glong res = item->loop();
    return res;
}

void
webkit_dom_html_marquee_element_set_loop(WebKitDOMHTMLMarqueeElement* self, glong value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setLoop(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

glong
webkit_dom_html_marquee_element_get_scroll_amount(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    glong res = item->scrollAmount();
    return res;
}

void
webkit_dom_html_marquee_element_set_scroll_amount(WebKitDOMHTMLMarqueeElement* self, glong value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setScrollAmount(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

glong
webkit_dom_html_marquee_element_get_scroll_delay(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    glong res = item->scrollDelay();
    return res;
}

void
webkit_dom_html_marquee_element_set_scroll_delay(WebKitDOMHTMLMarqueeElement* self, glong value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setScrollDelay(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gboolean
webkit_dom_html_marquee_element_get_true_speed(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gboolean res = item->hasAttribute(WebCore::HTMLNames::truespeedAttr);
    return res;
}

void
webkit_dom_html_marquee_element_set_true_speed(WebKitDOMHTMLMarqueeElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::truespeedAttr, value);
}

gulong
webkit_dom_html_marquee_element_get_vspace(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gulong res = item->getUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr);
    return res;
}

void
webkit_dom_html_marquee_element_set_vspace(WebKitDOMHTMLMarqueeElement* self, gulong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    item->setUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr, value);
}

gchar*
webkit_dom_html_marquee_element_get_width(WebKitDOMHTMLMarqueeElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::widthAttr));
    return res;
}

void
webkit_dom_html_marquee_element_set_width(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLMarqueeElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::widthAttr, converted_value);
}

