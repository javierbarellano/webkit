/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "Console.h"
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "MemoryInfo.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMConsole.h"
#include "webkit/WebKitDOMConsolePrivate.h"
#include "webkit/WebKitDOMMemoryInfo.h"
#include "webkit/WebKitDOMMemoryInfoPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMConsole* kit(WebCore::Console* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMConsole*>(ret);

    return static_cast<WebKitDOMConsole*>(DOMObjectCache::put(obj, WebKit::wrapConsole(obj)));
}

WebCore::Console* core(WebKitDOMConsole* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Console* coreObject = static_cast<WebCore::Console*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMConsole* wrapConsole(WebCore::Console* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_CONSOLE(g_object_new(WEBKIT_TYPE_DOM_CONSOLE,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMConsole, webkit_dom_console, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_MEMORY,
};

static void webkit_dom_console_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Console* coreObject = static_cast<WebCore::Console *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_console_parent_class)->finalize(object);
}

static void webkit_dom_console_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_console_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMConsole* self = WEBKIT_DOM_CONSOLE(object);
    WebCore::Console* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_MEMORY:
    {
        RefPtr<WebCore::MemoryInfo> ptr = coreSelf->memory();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_console_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_console_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_console_parent_class)->constructed(object);
}

static void webkit_dom_console_class_init(WebKitDOMConsoleClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_console_finalize;
    gobjectClass->set_property = webkit_dom_console_set_property;
    gobjectClass->get_property = webkit_dom_console_get_property;
    gobjectClass->constructed = webkit_dom_console_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_MEMORY,
                                    g_param_spec_object("memory", /* name */
                                                           "console_memory", /* short description */
                                                           "read-only  WebKitDOMMemoryInfo* Console.memory", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_MEMORY_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_console_init(WebKitDOMConsole* request)
{
}

void
webkit_dom_console_time(WebKitDOMConsole* self, const gchar* title)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Console * item = WebKit::core(self);
    g_return_if_fail(title);
    WTF::String converted_title = WTF::String::fromUTF8(title);
    item->time(converted_title);
}

void
webkit_dom_console_group_end(WebKitDOMConsole* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Console * item = WebKit::core(self);
    item->groupEnd();
}

WebKitDOMMemoryInfo*
webkit_dom_console_get_memory(WebKitDOMConsole* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Console * item = WebKit::core(self);
    PassRefPtr<WebCore::MemoryInfo> g_res = WTF::getPtr(item->memory());
    WebKitDOMMemoryInfo* res = WebKit::kit(g_res.get());
    return res;
}

