/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "CSSRule.h"
#include "CSSRuleList.h"
#include "CSSStyleSheet.h"
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMCSSRule.h"
#include "webkit/WebKitDOMCSSRuleList.h"
#include "webkit/WebKitDOMCSSRuleListPrivate.h"
#include "webkit/WebKitDOMCSSRulePrivate.h"
#include "webkit/WebKitDOMCSSStyleSheet.h"
#include "webkit/WebKitDOMCSSStyleSheetPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMCSSStyleSheet* kit(WebCore::CSSStyleSheet* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMCSSStyleSheet*>(ret);

    return static_cast<WebKitDOMCSSStyleSheet*>(DOMObjectCache::put(obj, WebKit::wrapCSSStyleSheet(obj)));
}

WebCore::CSSStyleSheet* core(WebKitDOMCSSStyleSheet* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::CSSStyleSheet* coreObject = static_cast<WebCore::CSSStyleSheet*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMCSSStyleSheet* wrapCSSStyleSheet(WebCore::CSSStyleSheet* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_CSS_STYLE_SHEET(g_object_new(WEBKIT_TYPE_DOM_CSS_STYLE_SHEET,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMCSSStyleSheet, webkit_dom_css_style_sheet, WEBKIT_TYPE_DOM_STYLE_SHEET)

enum {
    PROP_0,
    PROP_OWNER_RULE,
    PROP_CSS_RULES,
    PROP_RULES,
};

static void webkit_dom_css_style_sheet_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::CSSStyleSheet* coreObject = static_cast<WebCore::CSSStyleSheet *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_css_style_sheet_parent_class)->finalize(object);
}

static void webkit_dom_css_style_sheet_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_css_style_sheet_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMCSSStyleSheet* self = WEBKIT_DOM_CSS_STYLE_SHEET(object);
    WebCore::CSSStyleSheet* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_OWNER_RULE:
    {
        RefPtr<WebCore::CSSRule> ptr = coreSelf->ownerRule();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CSS_RULES:
    {
        RefPtr<WebCore::CSSRuleList> ptr = coreSelf->cssRules();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_RULES:
    {
        RefPtr<WebCore::CSSRuleList> ptr = coreSelf->rules();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_css_style_sheet_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_css_style_sheet_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_css_style_sheet_parent_class)->constructed(object);
}

static void webkit_dom_css_style_sheet_class_init(WebKitDOMCSSStyleSheetClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_css_style_sheet_finalize;
    gobjectClass->set_property = webkit_dom_css_style_sheet_set_property;
    gobjectClass->get_property = webkit_dom_css_style_sheet_get_property;
    gobjectClass->constructed = webkit_dom_css_style_sheet_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_OWNER_RULE,
                                    g_param_spec_object("owner-rule", /* name */
                                                           "css_style_sheet_owner-rule", /* short description */
                                                           "read-only  WebKitDOMCSSRule* CSSStyleSheet.owner-rule", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_CSS_RULE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CSS_RULES,
                                    g_param_spec_object("css-rules", /* name */
                                                           "css_style_sheet_css-rules", /* short description */
                                                           "read-only  WebKitDOMCSSRuleList* CSSStyleSheet.css-rules", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_CSS_RULE_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_RULES,
                                    g_param_spec_object("rules", /* name */
                                                           "css_style_sheet_rules", /* short description */
                                                           "read-only  WebKitDOMCSSRuleList* CSSStyleSheet.rules", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_CSS_RULE_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_css_style_sheet_init(WebKitDOMCSSStyleSheet* request)
{
}

gulong
webkit_dom_css_style_sheet_insert_rule(WebKitDOMCSSStyleSheet* self, const gchar* rule, gulong index, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    g_return_val_if_fail(rule, 0);
    WTF::String converted_rule = WTF::String::fromUTF8(rule);
    WebCore::ExceptionCode ec = 0;
    gulong res = item->insertRule(converted_rule, index, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

void
webkit_dom_css_style_sheet_delete_rule(WebKitDOMCSSStyleSheet* self, gulong index, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->deleteRule(index, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

glong
webkit_dom_css_style_sheet_add_rule(WebKitDOMCSSStyleSheet* self, const gchar* selector, const gchar* style, gulong index, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    g_return_val_if_fail(selector, 0);
    g_return_val_if_fail(style, 0);
    WTF::String converted_selector = WTF::String::fromUTF8(selector);
    WTF::String converted_style = WTF::String::fromUTF8(style);
    WebCore::ExceptionCode ec = 0;
    glong res = item->addRule(converted_selector, converted_style, index, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

void
webkit_dom_css_style_sheet_remove_rule(WebKitDOMCSSStyleSheet* self, gulong index, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->removeRule(index, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMCSSRule*
webkit_dom_css_style_sheet_get_owner_rule(WebKitDOMCSSStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    PassRefPtr<WebCore::CSSRule> g_res = WTF::getPtr(item->ownerRule());
    WebKitDOMCSSRule* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCSSRuleList*
webkit_dom_css_style_sheet_get_css_rules(WebKitDOMCSSStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    PassRefPtr<WebCore::CSSRuleList> g_res = WTF::getPtr(item->cssRules());
    WebKitDOMCSSRuleList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCSSRuleList*
webkit_dom_css_style_sheet_get_rules(WebKitDOMCSSStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::CSSStyleSheet * item = WebKit::core(self);
    PassRefPtr<WebCore::CSSRuleList> g_res = WTF::getPtr(item->rules());
    WebKitDOMCSSRuleList* res = WebKit::kit(g_res.get());
    return res;
}

