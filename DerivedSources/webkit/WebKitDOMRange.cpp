/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "DocumentFragment.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "Node.h"
#include "Range.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMDocumentFragment.h"
#include "webkit/WebKitDOMDocumentFragmentPrivate.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkit/WebKitDOMRange.h"
#include "webkit/WebKitDOMRangePrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMRange* kit(WebCore::Range* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMRange*>(ret);

    return static_cast<WebKitDOMRange*>(DOMObjectCache::put(obj, WebKit::wrapRange(obj)));
}

WebCore::Range* core(WebKitDOMRange* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Range* coreObject = static_cast<WebCore::Range*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMRange* wrapRange(WebCore::Range* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_RANGE(g_object_new(WEBKIT_TYPE_DOM_RANGE,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMRange, webkit_dom_range, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_START_CONTAINER,
    PROP_START_OFFSET,
    PROP_END_CONTAINER,
    PROP_END_OFFSET,
    PROP_COLLAPSED,
    PROP_COMMON_ANCESTOR_CONTAINER,
    PROP_TEXT,
};

static void webkit_dom_range_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Range* coreObject = static_cast<WebCore::Range *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_range_parent_class)->finalize(object);
}

static void webkit_dom_range_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_range_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMRange* self = WEBKIT_DOM_RANGE(object);
    WebCore::Range* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_START_CONTAINER:
    {
        WebCore::ExceptionCode ec = 0;
        RefPtr<WebCore::Node> ptr = coreSelf->startContainer(ec);
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_START_OFFSET:
    {
        WebCore::ExceptionCode ec = 0;
        g_value_set_long(value, coreSelf->startOffset(ec));
        break;
    }
    case PROP_END_CONTAINER:
    {
        WebCore::ExceptionCode ec = 0;
        RefPtr<WebCore::Node> ptr = coreSelf->endContainer(ec);
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_END_OFFSET:
    {
        WebCore::ExceptionCode ec = 0;
        g_value_set_long(value, coreSelf->endOffset(ec));
        break;
    }
    case PROP_COLLAPSED:
    {
        WebCore::ExceptionCode ec = 0;
        g_value_set_boolean(value, coreSelf->collapsed(ec));
        break;
    }
    case PROP_COMMON_ANCESTOR_CONTAINER:
    {
        WebCore::ExceptionCode ec = 0;
        RefPtr<WebCore::Node> ptr = coreSelf->commonAncestorContainer(ec);
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_TEXT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->text()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_range_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_range_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_range_parent_class)->constructed(object);
}

static void webkit_dom_range_class_init(WebKitDOMRangeClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_range_finalize;
    gobjectClass->set_property = webkit_dom_range_set_property;
    gobjectClass->get_property = webkit_dom_range_get_property;
    gobjectClass->constructed = webkit_dom_range_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_START_CONTAINER,
                                    g_param_spec_object("start-container", /* name */
                                                           "range_start-container", /* short description */
                                                           "read-only  WebKitDOMNode* Range.start-container", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_START_OFFSET,
                                    g_param_spec_long("start-offset", /* name */
                                                           "range_start-offset", /* short description */
                                                           "read-only  glong Range.start-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_END_CONTAINER,
                                    g_param_spec_object("end-container", /* name */
                                                           "range_end-container", /* short description */
                                                           "read-only  WebKitDOMNode* Range.end-container", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_END_OFFSET,
                                    g_param_spec_long("end-offset", /* name */
                                                           "range_end-offset", /* short description */
                                                           "read-only  glong Range.end-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_COLLAPSED,
                                    g_param_spec_boolean("collapsed", /* name */
                                                           "range_collapsed", /* short description */
                                                           "read-only  gboolean Range.collapsed", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_COMMON_ANCESTOR_CONTAINER,
                                    g_param_spec_object("common-ancestor-container", /* name */
                                                           "range_common-ancestor-container", /* short description */
                                                           "read-only  WebKitDOMNode* Range.common-ancestor-container", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TEXT,
                                    g_param_spec_string("text", /* name */
                                                           "range_text", /* short description */
                                                           "read-only  gchar* Range.text", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_range_init(WebKitDOMRange* request)
{
}

void
webkit_dom_range_set_start(WebKitDOMRange* self, WebKitDOMNode* ref_node, glong offset, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setStart(converted_ref_node, offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_set_end(WebKitDOMRange* self, WebKitDOMNode* ref_node, glong offset, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setEnd(converted_ref_node, offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_set_start_before(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setStartBefore(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_set_start_after(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setStartAfter(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_set_end_before(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setEndBefore(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_set_end_after(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->setEndAfter(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_collapse(WebKitDOMRange* self, gboolean to_start, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->collapse(to_start, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_select_node(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->selectNode(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_select_node_contents(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(ref_node);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_if_fail(converted_ref_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->selectNodeContents(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gshort
webkit_dom_range_compare_boundary_points(WebKitDOMRange* self, gushort how, WebKitDOMRange* source_range, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_val_if_fail(how, 0);
    g_return_val_if_fail(source_range, 0);
    WebCore::Range::CompareHow converted_how = static_cast<WebCore::Range::CompareHow>(how);
    WebCore::Range * converted_source_range = NULL;
    if (source_range != NULL) {
        converted_source_range = WebKit::core(source_range);
        g_return_val_if_fail(converted_source_range, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gshort res = item->compareBoundaryPoints(converted_how, converted_source_range, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

void
webkit_dom_range_delete_contents(WebKitDOMRange* self, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->deleteContents(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMDocumentFragment*
webkit_dom_range_extract_contents(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::DocumentFragment> g_res = WTF::getPtr(item->extractContents(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMDocumentFragment* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDocumentFragment*
webkit_dom_range_clone_contents(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::DocumentFragment> g_res = WTF::getPtr(item->cloneContents(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMDocumentFragment* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_range_insert_node(WebKitDOMRange* self, WebKitDOMNode* new_node, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(new_node);
    WebCore::Node * converted_new_node = NULL;
    if (new_node != NULL) {
        converted_new_node = WebKit::core(new_node);
        g_return_if_fail(converted_new_node);
    }
    WebCore::ExceptionCode ec = 0;
    item->insertNode(converted_new_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_range_surround_contents(WebKitDOMRange* self, WebKitDOMNode* new_parent, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(new_parent);
    WebCore::Node * converted_new_parent = NULL;
    if (new_parent != NULL) {
        converted_new_parent = WebKit::core(new_parent);
        g_return_if_fail(converted_new_parent);
    }
    WebCore::ExceptionCode ec = 0;
    item->surroundContents(converted_new_parent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMRange*
webkit_dom_range_clone_range(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Range> g_res = WTF::getPtr(item->cloneRange(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMRange* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_range_to_string(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    gchar* res = convertToUTF8String(item->toString(ec));
    return res;
}

void
webkit_dom_range_detach(WebKitDOMRange* self, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->detach(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMDocumentFragment*
webkit_dom_range_create_contextual_fragment(WebKitDOMRange* self, const gchar* html, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_val_if_fail(html, 0);
    WTF::String converted_html = WTF::String::fromUTF8(html);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::DocumentFragment> g_res = WTF::getPtr(item->createContextualFragment(converted_html, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMDocumentFragment* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_range_intersects_node(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_val_if_fail(ref_node, 0);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_val_if_fail(converted_ref_node, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gboolean res = item->intersectsNode(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

gshort
webkit_dom_range_compare_node(WebKitDOMRange* self, WebKitDOMNode* ref_node, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_val_if_fail(ref_node, 0);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_val_if_fail(converted_ref_node, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gshort res = item->compareNode(converted_ref_node, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

gshort
webkit_dom_range_compare_point(WebKitDOMRange* self, WebKitDOMNode* ref_node, glong offset, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_val_if_fail(ref_node, 0);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_val_if_fail(converted_ref_node, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gshort res = item->comparePoint(converted_ref_node, offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

gboolean
webkit_dom_range_is_point_in_range(WebKitDOMRange* self, WebKitDOMNode* ref_node, glong offset, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_val_if_fail(ref_node, 0);
    WebCore::Node * converted_ref_node = NULL;
    if (ref_node != NULL) {
        converted_ref_node = WebKit::core(ref_node);
        g_return_val_if_fail(converted_ref_node, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gboolean res = item->isPointInRange(converted_ref_node, offset, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

void
webkit_dom_range_expand(WebKitDOMRange* self, const gchar* unit, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    g_return_if_fail(unit);
    WTF::String converted_unit = WTF::String::fromUTF8(unit);
    WebCore::ExceptionCode ec = 0;
    item->expand(converted_unit, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMNode*
webkit_dom_range_get_start_container(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->startContainer(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_range_get_start_offset(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    glong res = item->startOffset(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

WebKitDOMNode*
webkit_dom_range_get_end_container(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->endContainer(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_range_get_end_offset(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    glong res = item->endOffset(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

gboolean
webkit_dom_range_get_collapsed(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    gboolean res = item->collapsed(ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

WebKitDOMNode*
webkit_dom_range_get_common_ancestor_container(WebKitDOMRange* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->commonAncestorContainer(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_range_get_text(WebKitDOMRange* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Range * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->text());
    return res;
}

