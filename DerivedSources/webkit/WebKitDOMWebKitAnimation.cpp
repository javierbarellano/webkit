/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "WebKitAnimation.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMWebKitAnimation.h"
#include "webkit/WebKitDOMWebKitAnimationPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMWebKitAnimation* kit(WebCore::WebKitAnimation* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMWebKitAnimation*>(ret);

    return static_cast<WebKitDOMWebKitAnimation*>(DOMObjectCache::put(obj, WebKit::wrapWebKitAnimation(obj)));
}

WebCore::WebKitAnimation* core(WebKitDOMWebKitAnimation* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::WebKitAnimation* coreObject = static_cast<WebCore::WebKitAnimation*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMWebKitAnimation* wrapWebKitAnimation(WebCore::WebKitAnimation* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_WEBKIT_ANIMATION(g_object_new(WEBKIT_TYPE_DOM_WEBKIT_ANIMATION,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMWebKitAnimation, webkit_dom_webkit_animation, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_NAME,
    PROP_DURATION,
    PROP_ELAPSED_TIME,
    PROP_DELAY,
    PROP_PAUSED,
    PROP_ENDED,
    PROP_DIRECTION,
    PROP_FILL_MODE,
};

static void webkit_dom_webkit_animation_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::WebKitAnimation* coreObject = static_cast<WebCore::WebKitAnimation *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_webkit_animation_parent_class)->finalize(object);
}

static void webkit_dom_webkit_animation_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMWebKitAnimation* self = WEBKIT_DOM_WEBKIT_ANIMATION(object);
    WebCore::WebKitAnimation* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ELAPSED_TIME:
    {
        coreSelf->setElapsedTime((g_value_get_double(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_webkit_animation_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMWebKitAnimation* self = WEBKIT_DOM_WEBKIT_ANIMATION(object);
    WebCore::WebKitAnimation* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->name()));
        break;
    }
    case PROP_DURATION:
    {
        g_value_set_double(value, coreSelf->duration());
        break;
    }
    case PROP_ELAPSED_TIME:
    {
        g_value_set_double(value, coreSelf->elapsedTime());
        break;
    }
    case PROP_DELAY:
    {
        g_value_set_double(value, coreSelf->delay());
        break;
    }
    case PROP_PAUSED:
    {
        g_value_set_boolean(value, coreSelf->paused());
        break;
    }
    case PROP_ENDED:
    {
        g_value_set_boolean(value, coreSelf->ended());
        break;
    }
    case PROP_DIRECTION:
    {
        g_value_set_uint(value, coreSelf->direction());
        break;
    }
    case PROP_FILL_MODE:
    {
        g_value_set_uint(value, coreSelf->fillMode());
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_webkit_animation_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_webkit_animation_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_webkit_animation_parent_class)->constructed(object);
}

static void webkit_dom_webkit_animation_class_init(WebKitDOMWebKitAnimationClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_webkit_animation_finalize;
    gobjectClass->set_property = webkit_dom_webkit_animation_set_property;
    gobjectClass->get_property = webkit_dom_webkit_animation_get_property;
    gobjectClass->constructed = webkit_dom_webkit_animation_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_NAME,
                                    g_param_spec_string("name", /* name */
                                                           "web_kit_animation_name", /* short description */
                                                           "read-only  gchar* WebKitAnimation.name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DURATION,
                                    g_param_spec_double("duration", /* name */
                                                           "web_kit_animation_duration", /* short description */
                                                           "read-only  gdouble WebKitAnimation.duration", /* longer - could do with some extra doc stuff here */
                                                           -G_MAXDOUBLE, /* min */
G_MAXDOUBLE, /* max */
0.0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ELAPSED_TIME,
                                    g_param_spec_double("elapsed-time", /* name */
                                                           "web_kit_animation_elapsed-time", /* short description */
                                                           "read-write  gdouble WebKitAnimation.elapsed-time", /* longer - could do with some extra doc stuff here */
                                                           -G_MAXDOUBLE, /* min */
G_MAXDOUBLE, /* max */
0.0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DELAY,
                                    g_param_spec_double("delay", /* name */
                                                           "web_kit_animation_delay", /* short description */
                                                           "read-only  gdouble WebKitAnimation.delay", /* longer - could do with some extra doc stuff here */
                                                           -G_MAXDOUBLE, /* min */
G_MAXDOUBLE, /* max */
0.0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PAUSED,
                                    g_param_spec_boolean("paused", /* name */
                                                           "web_kit_animation_paused", /* short description */
                                                           "read-only  gboolean WebKitAnimation.paused", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ENDED,
                                    g_param_spec_boolean("ended", /* name */
                                                           "web_kit_animation_ended", /* short description */
                                                           "read-only  gboolean WebKitAnimation.ended", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DIRECTION,
                                    g_param_spec_uint("direction", /* name */
                                                           "web_kit_animation_direction", /* short description */
                                                           "read-only  gushort WebKitAnimation.direction", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXUINT, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FILL_MODE,
                                    g_param_spec_uint("fill-mode", /* name */
                                                           "web_kit_animation_fill-mode", /* short description */
                                                           "read-only  gushort WebKitAnimation.fill-mode", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXUINT, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_webkit_animation_init(WebKitDOMWebKitAnimation* request)
{
}

void
webkit_dom_webkit_animation_play(WebKitDOMWebKitAnimation* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    item->play();
}

void
webkit_dom_webkit_animation_pause(WebKitDOMWebKitAnimation* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    item->pause();
}

gchar*
webkit_dom_webkit_animation_get_name(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->name());
    return res;
}

gdouble
webkit_dom_webkit_animation_get_duration(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gdouble res = item->duration();
    return res;
}

gdouble
webkit_dom_webkit_animation_get_elapsed_time(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gdouble res = item->elapsedTime();
    return res;
}

void
webkit_dom_webkit_animation_set_elapsed_time(WebKitDOMWebKitAnimation* self, gdouble value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    item->setElapsedTime(value);
}

gdouble
webkit_dom_webkit_animation_get_delay(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gdouble res = item->delay();
    return res;
}

gboolean
webkit_dom_webkit_animation_get_paused(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gboolean res = item->paused();
    return res;
}

gboolean
webkit_dom_webkit_animation_get_ended(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gboolean res = item->ended();
    return res;
}

gushort
webkit_dom_webkit_animation_get_direction(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gushort res = item->direction();
    return res;
}

gushort
webkit_dom_webkit_animation_get_fill_mode(WebKitDOMWebKitAnimation* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::WebKitAnimation * item = WebKit::core(self);
    gushort res = item->fillMode();
    return res;
}

