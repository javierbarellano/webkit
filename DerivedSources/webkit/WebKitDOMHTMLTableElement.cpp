/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "HTMLCollection.h"
#include "HTMLElement.h"
#include "HTMLNames.h"
#include "HTMLTableCaptionElement.h"
#include "HTMLTableElement.h"
#include "HTMLTableSectionElement.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMHTMLCollection.h"
#include "webkit/WebKitDOMHTMLCollectionPrivate.h"
#include "webkit/WebKitDOMHTMLElement.h"
#include "webkit/WebKitDOMHTMLElementPrivate.h"
#include "webkit/WebKitDOMHTMLTableCaptionElement.h"
#include "webkit/WebKitDOMHTMLTableCaptionElementPrivate.h"
#include "webkit/WebKitDOMHTMLTableElement.h"
#include "webkit/WebKitDOMHTMLTableElementPrivate.h"
#include "webkit/WebKitDOMHTMLTableSectionElement.h"
#include "webkit/WebKitDOMHTMLTableSectionElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLTableElement* kit(WebCore::HTMLTableElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLTableElement*>(ret);

    return static_cast<WebKitDOMHTMLTableElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLTableElement(obj)));
}

WebCore::HTMLTableElement* core(WebKitDOMHTMLTableElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLTableElement* coreObject = static_cast<WebCore::HTMLTableElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLTableElement* wrapHTMLTableElement(WebCore::HTMLTableElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_TABLE_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_TABLE_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLTableElement, webkit_dom_html_table_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_CAPTION,
    PROP_T_HEAD,
    PROP_T_FOOT,
    PROP_ROWS,
    PROP_T_BODIES,
    PROP_ALIGN,
    PROP_BG_COLOR,
    PROP_BORDER,
    PROP_CELL_PADDING,
    PROP_CELL_SPACING,
    PROP_FRAME,
    PROP_RULES,
    PROP_SUMMARY,
    PROP_WIDTH,
};

static void webkit_dom_html_table_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLTableElement* coreObject = static_cast<WebCore::HTMLTableElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_table_element_parent_class)->finalize(object);
}

static void webkit_dom_html_table_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLTableElement* self = WEBKIT_DOM_HTML_TABLE_ELEMENT(object);
    WebCore::HTMLTableElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ALIGN:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::alignAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_BG_COLOR:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::bgcolorAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_BORDER:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::borderAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CELL_PADDING:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::cellpaddingAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CELL_SPACING:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::cellspacingAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_FRAME:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::frameAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_RULES:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::rulesAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_SUMMARY:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::summaryAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_WIDTH:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::widthAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_table_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLTableElement* self = WEBKIT_DOM_HTML_TABLE_ELEMENT(object);
    WebCore::HTMLTableElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_CAPTION:
    {
        RefPtr<WebCore::HTMLTableCaptionElement> ptr = coreSelf->caption();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_T_HEAD:
    {
        RefPtr<WebCore::HTMLTableSectionElement> ptr = coreSelf->tHead();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_T_FOOT:
    {
        RefPtr<WebCore::HTMLTableSectionElement> ptr = coreSelf->tFoot();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_ROWS:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->rows();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_T_BODIES:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->tBodies();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_ALIGN:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::alignAttr)));
        break;
    }
    case PROP_BG_COLOR:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::bgcolorAttr)));
        break;
    }
    case PROP_BORDER:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::borderAttr)));
        break;
    }
    case PROP_CELL_PADDING:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::cellpaddingAttr)));
        break;
    }
    case PROP_CELL_SPACING:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::cellspacingAttr)));
        break;
    }
    case PROP_FRAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::frameAttr)));
        break;
    }
    case PROP_RULES:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::rulesAttr)));
        break;
    }
    case PROP_SUMMARY:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::summaryAttr)));
        break;
    }
    case PROP_WIDTH:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::widthAttr)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_table_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_table_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_table_element_parent_class)->constructed(object);
}

static void webkit_dom_html_table_element_class_init(WebKitDOMHTMLTableElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_table_element_finalize;
    gobjectClass->set_property = webkit_dom_html_table_element_set_property;
    gobjectClass->get_property = webkit_dom_html_table_element_get_property;
    gobjectClass->constructed = webkit_dom_html_table_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_CAPTION,
                                    g_param_spec_object("caption", /* name */
                                                           "html_table_element_caption", /* short description */
                                                           "read-write  WebKitDOMHTMLTableCaptionElement* HTMLTableElement.caption", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_TABLE_CAPTION_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_T_HEAD,
                                    g_param_spec_object("t-head", /* name */
                                                           "html_table_element_t-head", /* short description */
                                                           "read-write  WebKitDOMHTMLTableSectionElement* HTMLTableElement.t-head", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_TABLE_SECTION_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_T_FOOT,
                                    g_param_spec_object("t-foot", /* name */
                                                           "html_table_element_t-foot", /* short description */
                                                           "read-write  WebKitDOMHTMLTableSectionElement* HTMLTableElement.t-foot", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_TABLE_SECTION_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ROWS,
                                    g_param_spec_object("rows", /* name */
                                                           "html_table_element_rows", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* HTMLTableElement.rows", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_T_BODIES,
                                    g_param_spec_object("t-bodies", /* name */
                                                           "html_table_element_t-bodies", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* HTMLTableElement.t-bodies", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ALIGN,
                                    g_param_spec_string("align", /* name */
                                                           "html_table_element_align", /* short description */
                                                           "read-write  gchar* HTMLTableElement.align", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BG_COLOR,
                                    g_param_spec_string("bg-color", /* name */
                                                           "html_table_element_bg-color", /* short description */
                                                           "read-write  gchar* HTMLTableElement.bg-color", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BORDER,
                                    g_param_spec_string("border", /* name */
                                                           "html_table_element_border", /* short description */
                                                           "read-write  gchar* HTMLTableElement.border", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CELL_PADDING,
                                    g_param_spec_string("cell-padding", /* name */
                                                           "html_table_element_cell-padding", /* short description */
                                                           "read-write  gchar* HTMLTableElement.cell-padding", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CELL_SPACING,
                                    g_param_spec_string("cell-spacing", /* name */
                                                           "html_table_element_cell-spacing", /* short description */
                                                           "read-write  gchar* HTMLTableElement.cell-spacing", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FRAME,
                                    g_param_spec_string("frame", /* name */
                                                           "html_table_element_frame", /* short description */
                                                           "read-write  gchar* HTMLTableElement.frame", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_RULES,
                                    g_param_spec_string("rules", /* name */
                                                           "html_table_element_rules", /* short description */
                                                           "read-write  gchar* HTMLTableElement.rules", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SUMMARY,
                                    g_param_spec_string("summary", /* name */
                                                           "html_table_element_summary", /* short description */
                                                           "read-write  gchar* HTMLTableElement.summary", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WIDTH,
                                    g_param_spec_string("width", /* name */
                                                           "html_table_element_width", /* short description */
                                                           "read-write  gchar* HTMLTableElement.width", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_html_table_element_init(WebKitDOMHTMLTableElement* request)
{
}

WebKitDOMHTMLElement*
webkit_dom_html_table_element_create_t_head(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLElement> g_res = WTF::getPtr(item->createTHead());
    WebKitDOMHTMLElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_delete_t_head(WebKitDOMHTMLTableElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    item->deleteTHead();
}

WebKitDOMHTMLElement*
webkit_dom_html_table_element_create_t_foot(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLElement> g_res = WTF::getPtr(item->createTFoot());
    WebKitDOMHTMLElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_delete_t_foot(WebKitDOMHTMLTableElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    item->deleteTFoot();
}

WebKitDOMHTMLElement*
webkit_dom_html_table_element_create_caption(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLElement> g_res = WTF::getPtr(item->createCaption());
    WebKitDOMHTMLElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_delete_caption(WebKitDOMHTMLTableElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    item->deleteCaption();
}

WebKitDOMHTMLElement*
webkit_dom_html_table_element_insert_row(WebKitDOMHTMLTableElement* self, glong index, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::HTMLElement> g_res = WTF::getPtr(item->insertRow(index, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMHTMLElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_delete_row(WebKitDOMHTMLTableElement* self, glong index, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->deleteRow(index, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLTableCaptionElement*
webkit_dom_html_table_element_get_caption(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLTableCaptionElement> g_res = WTF::getPtr(item->caption());
    WebKitDOMHTMLTableCaptionElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_set_caption(WebKitDOMHTMLTableElement* self, WebKitDOMHTMLTableCaptionElement* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WebCore::HTMLTableCaptionElement * converted_value = NULL;
    if (value != NULL) {
        converted_value = WebKit::core(value);
        g_return_if_fail(converted_value);
    }
    WebCore::ExceptionCode ec = 0;
    item->setCaption(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLTableSectionElement*
webkit_dom_html_table_element_get_t_head(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLTableSectionElement> g_res = WTF::getPtr(item->tHead());
    WebKitDOMHTMLTableSectionElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_set_t_head(WebKitDOMHTMLTableElement* self, WebKitDOMHTMLTableSectionElement* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WebCore::HTMLTableSectionElement * converted_value = NULL;
    if (value != NULL) {
        converted_value = WebKit::core(value);
        g_return_if_fail(converted_value);
    }
    WebCore::ExceptionCode ec = 0;
    item->setTHead(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLTableSectionElement*
webkit_dom_html_table_element_get_t_foot(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLTableSectionElement> g_res = WTF::getPtr(item->tFoot());
    WebKitDOMHTMLTableSectionElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_table_element_set_t_foot(WebKitDOMHTMLTableElement* self, WebKitDOMHTMLTableSectionElement* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WebCore::HTMLTableSectionElement * converted_value = NULL;
    if (value != NULL) {
        converted_value = WebKit::core(value);
        g_return_if_fail(converted_value);
    }
    WebCore::ExceptionCode ec = 0;
    item->setTFoot(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLCollection*
webkit_dom_html_table_element_get_rows(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->rows());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLCollection*
webkit_dom_html_table_element_get_t_bodies(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->tBodies());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_html_table_element_get_align(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::alignAttr));
    return res;
}

void
webkit_dom_html_table_element_set_align(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::alignAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_bg_color(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::bgcolorAttr));
    return res;
}

void
webkit_dom_html_table_element_set_bg_color(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::bgcolorAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_border(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::borderAttr));
    return res;
}

void
webkit_dom_html_table_element_set_border(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::borderAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_cell_padding(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::cellpaddingAttr));
    return res;
}

void
webkit_dom_html_table_element_set_cell_padding(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::cellpaddingAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_cell_spacing(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::cellspacingAttr));
    return res;
}

void
webkit_dom_html_table_element_set_cell_spacing(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::cellspacingAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_frame(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::frameAttr));
    return res;
}

void
webkit_dom_html_table_element_set_frame(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::frameAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_rules(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::rulesAttr));
    return res;
}

void
webkit_dom_html_table_element_set_rules(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::rulesAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_summary(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::summaryAttr));
    return res;
}

void
webkit_dom_html_table_element_set_summary(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::summaryAttr, converted_value);
}

gchar*
webkit_dom_html_table_element_get_width(WebKitDOMHTMLTableElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::widthAttr));
    return res;
}

void
webkit_dom_html_table_element_set_width(WebKitDOMHTMLTableElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLTableElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::widthAttr, converted_value);
}

