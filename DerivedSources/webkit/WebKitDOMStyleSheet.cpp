/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "MediaList.h"
#include "Node.h"
#include "StyleSheet.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMMediaList.h"
#include "webkit/WebKitDOMMediaListPrivate.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkit/WebKitDOMStyleSheet.h"
#include "webkit/WebKitDOMStyleSheetPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMStyleSheet* kit(WebCore::StyleSheet* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMStyleSheet*>(ret);

    return static_cast<WebKitDOMStyleSheet*>(DOMObjectCache::put(obj, WebKit::wrapStyleSheet(obj)));
}

WebCore::StyleSheet* core(WebKitDOMStyleSheet* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::StyleSheet* coreObject = static_cast<WebCore::StyleSheet*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMStyleSheet* wrapStyleSheet(WebCore::StyleSheet* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_STYLE_SHEET(g_object_new(WEBKIT_TYPE_DOM_STYLE_SHEET,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMStyleSheet, webkit_dom_style_sheet, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_TYPE,
    PROP_DISABLED,
    PROP_OWNER_NODE,
    PROP_PARENT_STYLE_SHEET,
    PROP_HREF,
    PROP_TITLE,
    PROP_MEDIA,
};

static void webkit_dom_style_sheet_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::StyleSheet* coreObject = static_cast<WebCore::StyleSheet *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_style_sheet_parent_class)->finalize(object);
}

static void webkit_dom_style_sheet_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMStyleSheet* self = WEBKIT_DOM_STYLE_SHEET(object);
    WebCore::StyleSheet* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_DISABLED:
    {
        coreSelf->setDisabled((g_value_get_boolean(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_style_sheet_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMStyleSheet* self = WEBKIT_DOM_STYLE_SHEET(object);
    WebCore::StyleSheet* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_TYPE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->type()));
        break;
    }
    case PROP_DISABLED:
    {
        g_value_set_boolean(value, coreSelf->disabled());
        break;
    }
    case PROP_OWNER_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->ownerNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_PARENT_STYLE_SHEET:
    {
        RefPtr<WebCore::StyleSheet> ptr = coreSelf->parentStyleSheet();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_HREF:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->href()));
        break;
    }
    case PROP_TITLE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->title()));
        break;
    }
    case PROP_MEDIA:
    {
        RefPtr<WebCore::MediaList> ptr = coreSelf->media();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_style_sheet_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_style_sheet_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_style_sheet_parent_class)->constructed(object);
}

static void webkit_dom_style_sheet_class_init(WebKitDOMStyleSheetClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_style_sheet_finalize;
    gobjectClass->set_property = webkit_dom_style_sheet_set_property;
    gobjectClass->get_property = webkit_dom_style_sheet_get_property;
    gobjectClass->constructed = webkit_dom_style_sheet_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_TYPE,
                                    g_param_spec_string("type", /* name */
                                                           "style_sheet_type", /* short description */
                                                           "read-only  gchar* StyleSheet.type", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DISABLED,
                                    g_param_spec_boolean("disabled", /* name */
                                                           "style_sheet_disabled", /* short description */
                                                           "read-write  gboolean StyleSheet.disabled", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OWNER_NODE,
                                    g_param_spec_object("owner-node", /* name */
                                                           "style_sheet_owner-node", /* short description */
                                                           "read-only  WebKitDOMNode* StyleSheet.owner-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PARENT_STYLE_SHEET,
                                    g_param_spec_object("parent-style-sheet", /* name */
                                                           "style_sheet_parent-style-sheet", /* short description */
                                                           "read-only  WebKitDOMStyleSheet* StyleSheet.parent-style-sheet", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_STYLE_SHEET, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HREF,
                                    g_param_spec_string("href", /* name */
                                                           "style_sheet_href", /* short description */
                                                           "read-only  gchar* StyleSheet.href", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TITLE,
                                    g_param_spec_string("title", /* name */
                                                           "style_sheet_title", /* short description */
                                                           "read-only  gchar* StyleSheet.title", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_MEDIA,
                                    g_param_spec_object("media", /* name */
                                                           "style_sheet_media", /* short description */
                                                           "read-only  WebKitDOMMediaList* StyleSheet.media", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_MEDIA_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_style_sheet_init(WebKitDOMStyleSheet* request)
{
}

gboolean
webkit_dom_style_sheet_get_disabled(WebKitDOMStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    gboolean res = item->disabled();
    return res;
}

void
webkit_dom_style_sheet_set_disabled(WebKitDOMStyleSheet* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    item->setDisabled(value);
}

WebKitDOMNode*
webkit_dom_style_sheet_get_owner_node(WebKitDOMStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->ownerNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMStyleSheet*
webkit_dom_style_sheet_get_parent_style_sheet(WebKitDOMStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    PassRefPtr<WebCore::StyleSheet> g_res = WTF::getPtr(item->parentStyleSheet());
    WebKitDOMStyleSheet* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_style_sheet_get_href(WebKitDOMStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->href());
    return res;
}

gchar*
webkit_dom_style_sheet_get_title(WebKitDOMStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->title());
    return res;
}

WebKitDOMMediaList*
webkit_dom_style_sheet_get_media(WebKitDOMStyleSheet* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::StyleSheet * item = WebKit::core(self);
    PassRefPtr<WebCore::MediaList> g_res = WTF::getPtr(item->media());
    WebKitDOMMediaList* res = WebKit::kit(g_res.get());
    return res;
}

