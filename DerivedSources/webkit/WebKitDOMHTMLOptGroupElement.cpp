/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "HTMLOptGroupElement.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMHTMLOptGroupElement.h"
#include "webkit/WebKitDOMHTMLOptGroupElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLOptGroupElement* kit(WebCore::HTMLOptGroupElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLOptGroupElement*>(ret);

    return static_cast<WebKitDOMHTMLOptGroupElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLOptGroupElement(obj)));
}

WebCore::HTMLOptGroupElement* core(WebKitDOMHTMLOptGroupElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLOptGroupElement* coreObject = static_cast<WebCore::HTMLOptGroupElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLOptGroupElement* wrapHTMLOptGroupElement(WebCore::HTMLOptGroupElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_OPT_GROUP_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_OPT_GROUP_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLOptGroupElement, webkit_dom_html_opt_group_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_DISABLED,
    PROP_LABEL,
};

static void webkit_dom_html_opt_group_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLOptGroupElement* coreObject = static_cast<WebCore::HTMLOptGroupElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_opt_group_element_parent_class)->finalize(object);
}

static void webkit_dom_html_opt_group_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLOptGroupElement* self = WEBKIT_DOM_HTML_OPT_GROUP_ELEMENT(object);
    WebCore::HTMLOptGroupElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_DISABLED:
    {
        coreSelf->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, (g_value_get_boolean(value)));
        break;
    }
    case PROP_LABEL:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::labelAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_opt_group_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLOptGroupElement* self = WEBKIT_DOM_HTML_OPT_GROUP_ELEMENT(object);
    WebCore::HTMLOptGroupElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_DISABLED:
    {
        g_value_set_boolean(value, coreSelf->hasAttribute(WebCore::HTMLNames::disabledAttr));
        break;
    }
    case PROP_LABEL:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::labelAttr)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_opt_group_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_opt_group_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_opt_group_element_parent_class)->constructed(object);
}

static void webkit_dom_html_opt_group_element_class_init(WebKitDOMHTMLOptGroupElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_opt_group_element_finalize;
    gobjectClass->set_property = webkit_dom_html_opt_group_element_set_property;
    gobjectClass->get_property = webkit_dom_html_opt_group_element_get_property;
    gobjectClass->constructed = webkit_dom_html_opt_group_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_DISABLED,
                                    g_param_spec_boolean("disabled", /* name */
                                                           "html_opt_group_element_disabled", /* short description */
                                                           "read-write  gboolean HTMLOptGroupElement.disabled", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LABEL,
                                    g_param_spec_string("label", /* name */
                                                           "html_opt_group_element_label", /* short description */
                                                           "read-write  gchar* HTMLOptGroupElement.label", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_html_opt_group_element_init(WebKitDOMHTMLOptGroupElement* request)
{
}

gboolean
webkit_dom_html_opt_group_element_get_disabled(WebKitDOMHTMLOptGroupElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLOptGroupElement * item = WebKit::core(self);
    gboolean res = item->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return res;
}

void
webkit_dom_html_opt_group_element_set_disabled(WebKitDOMHTMLOptGroupElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLOptGroupElement * item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, value);
}

gchar*
webkit_dom_html_opt_group_element_get_label(WebKitDOMHTMLOptGroupElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLOptGroupElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::labelAttr));
    return res;
}

void
webkit_dom_html_opt_group_element_set_label(WebKitDOMHTMLOptGroupElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLOptGroupElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::labelAttr, converted_value);
}

