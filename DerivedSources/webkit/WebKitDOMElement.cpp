/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "Attr.h"
#include "CSSStyleDeclaration.h"
#include "DOMObjectCache.h"
#include "Element.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "NodeList.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMAttr.h"
#include "webkit/WebKitDOMAttrPrivate.h"
#include "webkit/WebKitDOMCSSStyleDeclaration.h"
#include "webkit/WebKitDOMCSSStyleDeclarationPrivate.h"
#include "webkit/WebKitDOMElement.h"
#include "webkit/WebKitDOMElementPrivate.h"
#include "webkit/WebKitDOMNodeList.h"
#include "webkit/WebKitDOMNodeListPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebCore::Element* core(WebKitDOMElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Element* coreObject = static_cast<WebCore::Element*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMElement* wrapElement(WebCore::Element* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMElement, webkit_dom_element, WEBKIT_TYPE_DOM_NODE)

enum {
    PROP_0,
    PROP_TAG_NAME,
    PROP_STYLE,
    PROP_OFFSET_LEFT,
    PROP_OFFSET_TOP,
    PROP_OFFSET_WIDTH,
    PROP_OFFSET_HEIGHT,
    PROP_OFFSET_PARENT,
    PROP_CLIENT_LEFT,
    PROP_CLIENT_TOP,
    PROP_CLIENT_WIDTH,
    PROP_CLIENT_HEIGHT,
    PROP_SCROLL_LEFT,
    PROP_SCROLL_TOP,
    PROP_SCROLL_WIDTH,
    PROP_SCROLL_HEIGHT,
    PROP_FIRST_ELEMENT_CHILD,
    PROP_LAST_ELEMENT_CHILD,
    PROP_PREVIOUS_ELEMENT_SIBLING,
    PROP_NEXT_ELEMENT_SIBLING,
    PROP_CHILD_ELEMENT_COUNT,
    PROP_WEBKIT_REGION_OVERFLOW,
};

static void webkit_dom_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Element* coreObject = static_cast<WebCore::Element *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_element_parent_class)->finalize(object);
}

static void webkit_dom_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMElement* self = WEBKIT_DOM_ELEMENT(object);
    WebCore::Element* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_SCROLL_LEFT:
    {
        coreSelf->setScrollLeft((g_value_get_long(value)));
        break;
    }
    case PROP_SCROLL_TOP:
    {
        coreSelf->setScrollTop((g_value_get_long(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMElement* self = WEBKIT_DOM_ELEMENT(object);
    WebCore::Element* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_TAG_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->tagName()));
        break;
    }
    case PROP_STYLE:
    {
        RefPtr<WebCore::CSSStyleDeclaration> ptr = coreSelf->style();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_OFFSET_LEFT:
    {
        g_value_set_long(value, coreSelf->offsetLeft());
        break;
    }
    case PROP_OFFSET_TOP:
    {
        g_value_set_long(value, coreSelf->offsetTop());
        break;
    }
    case PROP_OFFSET_WIDTH:
    {
        g_value_set_long(value, coreSelf->offsetWidth());
        break;
    }
    case PROP_OFFSET_HEIGHT:
    {
        g_value_set_long(value, coreSelf->offsetHeight());
        break;
    }
    case PROP_OFFSET_PARENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->offsetParent();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CLIENT_LEFT:
    {
        g_value_set_long(value, coreSelf->clientLeft());
        break;
    }
    case PROP_CLIENT_TOP:
    {
        g_value_set_long(value, coreSelf->clientTop());
        break;
    }
    case PROP_CLIENT_WIDTH:
    {
        g_value_set_long(value, coreSelf->clientWidth());
        break;
    }
    case PROP_CLIENT_HEIGHT:
    {
        g_value_set_long(value, coreSelf->clientHeight());
        break;
    }
    case PROP_SCROLL_LEFT:
    {
        g_value_set_long(value, coreSelf->scrollLeft());
        break;
    }
    case PROP_SCROLL_TOP:
    {
        g_value_set_long(value, coreSelf->scrollTop());
        break;
    }
    case PROP_SCROLL_WIDTH:
    {
        g_value_set_long(value, coreSelf->scrollWidth());
        break;
    }
    case PROP_SCROLL_HEIGHT:
    {
        g_value_set_long(value, coreSelf->scrollHeight());
        break;
    }
    case PROP_FIRST_ELEMENT_CHILD:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->firstElementChild();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_LAST_ELEMENT_CHILD:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->lastElementChild();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_PREVIOUS_ELEMENT_SIBLING:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->previousElementSibling();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_NEXT_ELEMENT_SIBLING:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->nextElementSibling();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CHILD_ELEMENT_COUNT:
    {
        g_value_set_ulong(value, coreSelf->childElementCount());
        break;
    }
    case PROP_WEBKIT_REGION_OVERFLOW:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->webkitRegionOverflow()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_element_parent_class)->constructed(object);
}

static void webkit_dom_element_class_init(WebKitDOMElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_element_finalize;
    gobjectClass->set_property = webkit_dom_element_set_property;
    gobjectClass->get_property = webkit_dom_element_get_property;
    gobjectClass->constructed = webkit_dom_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_TAG_NAME,
                                    g_param_spec_string("tag-name", /* name */
                                                           "element_tag-name", /* short description */
                                                           "read-only  gchar* Element.tag-name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_STYLE,
                                    g_param_spec_object("style", /* name */
                                                           "element_style", /* short description */
                                                           "read-only  WebKitDOMCSSStyleDeclaration* Element.style", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_CSS_STYLE_DECLARATION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OFFSET_LEFT,
                                    g_param_spec_long("offset-left", /* name */
                                                           "element_offset-left", /* short description */
                                                           "read-only  glong Element.offset-left", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OFFSET_TOP,
                                    g_param_spec_long("offset-top", /* name */
                                                           "element_offset-top", /* short description */
                                                           "read-only  glong Element.offset-top", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OFFSET_WIDTH,
                                    g_param_spec_long("offset-width", /* name */
                                                           "element_offset-width", /* short description */
                                                           "read-only  glong Element.offset-width", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OFFSET_HEIGHT,
                                    g_param_spec_long("offset-height", /* name */
                                                           "element_offset-height", /* short description */
                                                           "read-only  glong Element.offset-height", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OFFSET_PARENT,
                                    g_param_spec_object("offset-parent", /* name */
                                                           "element_offset-parent", /* short description */
                                                           "read-only  WebKitDOMElement* Element.offset-parent", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLIENT_LEFT,
                                    g_param_spec_long("client-left", /* name */
                                                           "element_client-left", /* short description */
                                                           "read-only  glong Element.client-left", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLIENT_TOP,
                                    g_param_spec_long("client-top", /* name */
                                                           "element_client-top", /* short description */
                                                           "read-only  glong Element.client-top", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLIENT_WIDTH,
                                    g_param_spec_long("client-width", /* name */
                                                           "element_client-width", /* short description */
                                                           "read-only  glong Element.client-width", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLIENT_HEIGHT,
                                    g_param_spec_long("client-height", /* name */
                                                           "element_client-height", /* short description */
                                                           "read-only  glong Element.client-height", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_LEFT,
                                    g_param_spec_long("scroll-left", /* name */
                                                           "element_scroll-left", /* short description */
                                                           "read-write  glong Element.scroll-left", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_TOP,
                                    g_param_spec_long("scroll-top", /* name */
                                                           "element_scroll-top", /* short description */
                                                           "read-write  glong Element.scroll-top", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_WIDTH,
                                    g_param_spec_long("scroll-width", /* name */
                                                           "element_scroll-width", /* short description */
                                                           "read-only  glong Element.scroll-width", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_HEIGHT,
                                    g_param_spec_long("scroll-height", /* name */
                                                           "element_scroll-height", /* short description */
                                                           "read-only  glong Element.scroll-height", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FIRST_ELEMENT_CHILD,
                                    g_param_spec_object("first-element-child", /* name */
                                                           "element_first-element-child", /* short description */
                                                           "read-only  WebKitDOMElement* Element.first-element-child", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LAST_ELEMENT_CHILD,
                                    g_param_spec_object("last-element-child", /* name */
                                                           "element_last-element-child", /* short description */
                                                           "read-only  WebKitDOMElement* Element.last-element-child", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PREVIOUS_ELEMENT_SIBLING,
                                    g_param_spec_object("previous-element-sibling", /* name */
                                                           "element_previous-element-sibling", /* short description */
                                                           "read-only  WebKitDOMElement* Element.previous-element-sibling", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NEXT_ELEMENT_SIBLING,
                                    g_param_spec_object("next-element-sibling", /* name */
                                                           "element_next-element-sibling", /* short description */
                                                           "read-only  WebKitDOMElement* Element.next-element-sibling", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CHILD_ELEMENT_COUNT,
                                    g_param_spec_ulong("child-element-count", /* name */
                                                           "element_child-element-count", /* short description */
                                                           "read-only  gulong Element.child-element-count", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXULONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_REGION_OVERFLOW,
                                    g_param_spec_string("webkit-region-overflow", /* name */
                                                           "element_webkit-region-overflow", /* short description */
                                                           "read-only  gchar* Element.webkit-region-overflow", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_element_init(WebKitDOMElement* request)
{
}

gchar*
webkit_dom_element_get_attribute(WebKitDOMElement* self, const gchar* name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    gchar* res = convertToUTF8String(item->getAttribute(converted_name));
    return res;
}

void
webkit_dom_element_set_attribute(WebKitDOMElement* self, const gchar* name, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_if_fail(name);
    g_return_if_fail(value);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setAttribute(converted_name, converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_element_remove_attribute(WebKitDOMElement* self, const gchar* name)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_if_fail(name);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    item->removeAttribute(converted_name);
}

WebKitDOMAttr*
webkit_dom_element_get_attribute_node(WebKitDOMElement* self, const gchar* name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->getAttributeNode(converted_name));
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMAttr*
webkit_dom_element_set_attribute_node(WebKitDOMElement* self, WebKitDOMAttr* new_attr, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(new_attr, 0);
    WebCore::Attr * converted_new_attr = NULL;
    if (new_attr != NULL) {
        converted_new_attr = WebKit::core(new_attr);
        g_return_val_if_fail(converted_new_attr, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->setAttributeNode(converted_new_attr, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMAttr*
webkit_dom_element_remove_attribute_node(WebKitDOMElement* self, WebKitDOMAttr* old_attr, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(old_attr, 0);
    WebCore::Attr * converted_old_attr = NULL;
    if (old_attr != NULL) {
        converted_old_attr = WebKit::core(old_attr);
        g_return_val_if_fail(converted_old_attr, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->removeAttributeNode(converted_old_attr, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_element_get_elements_by_tag_name(WebKitDOMElement* self, const gchar* name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByTagName(converted_name));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_element_get_attribute_ns(WebKitDOMElement* self, const gchar* namespace_uri, const gchar* local_name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(local_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_local_name = WTF::String::fromUTF8(local_name);
    gchar* res = convertToUTF8String(item->getAttributeNS(converted_namespace_uri, converted_local_name));
    return res;
}

void
webkit_dom_element_set_attribute_ns(WebKitDOMElement* self, const gchar* namespace_uri, const gchar* qualified_name, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_if_fail(namespace_uri);
    g_return_if_fail(qualified_name);
    g_return_if_fail(value);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_qualified_name = WTF::String::fromUTF8(qualified_name);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setAttributeNS(converted_namespace_uri, converted_qualified_name, converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_element_remove_attribute_ns(WebKitDOMElement* self, const gchar* namespace_uri, const gchar* local_name)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_if_fail(namespace_uri);
    g_return_if_fail(local_name);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_local_name = WTF::String::fromUTF8(local_name);
    item->removeAttributeNS(converted_namespace_uri, converted_local_name);
}

WebKitDOMNodeList*
webkit_dom_element_get_elements_by_tag_name_ns(WebKitDOMElement* self, const gchar* namespace_uri, const gchar* local_name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(local_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_local_name = WTF::String::fromUTF8(local_name);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByTagNameNS(converted_namespace_uri, converted_local_name));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMAttr*
webkit_dom_element_get_attribute_node_ns(WebKitDOMElement* self, const gchar* namespace_uri, const gchar* local_name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(local_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_local_name = WTF::String::fromUTF8(local_name);
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->getAttributeNodeNS(converted_namespace_uri, converted_local_name));
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMAttr*
webkit_dom_element_set_attribute_node_ns(WebKitDOMElement* self, WebKitDOMAttr* new_attr, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(new_attr, 0);
    WebCore::Attr * converted_new_attr = NULL;
    if (new_attr != NULL) {
        converted_new_attr = WebKit::core(new_attr);
        g_return_val_if_fail(converted_new_attr, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->setAttributeNodeNS(converted_new_attr, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_element_has_attribute(WebKitDOMElement* self, const gchar* name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    gboolean res = item->hasAttribute(converted_name);
    return res;
}

gboolean
webkit_dom_element_has_attribute_ns(WebKitDOMElement* self, const gchar* namespace_uri, const gchar* local_name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(local_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_local_name = WTF::String::fromUTF8(local_name);
    gboolean res = item->hasAttributeNS(converted_namespace_uri, converted_local_name);
    return res;
}

void
webkit_dom_element_focus(WebKitDOMElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->focus();
}

void
webkit_dom_element_blur(WebKitDOMElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->blur();
}

void
webkit_dom_element_scroll_into_view(WebKitDOMElement* self, gboolean align_with_top)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->scrollIntoView(align_with_top);
}

void
webkit_dom_element_scroll_into_view_if_needed(WebKitDOMElement* self, gboolean center_if_needed)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->scrollIntoViewIfNeeded(center_if_needed);
}

void
webkit_dom_element_scroll_by_lines(WebKitDOMElement* self, glong lines)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->scrollByLines(lines);
}

void
webkit_dom_element_scroll_by_pages(WebKitDOMElement* self, glong pages)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->scrollByPages(pages);
}

WebKitDOMNodeList*
webkit_dom_element_get_elements_by_class_name(WebKitDOMElement* self, const gchar* name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByClassName(converted_name));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_element_query_selector(WebKitDOMElement* self, const gchar* selectors, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(selectors, 0);
    WTF::String converted_selectors = WTF::String::fromUTF8(selectors);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->querySelector(converted_selectors, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_element_query_selector_all(WebKitDOMElement* self, const gchar* selectors, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(selectors, 0);
    WTF::String converted_selectors = WTF::String::fromUTF8(selectors);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->querySelectorAll(converted_selectors, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_element_webkit_matches_selector(WebKitDOMElement* self, const gchar* selectors, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    g_return_val_if_fail(selectors, 0);
    WTF::String converted_selectors = WTF::String::fromUTF8(selectors);
    WebCore::ExceptionCode ec = 0;
    gboolean res = item->webkitMatchesSelector(converted_selectors, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

void
webkit_dom_element_webkit_request_full_screen(WebKitDOMElement* self, gushort flags)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->webkitRequestFullScreen(flags);
}

void
webkit_dom_element_webkit_request_fullscreen(WebKitDOMElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->webkitRequestFullscreen();
}

gchar*
webkit_dom_element_get_tag_name(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->tagName());
    return res;
}

WebKitDOMCSSStyleDeclaration*
webkit_dom_element_get_style(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    PassRefPtr<WebCore::CSSStyleDeclaration> g_res = WTF::getPtr(item->style());
    WebKitDOMCSSStyleDeclaration* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_element_get_offset_left(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->offsetLeft();
    return res;
}

glong
webkit_dom_element_get_offset_top(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->offsetTop();
    return res;
}

glong
webkit_dom_element_get_offset_width(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->offsetWidth();
    return res;
}

glong
webkit_dom_element_get_offset_height(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->offsetHeight();
    return res;
}

WebKitDOMElement*
webkit_dom_element_get_offset_parent(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->offsetParent());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_element_get_client_left(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->clientLeft();
    return res;
}

glong
webkit_dom_element_get_client_top(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->clientTop();
    return res;
}

glong
webkit_dom_element_get_client_width(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->clientWidth();
    return res;
}

glong
webkit_dom_element_get_client_height(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->clientHeight();
    return res;
}

glong
webkit_dom_element_get_scroll_left(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->scrollLeft();
    return res;
}

void
webkit_dom_element_set_scroll_left(WebKitDOMElement* self, glong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->setScrollLeft(value);
}

glong
webkit_dom_element_get_scroll_top(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->scrollTop();
    return res;
}

void
webkit_dom_element_set_scroll_top(WebKitDOMElement* self, glong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    item->setScrollTop(value);
}

glong
webkit_dom_element_get_scroll_width(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->scrollWidth();
    return res;
}

glong
webkit_dom_element_get_scroll_height(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    glong res = item->scrollHeight();
    return res;
}

WebKitDOMElement*
webkit_dom_element_get_first_element_child(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->firstElementChild());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_element_get_last_element_child(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->lastElementChild());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_element_get_previous_element_sibling(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->previousElementSibling());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_element_get_next_element_sibling(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->nextElementSibling());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

gulong
webkit_dom_element_get_child_element_count(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    gulong res = item->childElementCount();
    return res;
}

gchar*
webkit_dom_element_get_webkit_region_overflow(WebKitDOMElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Element * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->webkitRegionOverflow());
    return res;
}

