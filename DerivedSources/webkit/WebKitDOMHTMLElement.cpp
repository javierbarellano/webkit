/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "DOMSettableTokenList.h"
#include "DOMTokenList.h"
#include "Element.h"
#include "ExceptionCode.h"
#include "HTMLCollection.h"
#include "HTMLElement.h"
#include "HTMLNames.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMDOMSettableTokenList.h"
#include "webkit/WebKitDOMDOMSettableTokenListPrivate.h"
#include "webkit/WebKitDOMDOMTokenList.h"
#include "webkit/WebKitDOMDOMTokenListPrivate.h"
#include "webkit/WebKitDOMElement.h"
#include "webkit/WebKitDOMElementPrivate.h"
#include "webkit/WebKitDOMHTMLCollection.h"
#include "webkit/WebKitDOMHTMLCollectionPrivate.h"
#include "webkit/WebKitDOMHTMLElement.h"
#include "webkit/WebKitDOMHTMLElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLElement* kit(WebCore::HTMLElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLElement*>(ret);

    return static_cast<WebKitDOMHTMLElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLElement(obj)));
}

WebCore::HTMLElement* core(WebKitDOMHTMLElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLElement* coreObject = static_cast<WebCore::HTMLElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLElement* wrapHTMLElement(WebCore::HTMLElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLElement, webkit_dom_html_element, WEBKIT_TYPE_DOM_ELEMENT)

enum {
    PROP_0,
    PROP_ID,
    PROP_TITLE,
    PROP_LANG,
    PROP_TRANSLATE,
    PROP_DIR,
    PROP_CLASS_NAME,
    PROP_CLASS_LIST,
    PROP_TAB_INDEX,
    PROP_DRAGGABLE,
    PROP_WEBKITDROPZONE,
    PROP_HIDDEN,
    PROP_ACCESS_KEY,
    PROP_INNER_HTML,
    PROP_INNER_TEXT,
    PROP_OUTER_HTML,
    PROP_OUTER_TEXT,
    PROP_CHILDREN,
    PROP_CONTENT_EDITABLE,
    PROP_IS_CONTENT_EDITABLE,
    PROP_SPELLCHECK,
#if ENABLE(MICRODATA)
    PROP_ITEM_SCOPE,
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    PROP_ITEM_TYPE,
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    PROP_ITEM_ID,
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    PROP_ITEM_REF,
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    PROP_ITEM_PROP,
#endif /* ENABLE(MICRODATA) */
};

static void webkit_dom_html_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLElement* coreObject = static_cast<WebCore::HTMLElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_element_parent_class)->finalize(object);
}

static void webkit_dom_html_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLElement* self = WEBKIT_DOM_HTML_ELEMENT(object);
    WebCore::HTMLElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ID:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::idAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_TITLE:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::titleAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_LANG:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::langAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_TRANSLATE:
    {
        coreSelf->setTranslate((g_value_get_boolean(value)));
        break;
    }
    case PROP_DIR:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::dirAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CLASS_NAME:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::classAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_TAB_INDEX:
    {
        coreSelf->setTabIndex((g_value_get_long(value)));
        break;
    }
    case PROP_DRAGGABLE:
    {
        coreSelf->setDraggable((g_value_get_boolean(value)));
        break;
    }
    case PROP_WEBKITDROPZONE:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::webkitdropzoneAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HIDDEN:
    {
        coreSelf->setBooleanAttribute(WebCore::HTMLNames::hiddenAttr, (g_value_get_boolean(value)));
        break;
    }
    case PROP_ACCESS_KEY:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::accesskeyAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_INNER_HTML:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setInnerHTML(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_INNER_TEXT:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setInnerText(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_OUTER_HTML:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setOuterHTML(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_OUTER_TEXT:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setOuterText(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_CONTENT_EDITABLE:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setContentEditable(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_SPELLCHECK:
    {
        coreSelf->setSpellcheck((g_value_get_boolean(value)));
        break;
    }
#if ENABLE(MICRODATA)
    case PROP_ITEM_SCOPE:
    {
        coreSelf->setBooleanAttribute(WebCore::HTMLNames::itemscopeAttr, (g_value_get_boolean(value)));
        break;
    }
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    case PROP_ITEM_ID:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::itemidAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
#endif /* ENABLE(MICRODATA) */
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLElement* self = WEBKIT_DOM_HTML_ELEMENT(object);
    WebCore::HTMLElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ID:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::idAttr)));
        break;
    }
    case PROP_TITLE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::titleAttr)));
        break;
    }
    case PROP_LANG:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::langAttr)));
        break;
    }
    case PROP_TRANSLATE:
    {
        g_value_set_boolean(value, coreSelf->translate());
        break;
    }
    case PROP_DIR:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::dirAttr)));
        break;
    }
    case PROP_CLASS_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::classAttr)));
        break;
    }
    case PROP_CLASS_LIST:
    {
        RefPtr<WebCore::DOMTokenList> ptr = coreSelf->classList();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_TAB_INDEX:
    {
        g_value_set_long(value, coreSelf->tabIndex());
        break;
    }
    case PROP_DRAGGABLE:
    {
        g_value_set_boolean(value, coreSelf->draggable());
        break;
    }
    case PROP_WEBKITDROPZONE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::webkitdropzoneAttr)));
        break;
    }
    case PROP_HIDDEN:
    {
        g_value_set_boolean(value, coreSelf->hasAttribute(WebCore::HTMLNames::hiddenAttr));
        break;
    }
    case PROP_ACCESS_KEY:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::accesskeyAttr)));
        break;
    }
    case PROP_INNER_HTML:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->innerHTML()));
        break;
    }
    case PROP_INNER_TEXT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->innerText()));
        break;
    }
    case PROP_OUTER_HTML:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->outerHTML()));
        break;
    }
    case PROP_OUTER_TEXT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->outerText()));
        break;
    }
    case PROP_CHILDREN:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->children();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CONTENT_EDITABLE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->contentEditable()));
        break;
    }
    case PROP_IS_CONTENT_EDITABLE:
    {
        g_value_set_boolean(value, coreSelf->isContentEditable());
        break;
    }
    case PROP_SPELLCHECK:
    {
        g_value_set_boolean(value, coreSelf->spellcheck());
        break;
    }
#if ENABLE(MICRODATA)
    case PROP_ITEM_SCOPE:
    {
        g_value_set_boolean(value, coreSelf->hasAttribute(WebCore::HTMLNames::itemscopeAttr));
        break;
    }
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    case PROP_ITEM_TYPE:
    {
        RefPtr<WebCore::DOMSettableTokenList> ptr = coreSelf->itemType();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    case PROP_ITEM_ID:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getURLAttribute(WebCore::HTMLNames::itemidAttr)));
        break;
    }
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    case PROP_ITEM_REF:
    {
        RefPtr<WebCore::DOMSettableTokenList> ptr = coreSelf->itemRef();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    case PROP_ITEM_PROP:
    {
        RefPtr<WebCore::DOMSettableTokenList> ptr = coreSelf->itemProp();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
#endif /* ENABLE(MICRODATA) */
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_element_parent_class)->constructed(object);
}

static void webkit_dom_html_element_class_init(WebKitDOMHTMLElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_element_finalize;
    gobjectClass->set_property = webkit_dom_html_element_set_property;
    gobjectClass->get_property = webkit_dom_html_element_get_property;
    gobjectClass->constructed = webkit_dom_html_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_ID,
                                    g_param_spec_string("id", /* name */
                                                           "html_element_id", /* short description */
                                                           "read-write  gchar* HTMLElement.id", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TITLE,
                                    g_param_spec_string("title", /* name */
                                                           "html_element_title", /* short description */
                                                           "read-write  gchar* HTMLElement.title", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LANG,
                                    g_param_spec_string("lang", /* name */
                                                           "html_element_lang", /* short description */
                                                           "read-write  gchar* HTMLElement.lang", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TRANSLATE,
                                    g_param_spec_boolean("translate", /* name */
                                                           "html_element_translate", /* short description */
                                                           "read-write  gboolean HTMLElement.translate", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DIR,
                                    g_param_spec_string("dir", /* name */
                                                           "html_element_dir", /* short description */
                                                           "read-write  gchar* HTMLElement.dir", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLASS_NAME,
                                    g_param_spec_string("class-name", /* name */
                                                           "html_element_class-name", /* short description */
                                                           "read-write  gchar* HTMLElement.class-name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLASS_LIST,
                                    g_param_spec_object("class-list", /* name */
                                                           "html_element_class-list", /* short description */
                                                           "read-only  WebKitDOMDOMTokenList* HTMLElement.class-list", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_TOKEN_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TAB_INDEX,
                                    g_param_spec_long("tab-index", /* name */
                                                           "html_element_tab-index", /* short description */
                                                           "read-write  glong HTMLElement.tab-index", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DRAGGABLE,
                                    g_param_spec_boolean("draggable", /* name */
                                                           "html_element_draggable", /* short description */
                                                           "read-write  gboolean HTMLElement.draggable", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKITDROPZONE,
                                    g_param_spec_string("webkitdropzone", /* name */
                                                           "html_element_webkitdropzone", /* short description */
                                                           "read-write  gchar* HTMLElement.webkitdropzone", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HIDDEN,
                                    g_param_spec_boolean("hidden", /* name */
                                                           "html_element_hidden", /* short description */
                                                           "read-write  gboolean HTMLElement.hidden", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ACCESS_KEY,
                                    g_param_spec_string("access-key", /* name */
                                                           "html_element_access-key", /* short description */
                                                           "read-write  gchar* HTMLElement.access-key", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_INNER_HTML,
                                    g_param_spec_string("inner-html", /* name */
                                                           "html_element_inner-html", /* short description */
                                                           "read-write  gchar* HTMLElement.inner-html", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_INNER_TEXT,
                                    g_param_spec_string("inner-text", /* name */
                                                           "html_element_inner-text", /* short description */
                                                           "read-write  gchar* HTMLElement.inner-text", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OUTER_HTML,
                                    g_param_spec_string("outer-html", /* name */
                                                           "html_element_outer-html", /* short description */
                                                           "read-write  gchar* HTMLElement.outer-html", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OUTER_TEXT,
                                    g_param_spec_string("outer-text", /* name */
                                                           "html_element_outer-text", /* short description */
                                                           "read-write  gchar* HTMLElement.outer-text", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CHILDREN,
                                    g_param_spec_object("children", /* name */
                                                           "html_element_children", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* HTMLElement.children", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CONTENT_EDITABLE,
                                    g_param_spec_string("content-editable", /* name */
                                                           "html_element_content-editable", /* short description */
                                                           "read-write  gchar* HTMLElement.content-editable", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_IS_CONTENT_EDITABLE,
                                    g_param_spec_boolean("is-content-editable", /* name */
                                                           "html_element_is-content-editable", /* short description */
                                                           "read-only  gboolean HTMLElement.is-content-editable", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SPELLCHECK,
                                    g_param_spec_boolean("spellcheck", /* name */
                                                           "html_element_spellcheck", /* short description */
                                                           "read-write  gboolean HTMLElement.spellcheck", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
#if ENABLE(MICRODATA)
    g_object_class_install_property(gobjectClass,
                                    PROP_ITEM_SCOPE,
                                    g_param_spec_boolean("item-scope", /* name */
                                                           "html_element_item-scope", /* short description */
                                                           "read-write  gboolean HTMLElement.item-scope", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    g_object_class_install_property(gobjectClass,
                                    PROP_ITEM_TYPE,
                                    g_param_spec_object("item-type", /* name */
                                                           "html_element_item-type", /* short description */
                                                           "read-only  WebKitDOMDOMSettableTokenList* HTMLElement.item-type", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_SETTABLE_TOKEN_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    g_object_class_install_property(gobjectClass,
                                    PROP_ITEM_ID,
                                    g_param_spec_string("item-id", /* name */
                                                           "html_element_item-id", /* short description */
                                                           "read-write  gchar* HTMLElement.item-id", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    g_object_class_install_property(gobjectClass,
                                    PROP_ITEM_REF,
                                    g_param_spec_object("item-ref", /* name */
                                                           "html_element_item-ref", /* short description */
                                                           "read-only  WebKitDOMDOMSettableTokenList* HTMLElement.item-ref", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_SETTABLE_TOKEN_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
#endif /* ENABLE(MICRODATA) */
#if ENABLE(MICRODATA)
    g_object_class_install_property(gobjectClass,
                                    PROP_ITEM_PROP,
                                    g_param_spec_object("item-prop", /* name */
                                                           "html_element_item-prop", /* short description */
                                                           "read-only  WebKitDOMDOMSettableTokenList* HTMLElement.item-prop", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_SETTABLE_TOKEN_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
#endif /* ENABLE(MICRODATA) */


}

static void webkit_dom_html_element_init(WebKitDOMHTMLElement* request)
{
}

WebKitDOMElement*
webkit_dom_html_element_insert_adjacent_element(WebKitDOMHTMLElement* self, const gchar* where, WebKitDOMElement* element, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_val_if_fail(where, 0);
    g_return_val_if_fail(element, 0);
    WTF::String converted_where = WTF::String::fromUTF8(where);
    WebCore::Element * converted_element = NULL;
    if (element != NULL) {
        converted_element = WebKit::core(element);
        g_return_val_if_fail(converted_element, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->insertAdjacentElement(converted_where, converted_element, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_html_element_insert_adjacent_html(WebKitDOMHTMLElement* self, const gchar* where, const gchar* html, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(where);
    g_return_if_fail(html);
    WTF::String converted_where = WTF::String::fromUTF8(where);
    WTF::String converted_html = WTF::String::fromUTF8(html);
    WebCore::ExceptionCode ec = 0;
    item->insertAdjacentHTML(converted_where, converted_html, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_html_element_insert_adjacent_text(WebKitDOMHTMLElement* self, const gchar* where, const gchar* text, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(where);
    g_return_if_fail(text);
    WTF::String converted_where = WTF::String::fromUTF8(where);
    WTF::String converted_text = WTF::String::fromUTF8(text);
    WebCore::ExceptionCode ec = 0;
    item->insertAdjacentText(converted_where, converted_text, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

void
webkit_dom_html_element_click(WebKitDOMHTMLElement* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->click();
}

gchar*
webkit_dom_html_element_get_id(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::idAttr));
    return res;
}

void
webkit_dom_html_element_set_id(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::idAttr, converted_value);
}

gchar*
webkit_dom_html_element_get_title(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::titleAttr));
    return res;
}

void
webkit_dom_html_element_set_title(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::titleAttr, converted_value);
}

gchar*
webkit_dom_html_element_get_lang(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::langAttr));
    return res;
}

void
webkit_dom_html_element_set_lang(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::langAttr, converted_value);
}

gboolean
webkit_dom_html_element_get_translate(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gboolean res = item->translate();
    return res;
}

void
webkit_dom_html_element_set_translate(WebKitDOMHTMLElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->setTranslate(value);
}

gchar*
webkit_dom_html_element_get_dir(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::dirAttr));
    return res;
}

void
webkit_dom_html_element_set_dir(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::dirAttr, converted_value);
}

gchar*
webkit_dom_html_element_get_class_name(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::classAttr));
    return res;
}

void
webkit_dom_html_element_set_class_name(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::classAttr, converted_value);
}

WebKitDOMDOMTokenList*
webkit_dom_html_element_get_class_list(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMTokenList> g_res = WTF::getPtr(item->classList());
    WebKitDOMDOMTokenList* res = WebKit::kit(g_res.get());
    return res;
}

glong
webkit_dom_html_element_get_tab_index(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    glong res = item->tabIndex();
    return res;
}

void
webkit_dom_html_element_set_tab_index(WebKitDOMHTMLElement* self, glong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->setTabIndex(value);
}

gboolean
webkit_dom_html_element_get_draggable(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gboolean res = item->draggable();
    return res;
}

void
webkit_dom_html_element_set_draggable(WebKitDOMHTMLElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->setDraggable(value);
}

gchar*
webkit_dom_html_element_get_webkitdropzone(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::webkitdropzoneAttr));
    return res;
}

void
webkit_dom_html_element_set_webkitdropzone(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::webkitdropzoneAttr, converted_value);
}

gboolean
webkit_dom_html_element_get_hidden(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gboolean res = item->hasAttribute(WebCore::HTMLNames::hiddenAttr);
    return res;
}

void
webkit_dom_html_element_set_hidden(WebKitDOMHTMLElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::hiddenAttr, value);
}

gchar*
webkit_dom_html_element_get_access_key(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::accesskeyAttr));
    return res;
}

void
webkit_dom_html_element_set_access_key(WebKitDOMHTMLElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::accesskeyAttr, converted_value);
}

gchar*
webkit_dom_html_element_get_inner_html(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->innerHTML());
    return res;
}

void
webkit_dom_html_element_set_inner_html(WebKitDOMHTMLElement* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setInnerHTML(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gchar*
webkit_dom_html_element_get_inner_text(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->innerText());
    return res;
}

void
webkit_dom_html_element_set_inner_text(WebKitDOMHTMLElement* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setInnerText(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gchar*
webkit_dom_html_element_get_outer_html(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->outerHTML());
    return res;
}

void
webkit_dom_html_element_set_outer_html(WebKitDOMHTMLElement* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setOuterHTML(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gchar*
webkit_dom_html_element_get_outer_text(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->outerText());
    return res;
}

void
webkit_dom_html_element_set_outer_text(WebKitDOMHTMLElement* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setOuterText(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLCollection*
webkit_dom_html_element_get_children(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->children());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_html_element_get_content_editable(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->contentEditable());
    return res;
}

void
webkit_dom_html_element_set_content_editable(WebKitDOMHTMLElement* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setContentEditable(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gboolean
webkit_dom_html_element_get_is_content_editable(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gboolean res = item->isContentEditable();
    return res;
}

gboolean
webkit_dom_html_element_get_spellcheck(WebKitDOMHTMLElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gboolean res = item->spellcheck();
    return res;
}

void
webkit_dom_html_element_set_spellcheck(WebKitDOMHTMLElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->setSpellcheck(value);
}

gboolean
webkit_dom_html_element_get_item_scope(WebKitDOMHTMLElement* self)
{
#if ENABLE(MICRODATA)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gboolean res = item->hasAttribute(WebCore::HTMLNames::itemscopeAttr);
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
    return static_cast<gboolean>(0);
#endif /* ENABLE(MICRODATA) */
}

void
webkit_dom_html_element_set_item_scope(WebKitDOMHTMLElement* self, gboolean value)
{
#if ENABLE(MICRODATA)
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::itemscopeAttr, value);
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
#endif /* ENABLE(MICRODATA) */
}

WebKitDOMDOMSettableTokenList*
webkit_dom_html_element_get_item_type(WebKitDOMHTMLElement* self)
{
#if ENABLE(MICRODATA)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMSettableTokenList> g_res = WTF::getPtr(item->itemType());
    WebKitDOMDOMSettableTokenList* res = WebKit::kit(g_res.get());
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
    return NULL;
#endif /* ENABLE(MICRODATA) */
}

gchar*
webkit_dom_html_element_get_item_id(WebKitDOMHTMLElement* self)
{
#if ENABLE(MICRODATA)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getURLAttribute(WebCore::HTMLNames::itemidAttr));
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
    return NULL;
#endif /* ENABLE(MICRODATA) */
}

void
webkit_dom_html_element_set_item_id(WebKitDOMHTMLElement* self, const gchar* value)
{
#if ENABLE(MICRODATA)
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::itemidAttr, converted_value);
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
#endif /* ENABLE(MICRODATA) */
}

WebKitDOMDOMSettableTokenList*
webkit_dom_html_element_get_item_ref(WebKitDOMHTMLElement* self)
{
#if ENABLE(MICRODATA)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMSettableTokenList> g_res = WTF::getPtr(item->itemRef());
    WebKitDOMDOMSettableTokenList* res = WebKit::kit(g_res.get());
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
    return NULL;
#endif /* ENABLE(MICRODATA) */
}

WebKitDOMDOMSettableTokenList*
webkit_dom_html_element_get_item_prop(WebKitDOMHTMLElement* self)
{
#if ENABLE(MICRODATA)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLElement * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMSettableTokenList> g_res = WTF::getPtr(item->itemProp());
    WebKitDOMDOMSettableTokenList* res = WebKit::kit(g_res.get());
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Microdata")
    return NULL;
#endif /* ENABLE(MICRODATA) */
}

