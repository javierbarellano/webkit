/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "Attr.h"
#include "DOMObjectCache.h"
#include "Element.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMAttr.h"
#include "webkit/WebKitDOMAttrPrivate.h"
#include "webkit/WebKitDOMElement.h"
#include "webkit/WebKitDOMElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMAttr* kit(WebCore::Attr* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMAttr*>(ret);

    return static_cast<WebKitDOMAttr*>(DOMObjectCache::put(obj, WebKit::wrapAttr(obj)));
}

WebCore::Attr* core(WebKitDOMAttr* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Attr* coreObject = static_cast<WebCore::Attr*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMAttr* wrapAttr(WebCore::Attr* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_ATTR(g_object_new(WEBKIT_TYPE_DOM_ATTR,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMAttr, webkit_dom_attr, WEBKIT_TYPE_DOM_NODE)

enum {
    PROP_0,
    PROP_NAME,
    PROP_SPECIFIED,
    PROP_VALUE,
    PROP_OWNER_ELEMENT,
    PROP_IS_ID,
};

static void webkit_dom_attr_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Attr* coreObject = static_cast<WebCore::Attr *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_attr_parent_class)->finalize(object);
}

static void webkit_dom_attr_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMAttr* self = WEBKIT_DOM_ATTR(object);
    WebCore::Attr* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_VALUE:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setValue(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_attr_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMAttr* self = WEBKIT_DOM_ATTR(object);
    WebCore::Attr* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->name()));
        break;
    }
    case PROP_SPECIFIED:
    {
        g_value_set_boolean(value, coreSelf->specified());
        break;
    }
    case PROP_VALUE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->value()));
        break;
    }
    case PROP_OWNER_ELEMENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->ownerElement();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_IS_ID:
    {
        g_value_set_boolean(value, coreSelf->isId());
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_attr_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_attr_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_attr_parent_class)->constructed(object);
}

static void webkit_dom_attr_class_init(WebKitDOMAttrClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_attr_finalize;
    gobjectClass->set_property = webkit_dom_attr_set_property;
    gobjectClass->get_property = webkit_dom_attr_get_property;
    gobjectClass->constructed = webkit_dom_attr_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_NAME,
                                    g_param_spec_string("name", /* name */
                                                           "attr_name", /* short description */
                                                           "read-only  gchar* Attr.name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SPECIFIED,
                                    g_param_spec_boolean("specified", /* name */
                                                           "attr_specified", /* short description */
                                                           "read-only  gboolean Attr.specified", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_VALUE,
                                    g_param_spec_string("value", /* name */
                                                           "attr_value", /* short description */
                                                           "read-write  gchar* Attr.value", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OWNER_ELEMENT,
                                    g_param_spec_object("owner-element", /* name */
                                                           "attr_owner-element", /* short description */
                                                           "read-only  WebKitDOMElement* Attr.owner-element", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_IS_ID,
                                    g_param_spec_boolean("is-id", /* name */
                                                           "attr_is-id", /* short description */
                                                           "read-only  gboolean Attr.is-id", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_attr_init(WebKitDOMAttr* request)
{
}

gchar*
webkit_dom_attr_get_name(WebKitDOMAttr* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Attr * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->name());
    return res;
}

gboolean
webkit_dom_attr_get_specified(WebKitDOMAttr* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Attr * item = WebKit::core(self);
    gboolean res = item->specified();
    return res;
}

gchar*
webkit_dom_attr_get_value(WebKitDOMAttr* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Attr * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->value());
    return res;
}

void
webkit_dom_attr_set_value(WebKitDOMAttr* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Attr * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setValue(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMElement*
webkit_dom_attr_get_owner_element(WebKitDOMAttr* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Attr * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->ownerElement());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_attr_get_is_id(WebKitDOMAttr* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Attr * item = WebKit::core(self);
    gboolean res = item->isId();
    return res;
}

