/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "DOMWindow.h"
#include "Document.h"
#include "ExceptionCode.h"
#include "HTMLIFrameElement.h"
#include "HTMLNames.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMDOMWindow.h"
#include "webkit/WebKitDOMDOMWindowPrivate.h"
#include "webkit/WebKitDOMDocument.h"
#include "webkit/WebKitDOMDocumentPrivate.h"
#include "webkit/WebKitDOMHTMLIFrameElement.h"
#include "webkit/WebKitDOMHTMLIFrameElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLIFrameElement* kit(WebCore::HTMLIFrameElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLIFrameElement*>(ret);

    return static_cast<WebKitDOMHTMLIFrameElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLIFrameElement(obj)));
}

WebCore::HTMLIFrameElement* core(WebKitDOMHTMLIFrameElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLIFrameElement* coreObject = static_cast<WebCore::HTMLIFrameElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLIFrameElement* wrapHTMLIFrameElement(WebCore::HTMLIFrameElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_IFRAME_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_IFRAME_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLIFrameElement, webkit_dom_html_iframe_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_ALIGN,
    PROP_FRAME_BORDER,
    PROP_HEIGHT,
    PROP_LONG_DESC,
    PROP_MARGIN_HEIGHT,
    PROP_MARGIN_WIDTH,
    PROP_NAME,
    PROP_SANDBOX,
    PROP_SCROLLING,
    PROP_SRC,
    PROP_WIDTH,
    PROP_CONTENT_DOCUMENT,
    PROP_CONTENT_WINDOW,
};

static void webkit_dom_html_iframe_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLIFrameElement* coreObject = static_cast<WebCore::HTMLIFrameElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_iframe_element_parent_class)->finalize(object);
}

static void webkit_dom_html_iframe_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLIFrameElement* self = WEBKIT_DOM_HTML_IFRAME_ELEMENT(object);
    WebCore::HTMLIFrameElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ALIGN:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::alignAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_FRAME_BORDER:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::frameborderAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HEIGHT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::heightAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_LONG_DESC:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::longdescAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_MARGIN_HEIGHT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::marginheightAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_MARGIN_WIDTH:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::marginwidthAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_NAME:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::nameAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_SANDBOX:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::sandboxAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_SCROLLING:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::scrollingAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_SRC:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::srcAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_WIDTH:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::widthAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_iframe_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLIFrameElement* self = WEBKIT_DOM_HTML_IFRAME_ELEMENT(object);
    WebCore::HTMLIFrameElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ALIGN:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::alignAttr)));
        break;
    }
    case PROP_FRAME_BORDER:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::frameborderAttr)));
        break;
    }
    case PROP_HEIGHT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::heightAttr)));
        break;
    }
    case PROP_LONG_DESC:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::longdescAttr)));
        break;
    }
    case PROP_MARGIN_HEIGHT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::marginheightAttr)));
        break;
    }
    case PROP_MARGIN_WIDTH:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::marginwidthAttr)));
        break;
    }
    case PROP_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::nameAttr)));
        break;
    }
    case PROP_SANDBOX:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::sandboxAttr)));
        break;
    }
    case PROP_SCROLLING:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::scrollingAttr)));
        break;
    }
    case PROP_SRC:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getURLAttribute(WebCore::HTMLNames::srcAttr)));
        break;
    }
    case PROP_WIDTH:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::widthAttr)));
        break;
    }
    case PROP_CONTENT_DOCUMENT:
    {
        RefPtr<WebCore::Document> ptr = coreSelf->contentDocument();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CONTENT_WINDOW:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->contentWindow();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_iframe_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_iframe_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_iframe_element_parent_class)->constructed(object);
}

static void webkit_dom_html_iframe_element_class_init(WebKitDOMHTMLIFrameElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_iframe_element_finalize;
    gobjectClass->set_property = webkit_dom_html_iframe_element_set_property;
    gobjectClass->get_property = webkit_dom_html_iframe_element_get_property;
    gobjectClass->constructed = webkit_dom_html_iframe_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_ALIGN,
                                    g_param_spec_string("align", /* name */
                                                           "htmli_frame_element_align", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.align", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FRAME_BORDER,
                                    g_param_spec_string("frame-border", /* name */
                                                           "htmli_frame_element_frame-border", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.frame-border", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HEIGHT,
                                    g_param_spec_string("height", /* name */
                                                           "htmli_frame_element_height", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.height", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LONG_DESC,
                                    g_param_spec_string("long-desc", /* name */
                                                           "htmli_frame_element_long-desc", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.long-desc", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_MARGIN_HEIGHT,
                                    g_param_spec_string("margin-height", /* name */
                                                           "htmli_frame_element_margin-height", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.margin-height", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_MARGIN_WIDTH,
                                    g_param_spec_string("margin-width", /* name */
                                                           "htmli_frame_element_margin-width", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.margin-width", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NAME,
                                    g_param_spec_string("name", /* name */
                                                           "htmli_frame_element_name", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SANDBOX,
                                    g_param_spec_string("sandbox", /* name */
                                                           "htmli_frame_element_sandbox", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.sandbox", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLLING,
                                    g_param_spec_string("scrolling", /* name */
                                                           "htmli_frame_element_scrolling", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.scrolling", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SRC,
                                    g_param_spec_string("src", /* name */
                                                           "htmli_frame_element_src", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.src", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WIDTH,
                                    g_param_spec_string("width", /* name */
                                                           "htmli_frame_element_width", /* short description */
                                                           "read-write  gchar* HTMLIFrameElement.width", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CONTENT_DOCUMENT,
                                    g_param_spec_object("content-document", /* name */
                                                           "htmli_frame_element_content-document", /* short description */
                                                           "read-only  WebKitDOMDocument* HTMLIFrameElement.content-document", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOCUMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CONTENT_WINDOW,
                                    g_param_spec_object("content-window", /* name */
                                                           "htmli_frame_element_content-window", /* short description */
                                                           "read-only  WebKitDOMDOMWindow* HTMLIFrameElement.content-window", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_html_iframe_element_init(WebKitDOMHTMLIFrameElement* request)
{
}

gchar*
webkit_dom_html_iframe_element_get_align(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::alignAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_align(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::alignAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_frame_border(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::frameborderAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_frame_border(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::frameborderAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_height(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::heightAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_height(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::heightAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_long_desc(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::longdescAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_long_desc(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::longdescAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_margin_height(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::marginheightAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_margin_height(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::marginheightAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_margin_width(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::marginwidthAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_margin_width(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::marginwidthAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_name(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::nameAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_name(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::nameAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_sandbox(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::sandboxAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_sandbox(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::sandboxAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_scrolling(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::scrollingAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_scrolling(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::scrollingAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_src(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getURLAttribute(WebCore::HTMLNames::srcAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_src(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::srcAttr, converted_value);
}

gchar*
webkit_dom_html_iframe_element_get_width(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::widthAttr));
    return res;
}

void
webkit_dom_html_iframe_element_set_width(WebKitDOMHTMLIFrameElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::widthAttr, converted_value);
}

WebKitDOMDocument*
webkit_dom_html_iframe_element_get_content_document(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    PassRefPtr<WebCore::Document> g_res = WTF::getPtr(item->contentDocument());
    WebKitDOMDocument* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMWindow*
webkit_dom_html_iframe_element_get_content_window(WebKitDOMHTMLIFrameElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLIFrameElement * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->contentWindow());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

