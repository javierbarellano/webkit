/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "Attr.h"
#include "CDATASection.h"
#include "CSSStyleDeclaration.h"
#include "Comment.h"
#include "DOMImplementation.h"
#include "DOMObjectCache.h"
#include "DOMWindow.h"
#include "Document.h"
#include "DocumentFragment.h"
#include "DocumentType.h"
#include "Element.h"
#include "EntityReference.h"
#include "Event.h"
#include "ExceptionCode.h"
#include "HTMLCollection.h"
#include "HTMLElement.h"
#include "HTMLHeadElement.h"
#include "JSMainThreadExecState.h"
#include "Node.h"
#include "NodeIterator.h"
#include "NodeList.h"
#include "ProcessingInstruction.h"
#include "Range.h"
#include "StyleSheetList.h"
#include "Text.h"
#include "TreeWalker.h"
#include "WebKitDOMBinding.h"
#include "WebKitNamedFlow.h"
#include "XPathExpression.h"
#include "XPathNSResolver.h"
#include "XPathResult.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMAttr.h"
#include "webkit/WebKitDOMAttrPrivate.h"
#include "webkit/WebKitDOMCDATASection.h"
#include "webkit/WebKitDOMCDATASectionPrivate.h"
#include "webkit/WebKitDOMCSSStyleDeclaration.h"
#include "webkit/WebKitDOMCSSStyleDeclarationPrivate.h"
#include "webkit/WebKitDOMComment.h"
#include "webkit/WebKitDOMCommentPrivate.h"
#include "webkit/WebKitDOMDOMImplementation.h"
#include "webkit/WebKitDOMDOMImplementationPrivate.h"
#include "webkit/WebKitDOMDOMWindow.h"
#include "webkit/WebKitDOMDOMWindowPrivate.h"
#include "webkit/WebKitDOMDocument.h"
#include "webkit/WebKitDOMDocumentFragment.h"
#include "webkit/WebKitDOMDocumentFragmentPrivate.h"
#include "webkit/WebKitDOMDocumentPrivate.h"
#include "webkit/WebKitDOMDocumentType.h"
#include "webkit/WebKitDOMDocumentTypePrivate.h"
#include "webkit/WebKitDOMElement.h"
#include "webkit/WebKitDOMElementPrivate.h"
#include "webkit/WebKitDOMEntityReference.h"
#include "webkit/WebKitDOMEntityReferencePrivate.h"
#include "webkit/WebKitDOMEvent.h"
#include "webkit/WebKitDOMEventPrivate.h"
#include "webkit/WebKitDOMHTMLCollection.h"
#include "webkit/WebKitDOMHTMLCollectionPrivate.h"
#include "webkit/WebKitDOMHTMLElement.h"
#include "webkit/WebKitDOMHTMLElementPrivate.h"
#include "webkit/WebKitDOMHTMLHeadElement.h"
#include "webkit/WebKitDOMHTMLHeadElementPrivate.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodeFilter.h"
#include "webkit/WebKitDOMNodeFilterPrivate.h"
#include "webkit/WebKitDOMNodeIterator.h"
#include "webkit/WebKitDOMNodeIteratorPrivate.h"
#include "webkit/WebKitDOMNodeList.h"
#include "webkit/WebKitDOMNodeListPrivate.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkit/WebKitDOMProcessingInstruction.h"
#include "webkit/WebKitDOMProcessingInstructionPrivate.h"
#include "webkit/WebKitDOMRange.h"
#include "webkit/WebKitDOMRangePrivate.h"
#include "webkit/WebKitDOMStyleSheetList.h"
#include "webkit/WebKitDOMStyleSheetListPrivate.h"
#include "webkit/WebKitDOMText.h"
#include "webkit/WebKitDOMTextPrivate.h"
#include "webkit/WebKitDOMTreeWalker.h"
#include "webkit/WebKitDOMTreeWalkerPrivate.h"
#include "webkit/WebKitDOMWebKitNamedFlow.h"
#include "webkit/WebKitDOMWebKitNamedFlowPrivate.h"
#include "webkit/WebKitDOMXPathExpression.h"
#include "webkit/WebKitDOMXPathExpressionPrivate.h"
#include "webkit/WebKitDOMXPathNSResolver.h"
#include "webkit/WebKitDOMXPathNSResolverPrivate.h"
#include "webkit/WebKitDOMXPathResult.h"
#include "webkit/WebKitDOMXPathResultPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMDocument* kit(WebCore::Document* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMDocument*>(ret);

    return static_cast<WebKitDOMDocument*>(DOMObjectCache::put(obj, WebKit::wrapDocument(obj)));
}

WebCore::Document* core(WebKitDOMDocument* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Document* coreObject = static_cast<WebCore::Document*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMDocument* wrapDocument(WebCore::Document* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_DOCUMENT(g_object_new(WEBKIT_TYPE_DOM_DOCUMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMDocument, webkit_dom_document, WEBKIT_TYPE_DOM_NODE)

enum {
    PROP_0,
    PROP_DOCTYPE,
    PROP_IMPLEMENTATION,
    PROP_DOCUMENT_ELEMENT,
    PROP_INPUT_ENCODING,
    PROP_XML_ENCODING,
    PROP_XML_VERSION,
    PROP_XML_STANDALONE,
    PROP_DOCUMENT_URI,
    PROP_DEFAULT_VIEW,
    PROP_STYLE_SHEETS,
    PROP_TITLE,
    PROP_REFERRER,
    PROP_DOMAIN,
    PROP_URL,
    PROP_COOKIE,
    PROP_BODY,
    PROP_HEAD,
    PROP_IMAGES,
    PROP_APPLETS,
    PROP_LINKS,
    PROP_FORMS,
    PROP_ANCHORS,
    PROP_LAST_MODIFIED,
    PROP_CHARSET,
    PROP_DEFAULT_CHARSET,
    PROP_READY_STATE,
    PROP_CHARACTER_SET,
    PROP_PREFERRED_STYLESHEET_SET,
    PROP_SELECTED_STYLESHEET_SET,
    PROP_COMPAT_MODE,
    PROP_WEBKIT_IS_FULL_SCREEN,
    PROP_WEBKIT_FULL_SCREEN_KEYBOARD_INPUT_ALLOWED,
    PROP_WEBKIT_CURRENT_FULL_SCREEN_ELEMENT,
    PROP_WEBKIT_FULLSCREEN_ENABLED,
    PROP_WEBKIT_FULLSCREEN_ELEMENT,
#if ENABLE(PAGE_VISIBILITY_API)
    PROP_WEBKIT_VISIBILITY_STATE,
#endif /* ENABLE(PAGE_VISIBILITY_API) */
#if ENABLE(PAGE_VISIBILITY_API)
    PROP_WEBKIT_HIDDEN,
#endif /* ENABLE(PAGE_VISIBILITY_API) */
};

static void webkit_dom_document_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Document* coreObject = static_cast<WebCore::Document *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_document_parent_class)->finalize(object);
}

static void webkit_dom_document_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMDocument* self = WEBKIT_DOM_DOCUMENT(object);
    WebCore::Document* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_XML_VERSION:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setXMLVersion(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_XML_STANDALONE:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setXMLStandalone((g_value_get_boolean(value)), ec);
        break;
    }
    case PROP_DOCUMENT_URI:
    {
        coreSelf->setDocumentURI(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_TITLE:
    {
        coreSelf->setTitle(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_COOKIE:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setCookie(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_CHARSET:
    {
        coreSelf->setCharset(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_SELECTED_STYLESHEET_SET:
    {
        coreSelf->setSelectedStylesheetSet(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_document_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMDocument* self = WEBKIT_DOM_DOCUMENT(object);
    WebCore::Document* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_DOCTYPE:
    {
        RefPtr<WebCore::DocumentType> ptr = coreSelf->doctype();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_IMPLEMENTATION:
    {
        RefPtr<WebCore::DOMImplementation> ptr = coreSelf->implementation();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_DOCUMENT_ELEMENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->documentElement();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_INPUT_ENCODING:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->inputEncoding()));
        break;
    }
    case PROP_XML_ENCODING:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->xmlEncoding()));
        break;
    }
    case PROP_XML_VERSION:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->xmlVersion()));
        break;
    }
    case PROP_XML_STANDALONE:
    {
        g_value_set_boolean(value, coreSelf->xmlStandalone());
        break;
    }
    case PROP_DOCUMENT_URI:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->documentURI()));
        break;
    }
    case PROP_DEFAULT_VIEW:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->defaultView();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_STYLE_SHEETS:
    {
        RefPtr<WebCore::StyleSheetList> ptr = coreSelf->styleSheets();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_TITLE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->title()));
        break;
    }
    case PROP_REFERRER:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->referrer()));
        break;
    }
    case PROP_DOMAIN:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->domain()));
        break;
    }
    case PROP_URL:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->url()));
        break;
    }
    case PROP_COOKIE:
    {
        WebCore::ExceptionCode ec = 0;
        g_value_take_string(value, convertToUTF8String(coreSelf->cookie(ec)));
        break;
    }
    case PROP_BODY:
    {
        RefPtr<WebCore::HTMLElement> ptr = coreSelf->body();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_HEAD:
    {
        RefPtr<WebCore::HTMLHeadElement> ptr = coreSelf->head();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_IMAGES:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->images();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_APPLETS:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->applets();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_LINKS:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->links();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_FORMS:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->forms();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_ANCHORS:
    {
        RefPtr<WebCore::HTMLCollection> ptr = coreSelf->anchors();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_LAST_MODIFIED:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->lastModified()));
        break;
    }
    case PROP_CHARSET:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->charset()));
        break;
    }
    case PROP_DEFAULT_CHARSET:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->defaultCharset()));
        break;
    }
    case PROP_READY_STATE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->readyState()));
        break;
    }
    case PROP_CHARACTER_SET:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->characterSet()));
        break;
    }
    case PROP_PREFERRED_STYLESHEET_SET:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->preferredStylesheetSet()));
        break;
    }
    case PROP_SELECTED_STYLESHEET_SET:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->selectedStylesheetSet()));
        break;
    }
    case PROP_COMPAT_MODE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->compatMode()));
        break;
    }
    case PROP_WEBKIT_IS_FULL_SCREEN:
    {
        g_value_set_boolean(value, coreSelf->webkitIsFullScreen());
        break;
    }
    case PROP_WEBKIT_FULL_SCREEN_KEYBOARD_INPUT_ALLOWED:
    {
        g_value_set_boolean(value, coreSelf->webkitFullScreenKeyboardInputAllowed());
        break;
    }
    case PROP_WEBKIT_CURRENT_FULL_SCREEN_ELEMENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->webkitCurrentFullScreenElement();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_WEBKIT_FULLSCREEN_ENABLED:
    {
        g_value_set_boolean(value, coreSelf->webkitFullscreenEnabled());
        break;
    }
    case PROP_WEBKIT_FULLSCREEN_ELEMENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->webkitFullscreenElement();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
#if ENABLE(PAGE_VISIBILITY_API)
    case PROP_WEBKIT_VISIBILITY_STATE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->webkitVisibilityState()));
        break;
    }
#endif /* ENABLE(PAGE_VISIBILITY_API) */
#if ENABLE(PAGE_VISIBILITY_API)
    case PROP_WEBKIT_HIDDEN:
    {
        g_value_set_boolean(value, coreSelf->webkitHidden());
        break;
    }
#endif /* ENABLE(PAGE_VISIBILITY_API) */
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_document_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_document_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_document_parent_class)->constructed(object);
}

static void webkit_dom_document_class_init(WebKitDOMDocumentClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_document_finalize;
    gobjectClass->set_property = webkit_dom_document_set_property;
    gobjectClass->get_property = webkit_dom_document_get_property;
    gobjectClass->constructed = webkit_dom_document_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_DOCTYPE,
                                    g_param_spec_object("doctype", /* name */
                                                           "document_doctype", /* short description */
                                                           "read-only  WebKitDOMDocumentType* Document.doctype", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOCUMENT_TYPE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_IMPLEMENTATION,
                                    g_param_spec_object("implementation", /* name */
                                                           "document_implementation", /* short description */
                                                           "read-only  WebKitDOMDOMImplementation* Document.implementation", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_IMPLEMENTATION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DOCUMENT_ELEMENT,
                                    g_param_spec_object("document-element", /* name */
                                                           "document_document-element", /* short description */
                                                           "read-only  WebKitDOMElement* Document.document-element", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_INPUT_ENCODING,
                                    g_param_spec_string("input-encoding", /* name */
                                                           "document_input-encoding", /* short description */
                                                           "read-only  gchar* Document.input-encoding", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_XML_ENCODING,
                                    g_param_spec_string("xml-encoding", /* name */
                                                           "document_xml-encoding", /* short description */
                                                           "read-only  gchar* Document.xml-encoding", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_XML_VERSION,
                                    g_param_spec_string("xml-version", /* name */
                                                           "document_xml-version", /* short description */
                                                           "read-write  gchar* Document.xml-version", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_XML_STANDALONE,
                                    g_param_spec_boolean("xml-standalone", /* name */
                                                           "document_xml-standalone", /* short description */
                                                           "read-write  gboolean Document.xml-standalone", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DOCUMENT_URI,
                                    g_param_spec_string("document-uri", /* name */
                                                           "document_document-uri", /* short description */
                                                           "read-write  gchar* Document.document-uri", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DEFAULT_VIEW,
                                    g_param_spec_object("default-view", /* name */
                                                           "document_default-view", /* short description */
                                                           "read-only  WebKitDOMDOMWindow* Document.default-view", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_STYLE_SHEETS,
                                    g_param_spec_object("style-sheets", /* name */
                                                           "document_style-sheets", /* short description */
                                                           "read-only  WebKitDOMStyleSheetList* Document.style-sheets", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_STYLE_SHEET_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TITLE,
                                    g_param_spec_string("title", /* name */
                                                           "document_title", /* short description */
                                                           "read-write  gchar* Document.title", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_REFERRER,
                                    g_param_spec_string("referrer", /* name */
                                                           "document_referrer", /* short description */
                                                           "read-only  gchar* Document.referrer", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DOMAIN,
                                    g_param_spec_string("domain", /* name */
                                                           "document_domain", /* short description */
                                                           "read-only  gchar* Document.domain", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_URL,
                                    g_param_spec_string("url", /* name */
                                                           "document_url", /* short description */
                                                           "read-only  gchar* Document.url", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_COOKIE,
                                    g_param_spec_string("cookie", /* name */
                                                           "document_cookie", /* short description */
                                                           "read-write  gchar* Document.cookie", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BODY,
                                    g_param_spec_object("body", /* name */
                                                           "document_body", /* short description */
                                                           "read-write  WebKitDOMHTMLElement* Document.body", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HEAD,
                                    g_param_spec_object("head", /* name */
                                                           "document_head", /* short description */
                                                           "read-only  WebKitDOMHTMLHeadElement* Document.head", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_HEAD_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_IMAGES,
                                    g_param_spec_object("images", /* name */
                                                           "document_images", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* Document.images", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_APPLETS,
                                    g_param_spec_object("applets", /* name */
                                                           "document_applets", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* Document.applets", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LINKS,
                                    g_param_spec_object("links", /* name */
                                                           "document_links", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* Document.links", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FORMS,
                                    g_param_spec_object("forms", /* name */
                                                           "document_forms", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* Document.forms", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ANCHORS,
                                    g_param_spec_object("anchors", /* name */
                                                           "document_anchors", /* short description */
                                                           "read-only  WebKitDOMHTMLCollection* Document.anchors", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HTML_COLLECTION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LAST_MODIFIED,
                                    g_param_spec_string("last-modified", /* name */
                                                           "document_last-modified", /* short description */
                                                           "read-only  gchar* Document.last-modified", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CHARSET,
                                    g_param_spec_string("charset", /* name */
                                                           "document_charset", /* short description */
                                                           "read-write  gchar* Document.charset", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DEFAULT_CHARSET,
                                    g_param_spec_string("default-charset", /* name */
                                                           "document_default-charset", /* short description */
                                                           "read-only  gchar* Document.default-charset", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_READY_STATE,
                                    g_param_spec_string("ready-state", /* name */
                                                           "document_ready-state", /* short description */
                                                           "read-only  gchar* Document.ready-state", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CHARACTER_SET,
                                    g_param_spec_string("character-set", /* name */
                                                           "document_character-set", /* short description */
                                                           "read-only  gchar* Document.character-set", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PREFERRED_STYLESHEET_SET,
                                    g_param_spec_string("preferred-stylesheet-set", /* name */
                                                           "document_preferred-stylesheet-set", /* short description */
                                                           "read-only  gchar* Document.preferred-stylesheet-set", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SELECTED_STYLESHEET_SET,
                                    g_param_spec_string("selected-stylesheet-set", /* name */
                                                           "document_selected-stylesheet-set", /* short description */
                                                           "read-write  gchar* Document.selected-stylesheet-set", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_COMPAT_MODE,
                                    g_param_spec_string("compat-mode", /* name */
                                                           "document_compat-mode", /* short description */
                                                           "read-only  gchar* Document.compat-mode", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_IS_FULL_SCREEN,
                                    g_param_spec_boolean("webkit-is-full-screen", /* name */
                                                           "document_webkit-is-full-screen", /* short description */
                                                           "read-only  gboolean Document.webkit-is-full-screen", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_FULL_SCREEN_KEYBOARD_INPUT_ALLOWED,
                                    g_param_spec_boolean("webkit-full-screen-keyboard-input-allowed", /* name */
                                                           "document_webkit-full-screen-keyboard-input-allowed", /* short description */
                                                           "read-only  gboolean Document.webkit-full-screen-keyboard-input-allowed", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_CURRENT_FULL_SCREEN_ELEMENT,
                                    g_param_spec_object("webkit-current-full-screen-element", /* name */
                                                           "document_webkit-current-full-screen-element", /* short description */
                                                           "read-only  WebKitDOMElement* Document.webkit-current-full-screen-element", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_FULLSCREEN_ENABLED,
                                    g_param_spec_boolean("webkit-fullscreen-enabled", /* name */
                                                           "document_webkit-fullscreen-enabled", /* short description */
                                                           "read-only  gboolean Document.webkit-fullscreen-enabled", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_FULLSCREEN_ELEMENT,
                                    g_param_spec_object("webkit-fullscreen-element", /* name */
                                                           "document_webkit-fullscreen-element", /* short description */
                                                           "read-only  WebKitDOMElement* Document.webkit-fullscreen-element", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
#if ENABLE(PAGE_VISIBILITY_API)
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_VISIBILITY_STATE,
                                    g_param_spec_string("webkit-visibility-state", /* name */
                                                           "document_webkit-visibility-state", /* short description */
                                                           "read-only  gchar* Document.webkit-visibility-state", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
#endif /* ENABLE(PAGE_VISIBILITY_API) */
#if ENABLE(PAGE_VISIBILITY_API)
    g_object_class_install_property(gobjectClass,
                                    PROP_WEBKIT_HIDDEN,
                                    g_param_spec_boolean("webkit-hidden", /* name */
                                                           "document_webkit-hidden", /* short description */
                                                           "read-only  gboolean Document.webkit-hidden", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
#endif /* ENABLE(PAGE_VISIBILITY_API) */


}

static void webkit_dom_document_init(WebKitDOMDocument* request)
{
}

WebKitDOMElement*
webkit_dom_document_create_element(WebKitDOMDocument* self, const gchar* tag_name, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(tag_name, 0);
    WTF::String converted_tag_name = WTF::String::fromUTF8(tag_name);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->createElement(converted_tag_name, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDocumentFragment*
webkit_dom_document_create_document_fragment(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::DocumentFragment> g_res = WTF::getPtr(item->createDocumentFragment());
    WebKitDOMDocumentFragment* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMText*
webkit_dom_document_create_text_node(WebKitDOMDocument* self, const gchar* data)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(data, 0);
    WTF::String converted_data = WTF::String::fromUTF8(data);
    PassRefPtr<WebCore::Text> g_res = WTF::getPtr(item->createTextNode(converted_data));
    WebKitDOMText* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMComment*
webkit_dom_document_create_comment(WebKitDOMDocument* self, const gchar* data)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(data, 0);
    WTF::String converted_data = WTF::String::fromUTF8(data);
    PassRefPtr<WebCore::Comment> g_res = WTF::getPtr(item->createComment(converted_data));
    WebKitDOMComment* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCDATASection*
webkit_dom_document_create_cdata_section(WebKitDOMDocument* self, const gchar* data, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(data, 0);
    WTF::String converted_data = WTF::String::fromUTF8(data);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::CDATASection> g_res = WTF::getPtr(item->createCDATASection(converted_data, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMCDATASection* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMProcessingInstruction*
webkit_dom_document_create_processing_instruction(WebKitDOMDocument* self, const gchar* target, const gchar* data, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(target, 0);
    g_return_val_if_fail(data, 0);
    WTF::String converted_target = WTF::String::fromUTF8(target);
    WTF::String converted_data = WTF::String::fromUTF8(data);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::ProcessingInstruction> g_res = WTF::getPtr(item->createProcessingInstruction(converted_target, converted_data, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMProcessingInstruction* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMAttr*
webkit_dom_document_create_attribute(WebKitDOMDocument* self, const gchar* name, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->createAttribute(converted_name, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMEntityReference*
webkit_dom_document_create_entity_reference(WebKitDOMDocument* self, const gchar* name, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::EntityReference> g_res = WTF::getPtr(item->createEntityReference(converted_name, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMEntityReference* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_document_get_elements_by_tag_name(WebKitDOMDocument* self, const gchar* tagname)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(tagname, 0);
    WTF::String converted_tagname = WTF::String::fromUTF8(tagname);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByTagName(converted_tagname));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_document_import_node(WebKitDOMDocument* self, WebKitDOMNode* imported_node, gboolean deep, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(imported_node, 0);
    WebCore::Node * converted_imported_node = NULL;
    if (imported_node != NULL) {
        converted_imported_node = WebKit::core(imported_node);
        g_return_val_if_fail(converted_imported_node, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->importNode(converted_imported_node, deep, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_document_create_element_ns(WebKitDOMDocument* self, const gchar* namespace_uri, const gchar* qualified_name, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(qualified_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_qualified_name = WTF::String::fromUTF8(qualified_name);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->createElementNS(converted_namespace_uri, converted_qualified_name, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMAttr*
webkit_dom_document_create_attribute_ns(WebKitDOMDocument* self, const gchar* namespace_uri, const gchar* qualified_name, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(qualified_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_qualified_name = WTF::String::fromUTF8(qualified_name);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Attr> g_res = WTF::getPtr(item->createAttributeNS(converted_namespace_uri, converted_qualified_name, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMAttr* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_document_get_elements_by_tag_name_ns(WebKitDOMDocument* self, const gchar* namespace_uri, const gchar* local_name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(local_name, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_local_name = WTF::String::fromUTF8(local_name);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByTagNameNS(converted_namespace_uri, converted_local_name));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_document_get_element_by_id(WebKitDOMDocument* self, const gchar* element_id)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(element_id, 0);
    WTF::String converted_element_id = WTF::String::fromUTF8(element_id);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->getElementById(converted_element_id));
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_document_adopt_node(WebKitDOMDocument* self, WebKitDOMNode* source, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(source, 0);
    WebCore::Node * converted_source = NULL;
    if (source != NULL) {
        converted_source = WebKit::core(source);
        g_return_val_if_fail(converted_source, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->adoptNode(converted_source, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMEvent*
webkit_dom_document_create_event(WebKitDOMDocument* self, const gchar* event_type, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(event_type, 0);
    WTF::String converted_event_type = WTF::String::fromUTF8(event_type);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Event> g_res = WTF::getPtr(item->createEvent(converted_event_type, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMEvent* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMRange*
webkit_dom_document_create_range(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::Range> g_res = WTF::getPtr(item->createRange());
    WebKitDOMRange* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeIterator*
webkit_dom_document_create_node_iterator(WebKitDOMDocument* self, WebKitDOMNode* root, gulong what_to_show, WebKitDOMNodeFilter* filter, gboolean expand_entity_references, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(root, 0);
    g_return_val_if_fail(filter, 0);
    WebCore::Node * converted_root = NULL;
    if (root != NULL) {
        converted_root = WebKit::core(root);
        g_return_val_if_fail(converted_root, 0);
    }
    WebCore::NodeFilter * converted_filter = NULL;
    if (filter != NULL) {
        converted_filter = WebKit::core(filter);
        g_return_val_if_fail(converted_filter, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::NodeIterator> g_res = WTF::getPtr(item->createNodeIterator(converted_root, what_to_show, converted_filter, expand_entity_references, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNodeIterator* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMTreeWalker*
webkit_dom_document_create_tree_walker(WebKitDOMDocument* self, WebKitDOMNode* root, gulong what_to_show, WebKitDOMNodeFilter* filter, gboolean expand_entity_references, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(root, 0);
    g_return_val_if_fail(filter, 0);
    WebCore::Node * converted_root = NULL;
    if (root != NULL) {
        converted_root = WebKit::core(root);
        g_return_val_if_fail(converted_root, 0);
    }
    WebCore::NodeFilter * converted_filter = NULL;
    if (filter != NULL) {
        converted_filter = WebKit::core(filter);
        g_return_val_if_fail(converted_filter, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::TreeWalker> g_res = WTF::getPtr(item->createTreeWalker(converted_root, what_to_show, converted_filter, expand_entity_references, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMTreeWalker* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCSSStyleDeclaration*
webkit_dom_document_get_override_style(WebKitDOMDocument* self, WebKitDOMElement* element, const gchar* pseudo_element)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(element, 0);
    g_return_val_if_fail(pseudo_element, 0);
    WebCore::Element * converted_element = NULL;
    if (element != NULL) {
        converted_element = WebKit::core(element);
        g_return_val_if_fail(converted_element, 0);
    }
    WTF::String converted_pseudo_element = WTF::String::fromUTF8(pseudo_element);
    PassRefPtr<WebCore::CSSStyleDeclaration> g_res = WTF::getPtr(item->getOverrideStyle(converted_element, converted_pseudo_element));
    WebKitDOMCSSStyleDeclaration* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMXPathExpression*
webkit_dom_document_create_expression(WebKitDOMDocument* self, const gchar* expression, WebKitDOMXPathNSResolver* resolver, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(expression, 0);
    g_return_val_if_fail(resolver, 0);
    WTF::String converted_expression = WTF::String::fromUTF8(expression);
    WebCore::XPathNSResolver * converted_resolver = NULL;
    if (resolver != NULL) {
        converted_resolver = WebKit::core(resolver);
        g_return_val_if_fail(converted_resolver, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::XPathExpression> g_res = WTF::getPtr(item->createExpression(converted_expression, converted_resolver, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMXPathExpression* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMXPathNSResolver*
webkit_dom_document_create_ns_resolver(WebKitDOMDocument* self, WebKitDOMNode* node_resolver)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(node_resolver, 0);
    WebCore::Node * converted_node_resolver = NULL;
    if (node_resolver != NULL) {
        converted_node_resolver = WebKit::core(node_resolver);
        g_return_val_if_fail(converted_node_resolver, 0);
    }
    PassRefPtr<WebCore::XPathNSResolver> g_res = WTF::getPtr(item->createNSResolver(converted_node_resolver));
    WebKitDOMXPathNSResolver* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMXPathResult*
webkit_dom_document_evaluate(WebKitDOMDocument* self, const gchar* expression, WebKitDOMNode* context_node, WebKitDOMXPathNSResolver* resolver, gushort type, WebKitDOMXPathResult* in_result, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(expression, 0);
    g_return_val_if_fail(context_node, 0);
    g_return_val_if_fail(resolver, 0);
    WTF::String converted_expression = WTF::String::fromUTF8(expression);
    WebCore::Node * converted_context_node = NULL;
    if (context_node != NULL) {
        converted_context_node = WebKit::core(context_node);
        g_return_val_if_fail(converted_context_node, 0);
    }
    WebCore::XPathNSResolver * converted_resolver = NULL;
    if (resolver != NULL) {
        converted_resolver = WebKit::core(resolver);
        g_return_val_if_fail(converted_resolver, 0);
    }
    WebCore::XPathResult * converted_in_result = NULL;
    if (in_result != NULL) {
        converted_in_result = WebKit::core(in_result);
        g_return_val_if_fail(converted_in_result, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::XPathResult> g_res = WTF::getPtr(item->evaluate(converted_expression, converted_context_node, converted_resolver, type, converted_in_result, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMXPathResult* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_document_exec_command(WebKitDOMDocument* self, const gchar* command, gboolean user_interface, const gchar* value)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(command, 0);
    g_return_val_if_fail(value, 0);
    WTF::String converted_command = WTF::String::fromUTF8(command);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    gboolean res = item->execCommand(converted_command, user_interface, converted_value);
    return res;
}

gboolean
webkit_dom_document_query_command_enabled(WebKitDOMDocument* self, const gchar* command)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(command, 0);
    WTF::String converted_command = WTF::String::fromUTF8(command);
    gboolean res = item->queryCommandEnabled(converted_command);
    return res;
}

gboolean
webkit_dom_document_query_command_indeterm(WebKitDOMDocument* self, const gchar* command)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(command, 0);
    WTF::String converted_command = WTF::String::fromUTF8(command);
    gboolean res = item->queryCommandIndeterm(converted_command);
    return res;
}

gboolean
webkit_dom_document_query_command_state(WebKitDOMDocument* self, const gchar* command)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(command, 0);
    WTF::String converted_command = WTF::String::fromUTF8(command);
    gboolean res = item->queryCommandState(converted_command);
    return res;
}

gboolean
webkit_dom_document_query_command_supported(WebKitDOMDocument* self, const gchar* command)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(command, 0);
    WTF::String converted_command = WTF::String::fromUTF8(command);
    gboolean res = item->queryCommandSupported(converted_command);
    return res;
}

gchar*
webkit_dom_document_query_command_value(WebKitDOMDocument* self, const gchar* command)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(command, 0);
    WTF::String converted_command = WTF::String::fromUTF8(command);
    gchar* res = convertToUTF8String(item->queryCommandValue(converted_command));
    return res;
}

WebKitDOMNodeList*
webkit_dom_document_get_elements_by_name(WebKitDOMDocument* self, const gchar* element_name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(element_name, 0);
    WTF::String converted_element_name = WTF::String::fromUTF8(element_name);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByName(converted_element_name));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_document_element_from_point(WebKitDOMDocument* self, glong x, glong y)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->elementFromPoint(x, y));
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMRange*
webkit_dom_document_caret_range_from_point(WebKitDOMDocument* self, glong x, glong y)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::Range> g_res = WTF::getPtr(item->caretRangeFromPoint(x, y));
    WebKitDOMRange* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCSSStyleDeclaration*
webkit_dom_document_create_css_style_declaration(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::CSSStyleDeclaration> g_res = WTF::getPtr(item->createCSSStyleDeclaration());
    WebKitDOMCSSStyleDeclaration* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_document_get_elements_by_class_name(WebKitDOMDocument* self, const gchar* tagname)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(tagname, 0);
    WTF::String converted_tagname = WTF::String::fromUTF8(tagname);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->getElementsByClassName(converted_tagname));
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_document_query_selector(WebKitDOMDocument* self, const gchar* selectors, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(selectors, 0);
    WTF::String converted_selectors = WTF::String::fromUTF8(selectors);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->querySelector(converted_selectors, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_document_query_selector_all(WebKitDOMDocument* self, const gchar* selectors, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(selectors, 0);
    WTF::String converted_selectors = WTF::String::fromUTF8(selectors);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->querySelectorAll(converted_selectors, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_document_webkit_cancel_full_screen(WebKitDOMDocument* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    item->webkitCancelFullScreen();
}

void
webkit_dom_document_webkit_exit_fullscreen(WebKitDOMDocument* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    item->webkitExitFullscreen();
}

WebKitDOMWebKitNamedFlow*
webkit_dom_document_webkit_get_flow_by_name(WebKitDOMDocument* self, const gchar* name)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_val_if_fail(name, 0);
    WTF::String converted_name = WTF::String::fromUTF8(name);
    PassRefPtr<WebCore::WebKitNamedFlow> g_res = WTF::getPtr(item->webkitGetFlowByName(converted_name));
    WebKitDOMWebKitNamedFlow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDocumentType*
webkit_dom_document_get_doctype(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::DocumentType> g_res = WTF::getPtr(item->doctype());
    WebKitDOMDocumentType* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMImplementation*
webkit_dom_document_get_implementation(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMImplementation> g_res = WTF::getPtr(item->implementation());
    WebKitDOMDOMImplementation* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_document_get_document_element(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->documentElement());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_document_get_input_encoding(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->inputEncoding());
    return res;
}

gchar*
webkit_dom_document_get_xml_encoding(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->xmlEncoding());
    return res;
}

gchar*
webkit_dom_document_get_xml_version(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->xmlVersion());
    return res;
}

void
webkit_dom_document_set_xml_version(WebKitDOMDocument* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setXMLVersion(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gboolean
webkit_dom_document_get_xml_standalone(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gboolean res = item->xmlStandalone();
    return res;
}

void
webkit_dom_document_set_xml_standalone(WebKitDOMDocument* self, gboolean value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setXMLStandalone(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gchar*
webkit_dom_document_get_document_uri(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->documentURI());
    return res;
}

void
webkit_dom_document_set_document_uri(WebKitDOMDocument* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setDocumentURI(converted_value);
}

WebKitDOMDOMWindow*
webkit_dom_document_get_default_view(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->defaultView());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMStyleSheetList*
webkit_dom_document_get_style_sheets(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::StyleSheetList> g_res = WTF::getPtr(item->styleSheets());
    WebKitDOMStyleSheetList* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_document_get_title(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->title());
    return res;
}

void
webkit_dom_document_set_title(WebKitDOMDocument* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setTitle(converted_value);
}

gchar*
webkit_dom_document_get_referrer(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->referrer());
    return res;
}

gchar*
webkit_dom_document_get_domain(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->domain());
    return res;
}

gchar*
webkit_dom_document_get_cookie(WebKitDOMDocument* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    gchar* res = convertToUTF8String(item->cookie(ec));
    return res;
}

void
webkit_dom_document_set_cookie(WebKitDOMDocument* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setCookie(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLElement*
webkit_dom_document_get_body(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLElement> g_res = WTF::getPtr(item->body());
    WebKitDOMHTMLElement* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_document_set_body(WebKitDOMDocument* self, WebKitDOMHTMLElement* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WebCore::HTMLElement * converted_value = NULL;
    if (value != NULL) {
        converted_value = WebKit::core(value);
        g_return_if_fail(converted_value);
    }
    WebCore::ExceptionCode ec = 0;
    item->setBody(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMHTMLHeadElement*
webkit_dom_document_get_head(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLHeadElement> g_res = WTF::getPtr(item->head());
    WebKitDOMHTMLHeadElement* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLCollection*
webkit_dom_document_get_images(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->images());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLCollection*
webkit_dom_document_get_applets(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->applets());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLCollection*
webkit_dom_document_get_links(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->links());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLCollection*
webkit_dom_document_get_forms(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->forms());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLCollection*
webkit_dom_document_get_anchors(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::HTMLCollection> g_res = WTF::getPtr(item->anchors());
    WebKitDOMHTMLCollection* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_document_get_last_modified(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->lastModified());
    return res;
}

gchar*
webkit_dom_document_get_charset(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->charset());
    return res;
}

void
webkit_dom_document_set_charset(WebKitDOMDocument* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setCharset(converted_value);
}

gchar*
webkit_dom_document_get_default_charset(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->defaultCharset());
    return res;
}

gchar*
webkit_dom_document_get_ready_state(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->readyState());
    return res;
}

gchar*
webkit_dom_document_get_character_set(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->characterSet());
    return res;
}

gchar*
webkit_dom_document_get_preferred_stylesheet_set(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->preferredStylesheetSet());
    return res;
}

gchar*
webkit_dom_document_get_selected_stylesheet_set(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->selectedStylesheetSet());
    return res;
}

void
webkit_dom_document_set_selected_stylesheet_set(WebKitDOMDocument* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setSelectedStylesheetSet(converted_value);
}

gchar*
webkit_dom_document_get_compat_mode(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->compatMode());
    return res;
}

gboolean
webkit_dom_document_get_webkit_is_full_screen(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gboolean res = item->webkitIsFullScreen();
    return res;
}

gboolean
webkit_dom_document_get_webkit_full_screen_keyboard_input_allowed(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gboolean res = item->webkitFullScreenKeyboardInputAllowed();
    return res;
}

WebKitDOMElement*
webkit_dom_document_get_webkit_current_full_screen_element(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->webkitCurrentFullScreenElement());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_document_get_webkit_fullscreen_enabled(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gboolean res = item->webkitFullscreenEnabled();
    return res;
}

WebKitDOMElement*
webkit_dom_document_get_webkit_fullscreen_element(WebKitDOMDocument* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->webkitFullscreenElement());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_document_get_webkit_visibility_state(WebKitDOMDocument* self)
{
#if ENABLE(PAGE_VISIBILITY_API)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->webkitVisibilityState());
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Page Visibility API")
    return NULL;
#endif /* ENABLE(PAGE_VISIBILITY_API) */
}

gboolean
webkit_dom_document_get_webkit_hidden(WebKitDOMDocument* self)
{
#if ENABLE(PAGE_VISIBILITY_API)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Document * item = WebKit::core(self);
    gboolean res = item->webkitHidden();
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Page Visibility API")
    return static_cast<gboolean>(0);
#endif /* ENABLE(PAGE_VISIBILITY_API) */
}

