/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "CSSStyleSheet.h"
#include "DOMImplementation.h"
#include "DOMObjectCache.h"
#include "Document.h"
#include "DocumentType.h"
#include "ExceptionCode.h"
#include "HTMLDocument.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMCSSStyleSheet.h"
#include "webkit/WebKitDOMCSSStyleSheetPrivate.h"
#include "webkit/WebKitDOMDOMImplementation.h"
#include "webkit/WebKitDOMDOMImplementationPrivate.h"
#include "webkit/WebKitDOMDocument.h"
#include "webkit/WebKitDOMDocumentPrivate.h"
#include "webkit/WebKitDOMDocumentType.h"
#include "webkit/WebKitDOMDocumentTypePrivate.h"
#include "webkit/WebKitDOMHTMLDocument.h"
#include "webkit/WebKitDOMHTMLDocumentPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMDOMImplementation* kit(WebCore::DOMImplementation* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMDOMImplementation*>(ret);

    return static_cast<WebKitDOMDOMImplementation*>(DOMObjectCache::put(obj, WebKit::wrapDOMImplementation(obj)));
}

WebCore::DOMImplementation* core(WebKitDOMDOMImplementation* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::DOMImplementation* coreObject = static_cast<WebCore::DOMImplementation*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMDOMImplementation* wrapDOMImplementation(WebCore::DOMImplementation* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_DOM_IMPLEMENTATION(g_object_new(WEBKIT_TYPE_DOM_DOM_IMPLEMENTATION,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMDOMImplementation, webkit_dom_dom_implementation, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
};

static void webkit_dom_dom_implementation_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::DOMImplementation* coreObject = static_cast<WebCore::DOMImplementation *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_dom_implementation_parent_class)->finalize(object);
}

static void webkit_dom_dom_implementation_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_dom_implementation_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_dom_implementation_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_dom_implementation_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_dom_implementation_parent_class)->constructed(object);
}

static void webkit_dom_dom_implementation_class_init(WebKitDOMDOMImplementationClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_dom_implementation_finalize;
    gobjectClass->set_property = webkit_dom_dom_implementation_set_property;
    gobjectClass->get_property = webkit_dom_dom_implementation_get_property;
    gobjectClass->constructed = webkit_dom_dom_implementation_constructed;



}

static void webkit_dom_dom_implementation_init(WebKitDOMDOMImplementation* request)
{
}

gboolean
webkit_dom_dom_implementation_has_feature(WebKitDOMDOMImplementation* self, const gchar* feature, const gchar* version)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMImplementation * item = WebKit::core(self);
    g_return_val_if_fail(feature, 0);
    g_return_val_if_fail(version, 0);
    WTF::String converted_feature = WTF::String::fromUTF8(feature);
    WTF::String converted_version = WTF::String::fromUTF8(version);
    gboolean res = item->hasFeature(converted_feature, converted_version);
    return res;
}

WebKitDOMDocumentType*
webkit_dom_dom_implementation_create_document_type(WebKitDOMDOMImplementation* self, const gchar* qualified_name, const gchar* public_id, const gchar* system_id, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMImplementation * item = WebKit::core(self);
    g_return_val_if_fail(qualified_name, 0);
    g_return_val_if_fail(public_id, 0);
    g_return_val_if_fail(system_id, 0);
    WTF::String converted_qualified_name = WTF::String::fromUTF8(qualified_name);
    WTF::String converted_public_id = WTF::String::fromUTF8(public_id);
    WTF::String converted_system_id = WTF::String::fromUTF8(system_id);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::DocumentType> g_res = WTF::getPtr(item->createDocumentType(converted_qualified_name, converted_public_id, converted_system_id, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMDocumentType* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDocument*
webkit_dom_dom_implementation_create_document(WebKitDOMDOMImplementation* self, const gchar* namespace_uri, const gchar* qualified_name, WebKitDOMDocumentType* doctype, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMImplementation * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    g_return_val_if_fail(qualified_name, 0);
    g_return_val_if_fail(doctype, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    WTF::String converted_qualified_name = WTF::String::fromUTF8(qualified_name);
    WebCore::DocumentType * converted_doctype = NULL;
    if (doctype != NULL) {
        converted_doctype = WebKit::core(doctype);
        g_return_val_if_fail(converted_doctype, 0);
    }
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Document> g_res = WTF::getPtr(item->createDocument(converted_namespace_uri, converted_qualified_name, converted_doctype, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMDocument* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCSSStyleSheet*
webkit_dom_dom_implementation_create_css_style_sheet(WebKitDOMDOMImplementation* self, const gchar* title, const gchar* media, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMImplementation * item = WebKit::core(self);
    g_return_val_if_fail(title, 0);
    g_return_val_if_fail(media, 0);
    WTF::String converted_title = WTF::String::fromUTF8(title);
    WTF::String converted_media = WTF::String::fromUTF8(media);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::CSSStyleSheet> g_res = WTF::getPtr(item->createCSSStyleSheet(converted_title, converted_media, ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMCSSStyleSheet* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHTMLDocument*
webkit_dom_dom_implementation_create_html_document(WebKitDOMDOMImplementation* self, const gchar* title)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMImplementation * item = WebKit::core(self);
    g_return_val_if_fail(title, 0);
    WTF::String converted_title = WTF::String::fromUTF8(title);
    PassRefPtr<WebCore::HTMLDocument> g_res = WTF::getPtr(item->createHTMLDocument(converted_title));
    WebKitDOMHTMLDocument* res = WebKit::kit(g_res.get());
    return res;
}

