/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "HTMLScriptElement.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMHTMLScriptElement.h"
#include "webkit/WebKitDOMHTMLScriptElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLScriptElement* kit(WebCore::HTMLScriptElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLScriptElement*>(ret);

    return static_cast<WebKitDOMHTMLScriptElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLScriptElement(obj)));
}

WebCore::HTMLScriptElement* core(WebKitDOMHTMLScriptElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLScriptElement* coreObject = static_cast<WebCore::HTMLScriptElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLScriptElement* wrapHTMLScriptElement(WebCore::HTMLScriptElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_SCRIPT_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_SCRIPT_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLScriptElement, webkit_dom_html_script_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_TEXT,
    PROP_HTML_FOR,
    PROP_EVENT,
    PROP_CHARSET,
    PROP_ASYNC,
    PROP_DEFER,
    PROP_SRC,
    PROP_TYPE,
    PROP_CROSS_ORIGIN,
};

static void webkit_dom_html_script_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLScriptElement* coreObject = static_cast<WebCore::HTMLScriptElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_script_element_parent_class)->finalize(object);
}

static void webkit_dom_html_script_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLScriptElement* self = WEBKIT_DOM_HTML_SCRIPT_ELEMENT(object);
    WebCore::HTMLScriptElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_TEXT:
    {
        coreSelf->setText(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HTML_FOR:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::forAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_EVENT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::eventAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CHARSET:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::charsetAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_ASYNC:
    {
        coreSelf->setAsync((g_value_get_boolean(value)));
        break;
    }
    case PROP_DEFER:
    {
        coreSelf->setBooleanAttribute(WebCore::HTMLNames::deferAttr, (g_value_get_boolean(value)));
        break;
    }
    case PROP_SRC:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::srcAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_TYPE:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::typeAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CROSS_ORIGIN:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::crossoriginAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_script_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLScriptElement* self = WEBKIT_DOM_HTML_SCRIPT_ELEMENT(object);
    WebCore::HTMLScriptElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_TEXT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->text()));
        break;
    }
    case PROP_HTML_FOR:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::forAttr)));
        break;
    }
    case PROP_EVENT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::eventAttr)));
        break;
    }
    case PROP_CHARSET:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::charsetAttr)));
        break;
    }
    case PROP_ASYNC:
    {
        g_value_set_boolean(value, coreSelf->async());
        break;
    }
    case PROP_DEFER:
    {
        g_value_set_boolean(value, coreSelf->hasAttribute(WebCore::HTMLNames::deferAttr));
        break;
    }
    case PROP_SRC:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getURLAttribute(WebCore::HTMLNames::srcAttr)));
        break;
    }
    case PROP_TYPE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::typeAttr)));
        break;
    }
    case PROP_CROSS_ORIGIN:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::crossoriginAttr)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_script_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_script_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_script_element_parent_class)->constructed(object);
}

static void webkit_dom_html_script_element_class_init(WebKitDOMHTMLScriptElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_script_element_finalize;
    gobjectClass->set_property = webkit_dom_html_script_element_set_property;
    gobjectClass->get_property = webkit_dom_html_script_element_get_property;
    gobjectClass->constructed = webkit_dom_html_script_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_TEXT,
                                    g_param_spec_string("text", /* name */
                                                           "html_script_element_text", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.text", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HTML_FOR,
                                    g_param_spec_string("html-for", /* name */
                                                           "html_script_element_html-for", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.html-for", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_EVENT,
                                    g_param_spec_string("event", /* name */
                                                           "html_script_element_event", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.event", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CHARSET,
                                    g_param_spec_string("charset", /* name */
                                                           "html_script_element_charset", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.charset", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ASYNC,
                                    g_param_spec_boolean("async", /* name */
                                                           "html_script_element_async", /* short description */
                                                           "read-write  gboolean HTMLScriptElement.async", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DEFER,
                                    g_param_spec_boolean("defer", /* name */
                                                           "html_script_element_defer", /* short description */
                                                           "read-write  gboolean HTMLScriptElement.defer", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SRC,
                                    g_param_spec_string("src", /* name */
                                                           "html_script_element_src", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.src", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TYPE,
                                    g_param_spec_string("type", /* name */
                                                           "html_script_element_type", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.type", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CROSS_ORIGIN,
                                    g_param_spec_string("cross-origin", /* name */
                                                           "html_script_element_cross-origin", /* short description */
                                                           "read-write  gchar* HTMLScriptElement.cross-origin", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_html_script_element_init(WebKitDOMHTMLScriptElement* request)
{
}

gchar*
webkit_dom_html_script_element_get_text(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->text());
    return res;
}

void
webkit_dom_html_script_element_set_text(WebKitDOMHTMLScriptElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setText(converted_value);
}

gchar*
webkit_dom_html_script_element_get_html_for(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::forAttr));
    return res;
}

void
webkit_dom_html_script_element_set_html_for(WebKitDOMHTMLScriptElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::forAttr, converted_value);
}

gchar*
webkit_dom_html_script_element_get_event(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::eventAttr));
    return res;
}

void
webkit_dom_html_script_element_set_event(WebKitDOMHTMLScriptElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::eventAttr, converted_value);
}

gchar*
webkit_dom_html_script_element_get_charset(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::charsetAttr));
    return res;
}

void
webkit_dom_html_script_element_set_charset(WebKitDOMHTMLScriptElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::charsetAttr, converted_value);
}

gboolean
webkit_dom_html_script_element_get_async(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gboolean res = item->async();
    return res;
}

void
webkit_dom_html_script_element_set_async(WebKitDOMHTMLScriptElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    item->setAsync(value);
}

gboolean
webkit_dom_html_script_element_get_defer(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gboolean res = item->hasAttribute(WebCore::HTMLNames::deferAttr);
    return res;
}

void
webkit_dom_html_script_element_set_defer(WebKitDOMHTMLScriptElement* self, gboolean value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::deferAttr, value);
}

gchar*
webkit_dom_html_script_element_get_src(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getURLAttribute(WebCore::HTMLNames::srcAttr));
    return res;
}

void
webkit_dom_html_script_element_set_src(WebKitDOMHTMLScriptElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::srcAttr, converted_value);
}

gchar*
webkit_dom_html_script_element_get_cross_origin(WebKitDOMHTMLScriptElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::crossoriginAttr));
    return res;
}

void
webkit_dom_html_script_element_set_cross_origin(WebKitDOMHTMLScriptElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLScriptElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::crossoriginAttr, converted_value);
}

