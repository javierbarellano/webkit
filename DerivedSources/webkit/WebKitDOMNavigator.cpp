/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMMimeTypeArray.h"
#include "DOMObjectCache.h"
#include "DOMPluginArray.h"
#include "ExceptionCode.h"
#include "Geolocation.h"
#include "JSMainThreadExecState.h"
#include "Navigator.h"
#include "NavigatorGeolocation.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMDOMMimeTypeArray.h"
#include "webkit/WebKitDOMDOMMimeTypeArrayPrivate.h"
#include "webkit/WebKitDOMDOMPluginArray.h"
#include "webkit/WebKitDOMDOMPluginArrayPrivate.h"
#include "webkit/WebKitDOMGeolocation.h"
#include "webkit/WebKitDOMGeolocationPrivate.h"
#include "webkit/WebKitDOMNavigator.h"
#include "webkit/WebKitDOMNavigatorPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMNavigator* kit(WebCore::Navigator* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMNavigator*>(ret);

    return static_cast<WebKitDOMNavigator*>(DOMObjectCache::put(obj, WebKit::wrapNavigator(obj)));
}

WebCore::Navigator* core(WebKitDOMNavigator* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Navigator* coreObject = static_cast<WebCore::Navigator*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMNavigator* wrapNavigator(WebCore::Navigator* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_NAVIGATOR(g_object_new(WEBKIT_TYPE_DOM_NAVIGATOR,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMNavigator, webkit_dom_navigator, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_APP_CODE_NAME,
    PROP_APP_NAME,
    PROP_APP_VERSION,
    PROP_LANGUAGE,
    PROP_USER_AGENT,
    PROP_PLATFORM,
    PROP_PLUGINS,
    PROP_MIME_TYPES,
    PROP_PRODUCT,
    PROP_PRODUCT_SUB,
    PROP_VENDOR,
    PROP_VENDOR_SUB,
    PROP_COOKIE_ENABLED,
    PROP_ON_LINE,
#if ENABLE(GEOLOCATION)
    PROP_GEOLOCATION,
#endif /* ENABLE(GEOLOCATION) */
};

static void webkit_dom_navigator_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Navigator* coreObject = static_cast<WebCore::Navigator *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_navigator_parent_class)->finalize(object);
}

static void webkit_dom_navigator_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_navigator_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMNavigator* self = WEBKIT_DOM_NAVIGATOR(object);
    WebCore::Navigator* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_APP_CODE_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->appCodeName()));
        break;
    }
    case PROP_APP_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->appName()));
        break;
    }
    case PROP_APP_VERSION:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->appVersion()));
        break;
    }
    case PROP_LANGUAGE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->language()));
        break;
    }
    case PROP_USER_AGENT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->userAgent()));
        break;
    }
    case PROP_PLATFORM:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->platform()));
        break;
    }
    case PROP_PLUGINS:
    {
        RefPtr<WebCore::DOMPluginArray> ptr = coreSelf->plugins();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_MIME_TYPES:
    {
        RefPtr<WebCore::DOMMimeTypeArray> ptr = coreSelf->mimeTypes();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_PRODUCT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->product()));
        break;
    }
    case PROP_PRODUCT_SUB:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->productSub()));
        break;
    }
    case PROP_VENDOR:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->vendor()));
        break;
    }
    case PROP_VENDOR_SUB:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->vendorSub()));
        break;
    }
    case PROP_COOKIE_ENABLED:
    {
        g_value_set_boolean(value, coreSelf->cookieEnabled());
        break;
    }
    case PROP_ON_LINE:
    {
        g_value_set_boolean(value, coreSelf->onLine());
        break;
    }
#if ENABLE(GEOLOCATION)
    case PROP_GEOLOCATION:
    {
        RefPtr<WebCore::Geolocation> ptr = WebCore::NavigatorGeolocation::geolocation(coreSelf);
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
#endif /* ENABLE(GEOLOCATION) */
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_navigator_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_navigator_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_navigator_parent_class)->constructed(object);
}

static void webkit_dom_navigator_class_init(WebKitDOMNavigatorClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_navigator_finalize;
    gobjectClass->set_property = webkit_dom_navigator_set_property;
    gobjectClass->get_property = webkit_dom_navigator_get_property;
    gobjectClass->constructed = webkit_dom_navigator_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_APP_CODE_NAME,
                                    g_param_spec_string("app-code-name", /* name */
                                                           "navigator_app-code-name", /* short description */
                                                           "read-only  gchar* Navigator.app-code-name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_APP_NAME,
                                    g_param_spec_string("app-name", /* name */
                                                           "navigator_app-name", /* short description */
                                                           "read-only  gchar* Navigator.app-name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_APP_VERSION,
                                    g_param_spec_string("app-version", /* name */
                                                           "navigator_app-version", /* short description */
                                                           "read-only  gchar* Navigator.app-version", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LANGUAGE,
                                    g_param_spec_string("language", /* name */
                                                           "navigator_language", /* short description */
                                                           "read-only  gchar* Navigator.language", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_USER_AGENT,
                                    g_param_spec_string("user-agent", /* name */
                                                           "navigator_user-agent", /* short description */
                                                           "read-only  gchar* Navigator.user-agent", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PLATFORM,
                                    g_param_spec_string("platform", /* name */
                                                           "navigator_platform", /* short description */
                                                           "read-only  gchar* Navigator.platform", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PLUGINS,
                                    g_param_spec_object("plugins", /* name */
                                                           "navigator_plugins", /* short description */
                                                           "read-only  WebKitDOMDOMPluginArray* Navigator.plugins", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_PLUGIN_ARRAY, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_MIME_TYPES,
                                    g_param_spec_object("mime-types", /* name */
                                                           "navigator_mime-types", /* short description */
                                                           "read-only  WebKitDOMDOMMimeTypeArray* Navigator.mime-types", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_MIME_TYPE_ARRAY, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PRODUCT,
                                    g_param_spec_string("product", /* name */
                                                           "navigator_product", /* short description */
                                                           "read-only  gchar* Navigator.product", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PRODUCT_SUB,
                                    g_param_spec_string("product-sub", /* name */
                                                           "navigator_product-sub", /* short description */
                                                           "read-only  gchar* Navigator.product-sub", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_VENDOR,
                                    g_param_spec_string("vendor", /* name */
                                                           "navigator_vendor", /* short description */
                                                           "read-only  gchar* Navigator.vendor", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_VENDOR_SUB,
                                    g_param_spec_string("vendor-sub", /* name */
                                                           "navigator_vendor-sub", /* short description */
                                                           "read-only  gchar* Navigator.vendor-sub", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_COOKIE_ENABLED,
                                    g_param_spec_boolean("cookie-enabled", /* name */
                                                           "navigator_cookie-enabled", /* short description */
                                                           "read-only  gboolean Navigator.cookie-enabled", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ON_LINE,
                                    g_param_spec_boolean("on-line", /* name */
                                                           "navigator_on-line", /* short description */
                                                           "read-only  gboolean Navigator.on-line", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
#if ENABLE(GEOLOCATION)
    g_object_class_install_property(gobjectClass,
                                    PROP_GEOLOCATION,
                                    g_param_spec_object("geolocation", /* name */
                                                           "navigator_geolocation", /* short description */
                                                           "read-only  WebKitDOMGeolocation* Navigator.geolocation", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_GEOLOCATION, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
#endif /* ENABLE(GEOLOCATION) */


}

static void webkit_dom_navigator_init(WebKitDOMNavigator* request)
{
}

gboolean
webkit_dom_navigator_java_enabled(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gboolean res = item->javaEnabled();
    return res;
}

void
webkit_dom_navigator_get_storage_updates(WebKitDOMNavigator* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    item->getStorageUpdates();
}

gchar*
webkit_dom_navigator_get_app_code_name(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->appCodeName());
    return res;
}

gchar*
webkit_dom_navigator_get_app_name(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->appName());
    return res;
}

gchar*
webkit_dom_navigator_get_app_version(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->appVersion());
    return res;
}

gchar*
webkit_dom_navigator_get_language(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->language());
    return res;
}

gchar*
webkit_dom_navigator_get_user_agent(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->userAgent());
    return res;
}

gchar*
webkit_dom_navigator_get_platform(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->platform());
    return res;
}

WebKitDOMDOMPluginArray*
webkit_dom_navigator_get_plugins(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMPluginArray> g_res = WTF::getPtr(item->plugins());
    WebKitDOMDOMPluginArray* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMMimeTypeArray*
webkit_dom_navigator_get_mime_types(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMMimeTypeArray> g_res = WTF::getPtr(item->mimeTypes());
    WebKitDOMDOMMimeTypeArray* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_navigator_get_product(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->product());
    return res;
}

gchar*
webkit_dom_navigator_get_product_sub(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->productSub());
    return res;
}

gchar*
webkit_dom_navigator_get_vendor(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->vendor());
    return res;
}

gchar*
webkit_dom_navigator_get_vendor_sub(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->vendorSub());
    return res;
}

gboolean
webkit_dom_navigator_get_cookie_enabled(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gboolean res = item->cookieEnabled();
    return res;
}

gboolean
webkit_dom_navigator_get_on_line(WebKitDOMNavigator* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    gboolean res = item->onLine();
    return res;
}

WebKitDOMGeolocation*
webkit_dom_navigator_get_geolocation(WebKitDOMNavigator* self)
{
#if ENABLE(GEOLOCATION)
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Navigator * item = WebKit::core(self);
    PassRefPtr<WebCore::Geolocation> g_res = WTF::getPtr(WebCore::NavigatorGeolocation::geolocation(item));
    WebKitDOMGeolocation* res = WebKit::kit(g_res.get());
    return res;
#else
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Geolocation")
    return NULL;
#endif /* ENABLE(GEOLOCATION) */
}

