/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "HTMLAppletElement.h"
#include "HTMLNames.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMHTMLAppletElement.h"
#include "webkit/WebKitDOMHTMLAppletElementPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMHTMLAppletElement* kit(WebCore::HTMLAppletElement* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMHTMLAppletElement*>(ret);

    return static_cast<WebKitDOMHTMLAppletElement*>(DOMObjectCache::put(obj, WebKit::wrapHTMLAppletElement(obj)));
}

WebCore::HTMLAppletElement* core(WebKitDOMHTMLAppletElement* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::HTMLAppletElement* coreObject = static_cast<WebCore::HTMLAppletElement*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMHTMLAppletElement* wrapHTMLAppletElement(WebCore::HTMLAppletElement* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_HTML_APPLET_ELEMENT(g_object_new(WEBKIT_TYPE_DOM_HTML_APPLET_ELEMENT,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMHTMLAppletElement, webkit_dom_html_applet_element, WEBKIT_TYPE_DOM_HTML_ELEMENT)

enum {
    PROP_0,
    PROP_ALIGN,
    PROP_ALT,
    PROP_ARCHIVE,
    PROP_CODE,
    PROP_CODE_BASE,
    PROP_HEIGHT,
    PROP_HSPACE,
    PROP_NAME,
    PROP_OBJECT,
    PROP_VSPACE,
    PROP_WIDTH,
};

static void webkit_dom_html_applet_element_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::HTMLAppletElement* coreObject = static_cast<WebCore::HTMLAppletElement *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_html_applet_element_parent_class)->finalize(object);
}

static void webkit_dom_html_applet_element_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLAppletElement* self = WEBKIT_DOM_HTML_APPLET_ELEMENT(object);
    WebCore::HTMLAppletElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ALIGN:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::alignAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_ALT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::altAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_ARCHIVE:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::archiveAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CODE:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::codeAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_CODE_BASE:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::codebaseAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HEIGHT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::heightAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_HSPACE:
    {
        coreSelf->setIntegralAttribute(WebCore::HTMLNames::hspaceAttr, (g_value_get_long(value)));
        break;
    }
    case PROP_NAME:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::nameAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_OBJECT:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::objectAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_VSPACE:
    {
        coreSelf->setIntegralAttribute(WebCore::HTMLNames::vspaceAttr, (g_value_get_long(value)));
        break;
    }
    case PROP_WIDTH:
    {
        coreSelf->setAttribute(WebCore::HTMLNames::widthAttr, WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_applet_element_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMHTMLAppletElement* self = WEBKIT_DOM_HTML_APPLET_ELEMENT(object);
    WebCore::HTMLAppletElement* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ALIGN:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::alignAttr)));
        break;
    }
    case PROP_ALT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::altAttr)));
        break;
    }
    case PROP_ARCHIVE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::archiveAttr)));
        break;
    }
    case PROP_CODE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::codeAttr)));
        break;
    }
    case PROP_CODE_BASE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::codebaseAttr)));
        break;
    }
    case PROP_HEIGHT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::heightAttr)));
        break;
    }
    case PROP_HSPACE:
    {
        g_value_set_long(value, coreSelf->getIntegralAttribute(WebCore::HTMLNames::hspaceAttr));
        break;
    }
    case PROP_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::nameAttr)));
        break;
    }
    case PROP_OBJECT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::objectAttr)));
        break;
    }
    case PROP_VSPACE:
    {
        g_value_set_long(value, coreSelf->getIntegralAttribute(WebCore::HTMLNames::vspaceAttr));
        break;
    }
    case PROP_WIDTH:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->getAttribute(WebCore::HTMLNames::widthAttr)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_html_applet_element_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_html_applet_element_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_html_applet_element_parent_class)->constructed(object);
}

static void webkit_dom_html_applet_element_class_init(WebKitDOMHTMLAppletElementClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_html_applet_element_finalize;
    gobjectClass->set_property = webkit_dom_html_applet_element_set_property;
    gobjectClass->get_property = webkit_dom_html_applet_element_get_property;
    gobjectClass->constructed = webkit_dom_html_applet_element_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_ALIGN,
                                    g_param_spec_string("align", /* name */
                                                           "html_applet_element_align", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.align", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ALT,
                                    g_param_spec_string("alt", /* name */
                                                           "html_applet_element_alt", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.alt", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ARCHIVE,
                                    g_param_spec_string("archive", /* name */
                                                           "html_applet_element_archive", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.archive", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CODE,
                                    g_param_spec_string("code", /* name */
                                                           "html_applet_element_code", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.code", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CODE_BASE,
                                    g_param_spec_string("code-base", /* name */
                                                           "html_applet_element_code-base", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.code-base", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HEIGHT,
                                    g_param_spec_string("height", /* name */
                                                           "html_applet_element_height", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.height", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HSPACE,
                                    g_param_spec_long("hspace", /* name */
                                                           "html_applet_element_hspace", /* short description */
                                                           "read-write  glong HTMLAppletElement.hspace", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NAME,
                                    g_param_spec_string("name", /* name */
                                                           "html_applet_element_name", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OBJECT,
                                    g_param_spec_string("object", /* name */
                                                           "html_applet_element_object", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.object", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_VSPACE,
                                    g_param_spec_long("vspace", /* name */
                                                           "html_applet_element_vspace", /* short description */
                                                           "read-write  glong HTMLAppletElement.vspace", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WIDTH,
                                    g_param_spec_string("width", /* name */
                                                           "html_applet_element_width", /* short description */
                                                           "read-write  gchar* HTMLAppletElement.width", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_html_applet_element_init(WebKitDOMHTMLAppletElement* request)
{
}

gchar*
webkit_dom_html_applet_element_get_align(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::alignAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_align(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::alignAttr, converted_value);
}

gchar*
webkit_dom_html_applet_element_get_alt(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::altAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_alt(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::altAttr, converted_value);
}

gchar*
webkit_dom_html_applet_element_get_archive(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::archiveAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_archive(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::archiveAttr, converted_value);
}

gchar*
webkit_dom_html_applet_element_get_code(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::codeAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_code(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::codeAttr, converted_value);
}

gchar*
webkit_dom_html_applet_element_get_code_base(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::codebaseAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_code_base(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::codebaseAttr, converted_value);
}

gchar*
webkit_dom_html_applet_element_get_height(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::heightAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_height(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::heightAttr, converted_value);
}

glong
webkit_dom_html_applet_element_get_hspace(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    glong res = item->getIntegralAttribute(WebCore::HTMLNames::hspaceAttr);
    return res;
}

void
webkit_dom_html_applet_element_set_hspace(WebKitDOMHTMLAppletElement* self, glong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    item->setIntegralAttribute(WebCore::HTMLNames::hspaceAttr, value);
}

gchar*
webkit_dom_html_applet_element_get_name(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::nameAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_name(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::nameAttr, converted_value);
}

gchar*
webkit_dom_html_applet_element_get_object(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::objectAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_object(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::objectAttr, converted_value);
}

glong
webkit_dom_html_applet_element_get_vspace(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    glong res = item->getIntegralAttribute(WebCore::HTMLNames::vspaceAttr);
    return res;
}

void
webkit_dom_html_applet_element_set_vspace(WebKitDOMHTMLAppletElement* self, glong value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    item->setIntegralAttribute(WebCore::HTMLNames::vspaceAttr, value);
}

gchar*
webkit_dom_html_applet_element_get_width(WebKitDOMHTMLAppletElement* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->getAttribute(WebCore::HTMLNames::widthAttr));
    return res;
}

void
webkit_dom_html_applet_element_set_width(WebKitDOMHTMLAppletElement* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::HTMLAppletElement * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setAttribute(WebCore::HTMLNames::widthAttr, converted_value);
}

