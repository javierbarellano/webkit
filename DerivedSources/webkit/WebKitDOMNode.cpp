/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "Document.h"
#include "Element.h"
#include "ExceptionCode.h"
#include "GObjectEventListener.h"
#include "JSMainThreadExecState.h"
#include "NamedNodeMap.h"
#include "Node.h"
#include "NodeList.h"
#include "WebKitDOMBinding.h"
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMDocument.h"
#include "webkit/WebKitDOMDocumentPrivate.h"
#include "webkit/WebKitDOMElement.h"
#include "webkit/WebKitDOMElementPrivate.h"
#include "webkit/WebKitDOMEvent.h"
#include "webkit/WebKitDOMEventPrivate.h"
#include "webkit/WebKitDOMNamedNodeMap.h"
#include "webkit/WebKitDOMNamedNodeMapPrivate.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodeList.h"
#include "webkit/WebKitDOMNodeListPrivate.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebCore::Node* core(WebKitDOMNode* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::Node* coreObject = static_cast<WebCore::Node*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMNode* wrapNode(WebCore::Node* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_NODE(g_object_new(WEBKIT_TYPE_DOM_NODE,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

static void webkit_dom_node_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
    WebCore::Event* coreEvent = WebKit::core(event);
    WebCore::Node* coreTarget = static_cast<WebCore::Node*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    coreTarget->dispatchEvent(coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
}

static gboolean webkit_dom_node_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GCallback handler, gboolean bubble, gpointer userData)
{
    WebCore::Node* coreTarget = static_cast<WebCore::Node*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebCore::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, bubble, userData);
}

static gboolean webkit_dom_node_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GCallback handler, gboolean bubble)
{
    WebCore::Node* coreTarget = static_cast<WebCore::Node*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebCore::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, bubble);
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_node_dispatch_event;
    iface->add_event_listener = webkit_dom_node_add_event_listener;
    iface->remove_event_listener = webkit_dom_node_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMNode, webkit_dom_node, WEBKIT_TYPE_DOM_OBJECT, G_IMPLEMENT_INTERFACE(WEBKIT_TYPE_DOM_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_NODE_NAME,
    PROP_NODE_VALUE,
    PROP_NODE_TYPE,
    PROP_PARENT_NODE,
    PROP_CHILD_NODES,
    PROP_FIRST_CHILD,
    PROP_LAST_CHILD,
    PROP_PREVIOUS_SIBLING,
    PROP_NEXT_SIBLING,
    PROP_ATTRIBUTES,
    PROP_OWNER_DOCUMENT,
    PROP_NAMESPACE_URI,
    PROP_PREFIX,
    PROP_LOCAL_NAME,
    PROP_BASE_URI,
    PROP_TEXT_CONTENT,
    PROP_PARENT_ELEMENT,
};

static void webkit_dom_node_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::Node* coreObject = static_cast<WebCore::Node *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_node_parent_class)->finalize(object);
}

static void webkit_dom_node_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMNode* self = WEBKIT_DOM_NODE(object);
    WebCore::Node* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_NODE_VALUE:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setNodeValue(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_PREFIX:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setPrefix(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    case PROP_TEXT_CONTENT:
    {
        WebCore::ExceptionCode ec = 0;
        coreSelf->setTextContent(WTF::String::fromUTF8(g_value_get_string(value)), ec);
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_node_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMNode* self = WEBKIT_DOM_NODE(object);
    WebCore::Node* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_NODE_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->nodeName()));
        break;
    }
    case PROP_NODE_VALUE:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->nodeValue()));
        break;
    }
    case PROP_NODE_TYPE:
    {
        g_value_set_uint(value, coreSelf->nodeType());
        break;
    }
    case PROP_PARENT_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->parentNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CHILD_NODES:
    {
        RefPtr<WebCore::NodeList> ptr = coreSelf->childNodes();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_FIRST_CHILD:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->firstChild();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_LAST_CHILD:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->lastChild();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_PREVIOUS_SIBLING:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->previousSibling();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_NEXT_SIBLING:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->nextSibling();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_ATTRIBUTES:
    {
        RefPtr<WebCore::NamedNodeMap> ptr = coreSelf->attributes();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_OWNER_DOCUMENT:
    {
        RefPtr<WebCore::Document> ptr = coreSelf->ownerDocument();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_NAMESPACE_URI:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->namespaceURI()));
        break;
    }
    case PROP_PREFIX:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->prefix()));
        break;
    }
    case PROP_LOCAL_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->localName()));
        break;
    }
    case PROP_BASE_URI:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->baseURI()));
        break;
    }
    case PROP_TEXT_CONTENT:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->textContent()));
        break;
    }
    case PROP_PARENT_ELEMENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->parentElement();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_node_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_node_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_node_parent_class)->constructed(object);
}

static void webkit_dom_node_class_init(WebKitDOMNodeClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_node_finalize;
    gobjectClass->set_property = webkit_dom_node_set_property;
    gobjectClass->get_property = webkit_dom_node_get_property;
    gobjectClass->constructed = webkit_dom_node_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_NODE_NAME,
                                    g_param_spec_string("node-name", /* name */
                                                           "node_node-name", /* short description */
                                                           "read-only  gchar* Node.node-name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NODE_VALUE,
                                    g_param_spec_string("node-value", /* name */
                                                           "node_node-value", /* short description */
                                                           "read-write  gchar* Node.node-value", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NODE_TYPE,
                                    g_param_spec_uint("node-type", /* name */
                                                           "node_node-type", /* short description */
                                                           "read-only  gushort Node.node-type", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXUINT, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PARENT_NODE,
                                    g_param_spec_object("parent-node", /* name */
                                                           "node_parent-node", /* short description */
                                                           "read-only  WebKitDOMNode* Node.parent-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CHILD_NODES,
                                    g_param_spec_object("child-nodes", /* name */
                                                           "node_child-nodes", /* short description */
                                                           "read-only  WebKitDOMNodeList* Node.child-nodes", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE_LIST, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FIRST_CHILD,
                                    g_param_spec_object("first-child", /* name */
                                                           "node_first-child", /* short description */
                                                           "read-only  WebKitDOMNode* Node.first-child", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LAST_CHILD,
                                    g_param_spec_object("last-child", /* name */
                                                           "node_last-child", /* short description */
                                                           "read-only  WebKitDOMNode* Node.last-child", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PREVIOUS_SIBLING,
                                    g_param_spec_object("previous-sibling", /* name */
                                                           "node_previous-sibling", /* short description */
                                                           "read-only  WebKitDOMNode* Node.previous-sibling", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NEXT_SIBLING,
                                    g_param_spec_object("next-sibling", /* name */
                                                           "node_next-sibling", /* short description */
                                                           "read-only  WebKitDOMNode* Node.next-sibling", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_ATTRIBUTES,
                                    g_param_spec_object("attributes", /* name */
                                                           "node_attributes", /* short description */
                                                           "read-only  WebKitDOMNamedNodeMap* Node.attributes", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NAMED_NODE_MAP, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OWNER_DOCUMENT,
                                    g_param_spec_object("owner-document", /* name */
                                                           "node_owner-document", /* short description */
                                                           "read-only  WebKitDOMDocument* Node.owner-document", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOCUMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NAMESPACE_URI,
                                    g_param_spec_string("namespace-uri", /* name */
                                                           "node_namespace-uri", /* short description */
                                                           "read-only  gchar* Node.namespace-uri", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PREFIX,
                                    g_param_spec_string("prefix", /* name */
                                                           "node_prefix", /* short description */
                                                           "read-write  gchar* Node.prefix", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LOCAL_NAME,
                                    g_param_spec_string("local-name", /* name */
                                                           "node_local-name", /* short description */
                                                           "read-only  gchar* Node.local-name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_BASE_URI,
                                    g_param_spec_string("base-uri", /* name */
                                                           "node_base-uri", /* short description */
                                                           "read-only  gchar* Node.base-uri", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TEXT_CONTENT,
                                    g_param_spec_string("text-content", /* name */
                                                           "node_text-content", /* short description */
                                                           "read-write  gchar* Node.text-content", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PARENT_ELEMENT,
                                    g_param_spec_object("parent-element", /* name */
                                                           "node_parent-element", /* short description */
                                                           "read-only  WebKitDOMElement* Node.parent-element", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));


}

static void webkit_dom_node_init(WebKitDOMNode* request)
{
}

WebKitDOMNode*
webkit_dom_node_insert_before(WebKitDOMNode* self, WebKitDOMNode* new_child, WebKitDOMNode* ref_child, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(new_child, 0);
    g_return_val_if_fail(ref_child, 0);
    WebCore::Node * converted_new_child = NULL;
    if (new_child != NULL) {
        converted_new_child = WebKit::core(new_child);
        g_return_val_if_fail(converted_new_child, 0);
    }
    WebCore::Node * converted_ref_child = NULL;
    if (ref_child != NULL) {
        converted_ref_child = WebKit::core(ref_child);
        g_return_val_if_fail(converted_ref_child, 0);
    }
    WebCore::ExceptionCode ec = 0;
    bool ok = item->insertBefore(converted_new_child, converted_ref_child, ec);
    if (ok)
    {
        WebKitDOMNode* res = WebKit::kit(converted_new_child);
        return res;
    }

    WebCore::ExceptionCodeDescription ecdesc(ec);
    g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
return NULL;}

WebKitDOMNode*
webkit_dom_node_replace_child(WebKitDOMNode* self, WebKitDOMNode* new_child, WebKitDOMNode* old_child, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(new_child, 0);
    g_return_val_if_fail(old_child, 0);
    WebCore::Node * converted_new_child = NULL;
    if (new_child != NULL) {
        converted_new_child = WebKit::core(new_child);
        g_return_val_if_fail(converted_new_child, 0);
    }
    WebCore::Node * converted_old_child = NULL;
    if (old_child != NULL) {
        converted_old_child = WebKit::core(old_child);
        g_return_val_if_fail(converted_old_child, 0);
    }
    WebCore::ExceptionCode ec = 0;
    bool ok = item->replaceChild(converted_new_child, converted_old_child, ec);
    if (ok)
    {
        WebKitDOMNode* res = WebKit::kit(converted_old_child);
        return res;
    }

    WebCore::ExceptionCodeDescription ecdesc(ec);
    g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
return NULL;}

WebKitDOMNode*
webkit_dom_node_remove_child(WebKitDOMNode* self, WebKitDOMNode* old_child, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(old_child, 0);
    WebCore::Node * converted_old_child = NULL;
    if (old_child != NULL) {
        converted_old_child = WebKit::core(old_child);
        g_return_val_if_fail(converted_old_child, 0);
    }
    WebCore::ExceptionCode ec = 0;
    bool ok = item->removeChild(converted_old_child, ec);
    if (ok)
    {
        WebKitDOMNode* res = WebKit::kit(converted_old_child);
        return res;
    }

    WebCore::ExceptionCodeDescription ecdesc(ec);
    g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
return NULL;}

WebKitDOMNode*
webkit_dom_node_append_child(WebKitDOMNode* self, WebKitDOMNode* new_child, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(new_child, 0);
    WebCore::Node * converted_new_child = NULL;
    if (new_child != NULL) {
        converted_new_child = WebKit::core(new_child);
        g_return_val_if_fail(converted_new_child, 0);
    }
    WebCore::ExceptionCode ec = 0;
    bool ok = item->appendChild(converted_new_child, ec);
    if (ok)
    {
        WebKitDOMNode* res = WebKit::kit(converted_new_child);
        return res;
    }

    WebCore::ExceptionCodeDescription ecdesc(ec);
    g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
return NULL;}

gboolean
webkit_dom_node_has_child_nodes(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gboolean res = item->hasChildNodes();
    return res;
}

WebKitDOMNode*
webkit_dom_node_clone_node(WebKitDOMNode* self, gboolean deep)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->cloneNode(deep));
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_node_normalize(WebKitDOMNode* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    item->normalize();
}

gboolean
webkit_dom_node_is_supported(WebKitDOMNode* self, const gchar* feature, const gchar* version)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(feature, 0);
    g_return_val_if_fail(version, 0);
    WTF::String converted_feature = WTF::String::fromUTF8(feature);
    WTF::String converted_version = WTF::String::fromUTF8(version);
    gboolean res = item->isSupported(converted_feature, converted_version);
    return res;
}

gboolean
webkit_dom_node_has_attributes(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gboolean res = item->hasAttributes();
    return res;
}

gboolean
webkit_dom_node_is_same_node(WebKitDOMNode* self, WebKitDOMNode* other)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(other, 0);
    WebCore::Node * converted_other = NULL;
    if (other != NULL) {
        converted_other = WebKit::core(other);
        g_return_val_if_fail(converted_other, 0);
    }
    gboolean res = item->isSameNode(converted_other);
    return res;
}

gboolean
webkit_dom_node_is_equal_node(WebKitDOMNode* self, WebKitDOMNode* other)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(other, 0);
    WebCore::Node * converted_other = NULL;
    if (other != NULL) {
        converted_other = WebKit::core(other);
        g_return_val_if_fail(converted_other, 0);
    }
    gboolean res = item->isEqualNode(converted_other);
    return res;
}

gchar*
webkit_dom_node_lookup_prefix(WebKitDOMNode* self, const gchar* namespace_uri)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    gchar* res = convertToUTF8String(item->lookupPrefix(converted_namespace_uri));
    return res;
}

gboolean
webkit_dom_node_is_default_namespace(WebKitDOMNode* self, const gchar* namespace_uri)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(namespace_uri, 0);
    WTF::String converted_namespace_uri = WTF::String::fromUTF8(namespace_uri);
    gboolean res = item->isDefaultNamespace(converted_namespace_uri);
    return res;
}

gchar*
webkit_dom_node_lookup_namespace_uri(WebKitDOMNode* self, const gchar* prefix)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(prefix, 0);
    WTF::String converted_prefix = WTF::String::fromUTF8(prefix);
    gchar* res = convertToUTF8String(item->lookupNamespaceURI(converted_prefix));
    return res;
}

gushort
webkit_dom_node_compare_document_position(WebKitDOMNode* self, WebKitDOMNode* other)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(other, 0);
    WebCore::Node * converted_other = NULL;
    if (other != NULL) {
        converted_other = WebKit::core(other);
        g_return_val_if_fail(converted_other, 0);
    }
    gushort res = item->compareDocumentPosition(converted_other);
    return res;
}

gboolean
webkit_dom_node_contains(WebKitDOMNode* self, WebKitDOMNode* other)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(other, 0);
    WebCore::Node * converted_other = NULL;
    if (other != NULL) {
        converted_other = WebKit::core(other);
        g_return_val_if_fail(converted_other, 0);
    }
    gboolean res = item->contains(converted_other);
    return res;
}

gboolean
webkit_dom_node_dispatch_event(WebKitDOMNode* self, WebKitDOMEvent* event, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_val_if_fail(event, 0);
    WebCore::Event * converted_event = NULL;
    if (event != NULL) {
        converted_event = WebKit::core(event);
        g_return_val_if_fail(converted_event, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gboolean res = item->dispatchEvent(converted_event, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

gchar*
webkit_dom_node_get_node_name(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->nodeName());
    return res;
}

gchar*
webkit_dom_node_get_node_value(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->nodeValue());
    return res;
}

void
webkit_dom_node_set_node_value(WebKitDOMNode* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setNodeValue(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gushort
webkit_dom_node_get_node_type(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gushort res = item->nodeType();
    return res;
}

WebKitDOMNode*
webkit_dom_node_get_parent_node(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->parentNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNodeList*
webkit_dom_node_get_child_nodes(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::NodeList> g_res = WTF::getPtr(item->childNodes());
    WebKitDOMNodeList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_node_get_first_child(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->firstChild());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_node_get_last_child(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->lastChild());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_node_get_previous_sibling(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->previousSibling());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_node_get_next_sibling(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->nextSibling());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNamedNodeMap*
webkit_dom_node_get_attributes(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::NamedNodeMap> g_res = WTF::getPtr(item->attributes());
    WebKitDOMNamedNodeMap* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDocument*
webkit_dom_node_get_owner_document(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Document> g_res = WTF::getPtr(item->ownerDocument());
    WebKitDOMDocument* res = WebKit::kit(g_res.get());
    return res;
}

gchar*
webkit_dom_node_get_namespace_uri(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->namespaceURI());
    return res;
}

gchar*
webkit_dom_node_get_prefix(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->prefix());
    return res;
}

void
webkit_dom_node_set_prefix(WebKitDOMNode* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setPrefix(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gchar*
webkit_dom_node_get_local_name(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->localName());
    return res;
}

gchar*
webkit_dom_node_get_base_uri(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->baseURI());
    return res;
}

gchar*
webkit_dom_node_get_text_content(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->textContent());
    return res;
}

void
webkit_dom_node_set_text_content(WebKitDOMNode* self, const gchar* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    WebCore::ExceptionCode ec = 0;
    item->setTextContent(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

WebKitDOMElement*
webkit_dom_node_get_parent_element(WebKitDOMNode* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::Node * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->parentElement());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

