/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "BarInfo.h"
#include "CSSStyleDeclaration.h"
#include "Console.h"
#include "DOMApplicationCache.h"
#include "DOMObjectCache.h"
#include "DOMSelection.h"
#include "DOMWindow.h"
#include "Document.h"
#include "Element.h"
#include "ExceptionCode.h"
#include "GObjectEventListener.h"
#include "History.h"
#include "JSMainThreadExecState.h"
#include "MediaQueryList.h"
#include "Navigator.h"
#include "Screen.h"
#include "Storage.h"
#include "StyleMedia.h"
#include "WebKitDOMBinding.h"
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitPoint.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMBarInfo.h"
#include "webkit/WebKitDOMBarInfoPrivate.h"
#include "webkit/WebKitDOMCSSStyleDeclaration.h"
#include "webkit/WebKitDOMCSSStyleDeclarationPrivate.h"
#include "webkit/WebKitDOMConsole.h"
#include "webkit/WebKitDOMConsolePrivate.h"
#include "webkit/WebKitDOMDOMApplicationCache.h"
#include "webkit/WebKitDOMDOMApplicationCachePrivate.h"
#include "webkit/WebKitDOMDOMSelection.h"
#include "webkit/WebKitDOMDOMSelectionPrivate.h"
#include "webkit/WebKitDOMDOMWindow.h"
#include "webkit/WebKitDOMDOMWindowPrivate.h"
#include "webkit/WebKitDOMDocument.h"
#include "webkit/WebKitDOMDocumentPrivate.h"
#include "webkit/WebKitDOMElement.h"
#include "webkit/WebKitDOMElementPrivate.h"
#include "webkit/WebKitDOMEvent.h"
#include "webkit/WebKitDOMEventPrivate.h"
#include "webkit/WebKitDOMHistory.h"
#include "webkit/WebKitDOMHistoryPrivate.h"
#include "webkit/WebKitDOMMediaQueryList.h"
#include "webkit/WebKitDOMMediaQueryListPrivate.h"
#include "webkit/WebKitDOMNavigator.h"
#include "webkit/WebKitDOMNavigatorPrivate.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkit/WebKitDOMScreen.h"
#include "webkit/WebKitDOMScreenPrivate.h"
#include "webkit/WebKitDOMStorage.h"
#include "webkit/WebKitDOMStoragePrivate.h"
#include "webkit/WebKitDOMStyleMedia.h"
#include "webkit/WebKitDOMStyleMediaPrivate.h"
#include "webkit/WebKitDOMWebKitPoint.h"
#include "webkit/WebKitDOMWebKitPointPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMDOMWindow* kit(WebCore::DOMWindow* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMDOMWindow*>(ret);

    return static_cast<WebKitDOMDOMWindow*>(DOMObjectCache::put(obj, WebKit::wrapDOMWindow(obj)));
}

WebCore::DOMWindow* core(WebKitDOMDOMWindow* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::DOMWindow* coreObject = static_cast<WebCore::DOMWindow*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMDOMWindow* wrapDOMWindow(WebCore::DOMWindow* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_DOM_WINDOW(g_object_new(WEBKIT_TYPE_DOM_DOM_WINDOW,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

static void webkit_dom_dom_window_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
    WebCore::Event* coreEvent = WebKit::core(event);
    WebCore::DOMWindow* coreTarget = static_cast<WebCore::DOMWindow*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    coreTarget->dispatchEvent(coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
}

static gboolean webkit_dom_dom_window_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GCallback handler, gboolean bubble, gpointer userData)
{
    WebCore::DOMWindow* coreTarget = static_cast<WebCore::DOMWindow*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebCore::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, bubble, userData);
}

static gboolean webkit_dom_dom_window_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GCallback handler, gboolean bubble)
{
    WebCore::DOMWindow* coreTarget = static_cast<WebCore::DOMWindow*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebCore::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, bubble);
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_dom_window_dispatch_event;
    iface->add_event_listener = webkit_dom_dom_window_add_event_listener;
    iface->remove_event_listener = webkit_dom_dom_window_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMDOMWindow, webkit_dom_dom_window, WEBKIT_TYPE_DOM_OBJECT, G_IMPLEMENT_INTERFACE(WEBKIT_TYPE_DOM_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_SCREEN,
    PROP_HISTORY,
    PROP_LOCATIONBAR,
    PROP_MENUBAR,
    PROP_PERSONALBAR,
    PROP_SCROLLBARS,
    PROP_STATUSBAR,
    PROP_TOOLBAR,
    PROP_NAVIGATOR,
    PROP_CLIENT_INFORMATION,
    PROP_FRAME_ELEMENT,
    PROP_OFFSCREEN_BUFFERING,
    PROP_OUTER_HEIGHT,
    PROP_OUTER_WIDTH,
    PROP_INNER_HEIGHT,
    PROP_INNER_WIDTH,
    PROP_SCREEN_X,
    PROP_SCREEN_Y,
    PROP_SCREEN_LEFT,
    PROP_SCREEN_TOP,
    PROP_SCROLL_X,
    PROP_SCROLL_Y,
    PROP_PAGE_X_OFFSET,
    PROP_PAGE_Y_OFFSET,
    PROP_CLOSED,
    PROP_LENGTH,
    PROP_NAME,
    PROP_STATUS,
    PROP_DEFAULT_STATUS,
    PROP_SELF,
    PROP_WINDOW,
    PROP_FRAMES,
    PROP_OPENER,
    PROP_PARENT,
    PROP_TOP,
    PROP_DOCUMENT,
    PROP_STYLE_MEDIA,
    PROP_DEVICE_PIXEL_RATIO,
    PROP_APPLICATION_CACHE,
    PROP_SESSION_STORAGE,
    PROP_LOCAL_STORAGE,
    PROP_CONSOLE,
};

static void webkit_dom_dom_window_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::DOMWindow* coreObject = static_cast<WebCore::DOMWindow *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_dom_window_parent_class)->finalize(object);
}

static void webkit_dom_dom_window_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMDOMWindow* self = WEBKIT_DOM_DOM_WINDOW(object);
    WebCore::DOMWindow* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_NAME:
    {
        coreSelf->setName(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_STATUS:
    {
        coreSelf->setStatus(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    case PROP_DEFAULT_STATUS:
    {
        coreSelf->setDefaultStatus(WTF::String::fromUTF8(g_value_get_string(value)));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_dom_window_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMDOMWindow* self = WEBKIT_DOM_DOM_WINDOW(object);
    WebCore::DOMWindow* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_SCREEN:
    {
        RefPtr<WebCore::Screen> ptr = coreSelf->screen();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_HISTORY:
    {
        RefPtr<WebCore::History> ptr = coreSelf->history();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_LOCATIONBAR:
    {
        RefPtr<WebCore::BarInfo> ptr = coreSelf->locationbar();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_MENUBAR:
    {
        RefPtr<WebCore::BarInfo> ptr = coreSelf->menubar();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_PERSONALBAR:
    {
        RefPtr<WebCore::BarInfo> ptr = coreSelf->personalbar();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_SCROLLBARS:
    {
        RefPtr<WebCore::BarInfo> ptr = coreSelf->scrollbars();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_STATUSBAR:
    {
        RefPtr<WebCore::BarInfo> ptr = coreSelf->statusbar();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_TOOLBAR:
    {
        RefPtr<WebCore::BarInfo> ptr = coreSelf->toolbar();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_NAVIGATOR:
    {
        RefPtr<WebCore::Navigator> ptr = coreSelf->navigator();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CLIENT_INFORMATION:
    {
        RefPtr<WebCore::Navigator> ptr = coreSelf->clientInformation();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_FRAME_ELEMENT:
    {
        RefPtr<WebCore::Element> ptr = coreSelf->frameElement();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_OFFSCREEN_BUFFERING:
    {
        g_value_set_boolean(value, coreSelf->offscreenBuffering());
        break;
    }
    case PROP_OUTER_HEIGHT:
    {
        g_value_set_long(value, coreSelf->outerHeight());
        break;
    }
    case PROP_OUTER_WIDTH:
    {
        g_value_set_long(value, coreSelf->outerWidth());
        break;
    }
    case PROP_INNER_HEIGHT:
    {
        g_value_set_long(value, coreSelf->innerHeight());
        break;
    }
    case PROP_INNER_WIDTH:
    {
        g_value_set_long(value, coreSelf->innerWidth());
        break;
    }
    case PROP_SCREEN_X:
    {
        g_value_set_long(value, coreSelf->screenX());
        break;
    }
    case PROP_SCREEN_Y:
    {
        g_value_set_long(value, coreSelf->screenY());
        break;
    }
    case PROP_SCREEN_LEFT:
    {
        g_value_set_long(value, coreSelf->screenLeft());
        break;
    }
    case PROP_SCREEN_TOP:
    {
        g_value_set_long(value, coreSelf->screenTop());
        break;
    }
    case PROP_SCROLL_X:
    {
        g_value_set_long(value, coreSelf->scrollX());
        break;
    }
    case PROP_SCROLL_Y:
    {
        g_value_set_long(value, coreSelf->scrollY());
        break;
    }
    case PROP_PAGE_X_OFFSET:
    {
        g_value_set_long(value, coreSelf->pageXOffset());
        break;
    }
    case PROP_PAGE_Y_OFFSET:
    {
        g_value_set_long(value, coreSelf->pageYOffset());
        break;
    }
    case PROP_CLOSED:
    {
        g_value_set_boolean(value, coreSelf->closed());
        break;
    }
    case PROP_LENGTH:
    {
        g_value_set_ulong(value, coreSelf->length());
        break;
    }
    case PROP_NAME:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->name()));
        break;
    }
    case PROP_STATUS:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->status()));
        break;
    }
    case PROP_DEFAULT_STATUS:
    {
        g_value_take_string(value, convertToUTF8String(coreSelf->defaultStatus()));
        break;
    }
    case PROP_SELF:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->self();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_WINDOW:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->window();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_FRAMES:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->frames();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_OPENER:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->opener();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_PARENT:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->parent();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_TOP:
    {
        RefPtr<WebCore::DOMWindow> ptr = coreSelf->top();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_DOCUMENT:
    {
        RefPtr<WebCore::Document> ptr = coreSelf->document();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_STYLE_MEDIA:
    {
        RefPtr<WebCore::StyleMedia> ptr = coreSelf->styleMedia();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_DEVICE_PIXEL_RATIO:
    {
        g_value_set_double(value, coreSelf->devicePixelRatio());
        break;
    }
    case PROP_APPLICATION_CACHE:
    {
        RefPtr<WebCore::DOMApplicationCache> ptr = coreSelf->applicationCache();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_SESSION_STORAGE:
    {
        WebCore::ExceptionCode ec = 0;
        RefPtr<WebCore::Storage> ptr = coreSelf->sessionStorage(ec);
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_LOCAL_STORAGE:
    {
        WebCore::ExceptionCode ec = 0;
        RefPtr<WebCore::Storage> ptr = coreSelf->localStorage(ec);
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_CONSOLE:
    {
        RefPtr<WebCore::Console> ptr = coreSelf->console();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_dom_window_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_dom_window_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_dom_window_parent_class)->constructed(object);
}

static void webkit_dom_dom_window_class_init(WebKitDOMDOMWindowClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_dom_window_finalize;
    gobjectClass->set_property = webkit_dom_dom_window_set_property;
    gobjectClass->get_property = webkit_dom_dom_window_get_property;
    gobjectClass->constructed = webkit_dom_dom_window_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_SCREEN,
                                    g_param_spec_object("screen", /* name */
                                                           "dom_window_screen", /* short description */
                                                           "read-write  WebKitDOMScreen* DOMWindow.screen", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_SCREEN, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_HISTORY,
                                    g_param_spec_object("history", /* name */
                                                           "dom_window_history", /* short description */
                                                           "read-write  WebKitDOMHistory* DOMWindow.history", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_HISTORY, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LOCATIONBAR,
                                    g_param_spec_object("locationbar", /* name */
                                                           "dom_window_locationbar", /* short description */
                                                           "read-write  WebKitDOMBarInfo* DOMWindow.locationbar", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_BAR_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_MENUBAR,
                                    g_param_spec_object("menubar", /* name */
                                                           "dom_window_menubar", /* short description */
                                                           "read-write  WebKitDOMBarInfo* DOMWindow.menubar", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_BAR_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PERSONALBAR,
                                    g_param_spec_object("personalbar", /* name */
                                                           "dom_window_personalbar", /* short description */
                                                           "read-write  WebKitDOMBarInfo* DOMWindow.personalbar", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_BAR_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLLBARS,
                                    g_param_spec_object("scrollbars", /* name */
                                                           "dom_window_scrollbars", /* short description */
                                                           "read-write  WebKitDOMBarInfo* DOMWindow.scrollbars", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_BAR_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_STATUSBAR,
                                    g_param_spec_object("statusbar", /* name */
                                                           "dom_window_statusbar", /* short description */
                                                           "read-write  WebKitDOMBarInfo* DOMWindow.statusbar", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_BAR_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TOOLBAR,
                                    g_param_spec_object("toolbar", /* name */
                                                           "dom_window_toolbar", /* short description */
                                                           "read-write  WebKitDOMBarInfo* DOMWindow.toolbar", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_BAR_INFO, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NAVIGATOR,
                                    g_param_spec_object("navigator", /* name */
                                                           "dom_window_navigator", /* short description */
                                                           "read-write  WebKitDOMNavigator* DOMWindow.navigator", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NAVIGATOR, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLIENT_INFORMATION,
                                    g_param_spec_object("client-information", /* name */
                                                           "dom_window_client-information", /* short description */
                                                           "read-write  WebKitDOMNavigator* DOMWindow.client-information", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NAVIGATOR, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FRAME_ELEMENT,
                                    g_param_spec_object("frame-element", /* name */
                                                           "dom_window_frame-element", /* short description */
                                                           "read-only  WebKitDOMElement* DOMWindow.frame-element", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_ELEMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OFFSCREEN_BUFFERING,
                                    g_param_spec_boolean("offscreen-buffering", /* name */
                                                           "dom_window_offscreen-buffering", /* short description */
                                                           "read-write  gboolean DOMWindow.offscreen-buffering", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OUTER_HEIGHT,
                                    g_param_spec_long("outer-height", /* name */
                                                           "dom_window_outer-height", /* short description */
                                                           "read-write  glong DOMWindow.outer-height", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OUTER_WIDTH,
                                    g_param_spec_long("outer-width", /* name */
                                                           "dom_window_outer-width", /* short description */
                                                           "read-write  glong DOMWindow.outer-width", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_INNER_HEIGHT,
                                    g_param_spec_long("inner-height", /* name */
                                                           "dom_window_inner-height", /* short description */
                                                           "read-write  glong DOMWindow.inner-height", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_INNER_WIDTH,
                                    g_param_spec_long("inner-width", /* name */
                                                           "dom_window_inner-width", /* short description */
                                                           "read-write  glong DOMWindow.inner-width", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCREEN_X,
                                    g_param_spec_long("screen-x", /* name */
                                                           "dom_window_screen-x", /* short description */
                                                           "read-write  glong DOMWindow.screen-x", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCREEN_Y,
                                    g_param_spec_long("screen-y", /* name */
                                                           "dom_window_screen-y", /* short description */
                                                           "read-write  glong DOMWindow.screen-y", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCREEN_LEFT,
                                    g_param_spec_long("screen-left", /* name */
                                                           "dom_window_screen-left", /* short description */
                                                           "read-write  glong DOMWindow.screen-left", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCREEN_TOP,
                                    g_param_spec_long("screen-top", /* name */
                                                           "dom_window_screen-top", /* short description */
                                                           "read-write  glong DOMWindow.screen-top", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_X,
                                    g_param_spec_long("scroll-x", /* name */
                                                           "dom_window_scroll-x", /* short description */
                                                           "read-write  glong DOMWindow.scroll-x", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SCROLL_Y,
                                    g_param_spec_long("scroll-y", /* name */
                                                           "dom_window_scroll-y", /* short description */
                                                           "read-write  glong DOMWindow.scroll-y", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PAGE_X_OFFSET,
                                    g_param_spec_long("page-x-offset", /* name */
                                                           "dom_window_page-x-offset", /* short description */
                                                           "read-only  glong DOMWindow.page-x-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PAGE_Y_OFFSET,
                                    g_param_spec_long("page-y-offset", /* name */
                                                           "dom_window_page-y-offset", /* short description */
                                                           "read-only  glong DOMWindow.page-y-offset", /* longer - could do with some extra doc stuff here */
                                                           G_MINLONG, /* min */
G_MAXLONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CLOSED,
                                    g_param_spec_boolean("closed", /* name */
                                                           "dom_window_closed", /* short description */
                                                           "read-only  gboolean DOMWindow.closed", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LENGTH,
                                    g_param_spec_ulong("length", /* name */
                                                           "dom_window_length", /* short description */
                                                           "read-write  gulong DOMWindow.length", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXULONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_NAME,
                                    g_param_spec_string("name", /* name */
                                                           "dom_window_name", /* short description */
                                                           "read-write  gchar* DOMWindow.name", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_STATUS,
                                    g_param_spec_string("status", /* name */
                                                           "dom_window_status", /* short description */
                                                           "read-write  gchar* DOMWindow.status", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DEFAULT_STATUS,
                                    g_param_spec_string("default-status", /* name */
                                                           "dom_window_default-status", /* short description */
                                                           "read-write  gchar* DOMWindow.default-status", /* longer - could do with some extra doc stuff here */
                                                           "", /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SELF,
                                    g_param_spec_object("self", /* name */
                                                           "dom_window_self", /* short description */
                                                           "read-write  WebKitDOMDOMWindow* DOMWindow.self", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WINDOW,
                                    g_param_spec_object("window", /* name */
                                                           "dom_window_window", /* short description */
                                                           "read-only  WebKitDOMDOMWindow* DOMWindow.window", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FRAMES,
                                    g_param_spec_object("frames", /* name */
                                                           "dom_window_frames", /* short description */
                                                           "read-write  WebKitDOMDOMWindow* DOMWindow.frames", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_OPENER,
                                    g_param_spec_object("opener", /* name */
                                                           "dom_window_opener", /* short description */
                                                           "read-write  WebKitDOMDOMWindow* DOMWindow.opener", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_PARENT,
                                    g_param_spec_object("parent", /* name */
                                                           "dom_window_parent", /* short description */
                                                           "read-write  WebKitDOMDOMWindow* DOMWindow.parent", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_TOP,
                                    g_param_spec_object("top", /* name */
                                                           "dom_window_top", /* short description */
                                                           "read-write  WebKitDOMDOMWindow* DOMWindow.top", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_WINDOW, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DOCUMENT,
                                    g_param_spec_object("document", /* name */
                                                           "dom_window_document", /* short description */
                                                           "read-only  WebKitDOMDocument* DOMWindow.document", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOCUMENT, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_STYLE_MEDIA,
                                    g_param_spec_object("style-media", /* name */
                                                           "dom_window_style-media", /* short description */
                                                           "read-only  WebKitDOMStyleMedia* DOMWindow.style-media", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_STYLE_MEDIA, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_DEVICE_PIXEL_RATIO,
                                    g_param_spec_double("device-pixel-ratio", /* name */
                                                           "dom_window_device-pixel-ratio", /* short description */
                                                           "read-write  gdouble DOMWindow.device-pixel-ratio", /* longer - could do with some extra doc stuff here */
                                                           -G_MAXDOUBLE, /* min */
G_MAXDOUBLE, /* max */
0.0, /* default */
                                                           WEBKIT_PARAM_READWRITE));
    g_object_class_install_property(gobjectClass,
                                    PROP_APPLICATION_CACHE,
                                    g_param_spec_object("application-cache", /* name */
                                                           "dom_window_application-cache", /* short description */
                                                           "read-only  WebKitDOMDOMApplicationCache* DOMWindow.application-cache", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_DOM_APPLICATION_CACHE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_SESSION_STORAGE,
                                    g_param_spec_object("session-storage", /* name */
                                                           "dom_window_session-storage", /* short description */
                                                           "read-only  WebKitDOMStorage* DOMWindow.session-storage", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_STORAGE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_LOCAL_STORAGE,
                                    g_param_spec_object("local-storage", /* name */
                                                           "dom_window_local-storage", /* short description */
                                                           "read-only  WebKitDOMStorage* DOMWindow.local-storage", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_STORAGE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CONSOLE,
                                    g_param_spec_object("console", /* name */
                                                           "dom_window_console", /* short description */
                                                           "read-write  WebKitDOMConsole* DOMWindow.console", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_CONSOLE, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_dom_window_init(WebKitDOMDOMWindow* request)
{
}

WebKitDOMDOMSelection*
webkit_dom_dom_window_get_selection(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMSelection> g_res = WTF::getPtr(item->getSelection());
    WebKitDOMDOMSelection* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_dom_window_focus(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->focus();
}

void
webkit_dom_dom_window_blur(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->blur();
}

void
webkit_dom_dom_window_close(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->close();
}

void
webkit_dom_dom_window_print(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->print();
}

void
webkit_dom_dom_window_stop(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->stop();
}

void
webkit_dom_dom_window_alert(WebKitDOMDOMWindow* self, const gchar* message)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_if_fail(message);
    WTF::String converted_message = WTF::String::fromUTF8(message);
    item->alert(converted_message);
}

gboolean
webkit_dom_dom_window_confirm(WebKitDOMDOMWindow* self, const gchar* message)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(message, 0);
    WTF::String converted_message = WTF::String::fromUTF8(message);
    gboolean res = item->confirm(converted_message);
    return res;
}

gchar*
webkit_dom_dom_window_prompt(WebKitDOMDOMWindow* self, const gchar* message, const gchar* default_value)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(message, 0);
    g_return_val_if_fail(default_value, 0);
    WTF::String converted_message = WTF::String::fromUTF8(message);
    WTF::String converted_default_value = WTF::String::fromUTF8(default_value);
    gchar* res = convertToUTF8String(item->prompt(converted_message, converted_default_value));
    return res;
}

gboolean
webkit_dom_dom_window_find(WebKitDOMDOMWindow* self, const gchar* string, gboolean case_sensitive, gboolean backwards, gboolean wrap, gboolean whole_word, gboolean search_in_frames, gboolean show_dialog)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(string, 0);
    WTF::String converted_string = WTF::String::fromUTF8(string);
    gboolean res = item->find(converted_string, case_sensitive, backwards, wrap, whole_word, search_in_frames, show_dialog);
    return res;
}

void
webkit_dom_dom_window_scroll_by(WebKitDOMDOMWindow* self, glong x, glong y)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->scrollBy(x, y);
}

void
webkit_dom_dom_window_scroll_to(WebKitDOMDOMWindow* self, glong x, glong y)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->scrollTo(x, y);
}

void
webkit_dom_dom_window_scroll(WebKitDOMDOMWindow* self, glong x, glong y)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->scroll(x, y);
}

void
webkit_dom_dom_window_move_by(WebKitDOMDOMWindow* self, gfloat x, gfloat y)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->moveBy(x, y);
}

void
webkit_dom_dom_window_move_to(WebKitDOMDOMWindow* self, gfloat x, gfloat y)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->moveTo(x, y);
}

void
webkit_dom_dom_window_resize_by(WebKitDOMDOMWindow* self, gfloat x, gfloat y)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->resizeBy(x, y);
}

void
webkit_dom_dom_window_resize_to(WebKitDOMDOMWindow* self, gfloat width, gfloat height)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->resizeTo(width, height);
}

WebKitDOMMediaQueryList*
webkit_dom_dom_window_match_media(WebKitDOMDOMWindow* self, const gchar* query)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(query, 0);
    WTF::String converted_query = WTF::String::fromUTF8(query);
    PassRefPtr<WebCore::MediaQueryList> g_res = WTF::getPtr(item->matchMedia(converted_query));
    WebKitDOMMediaQueryList* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMCSSStyleDeclaration*
webkit_dom_dom_window_get_computed_style(WebKitDOMDOMWindow* self, WebKitDOMElement* element, const gchar* pseudo_element)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(element, 0);
    g_return_val_if_fail(pseudo_element, 0);
    WebCore::Element * converted_element = NULL;
    if (element != NULL) {
        converted_element = WebKit::core(element);
        g_return_val_if_fail(converted_element, 0);
    }
    WTF::String converted_pseudo_element = WTF::String::fromUTF8(pseudo_element);
    PassRefPtr<WebCore::CSSStyleDeclaration> g_res = WTF::getPtr(item->getComputedStyle(converted_element, converted_pseudo_element));
    WebKitDOMCSSStyleDeclaration* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMWebKitPoint*
webkit_dom_dom_window_webkit_convert_point_from_page_to_node(WebKitDOMDOMWindow* self, WebKitDOMNode* node, WebKitDOMWebKitPoint* p)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(node, 0);
    g_return_val_if_fail(p, 0);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_val_if_fail(converted_node, 0);
    }
    WebCore::WebKitPoint * converted_p = NULL;
    if (p != NULL) {
        converted_p = WebKit::core(p);
        g_return_val_if_fail(converted_p, 0);
    }
    PassRefPtr<WebCore::WebKitPoint> g_res = WTF::getPtr(item->webkitConvertPointFromPageToNode(converted_node, converted_p));
    WebKitDOMWebKitPoint* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMWebKitPoint*
webkit_dom_dom_window_webkit_convert_point_from_node_to_page(WebKitDOMDOMWindow* self, WebKitDOMNode* node, WebKitDOMWebKitPoint* p)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(node, 0);
    g_return_val_if_fail(p, 0);
    WebCore::Node * converted_node = NULL;
    if (node != NULL) {
        converted_node = WebKit::core(node);
        g_return_val_if_fail(converted_node, 0);
    }
    WebCore::WebKitPoint * converted_p = NULL;
    if (p != NULL) {
        converted_p = WebKit::core(p);
        g_return_val_if_fail(converted_p, 0);
    }
    PassRefPtr<WebCore::WebKitPoint> g_res = WTF::getPtr(item->webkitConvertPointFromNodeToPage(converted_node, converted_p));
    WebKitDOMWebKitPoint* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_dom_window_clear_timeout(WebKitDOMDOMWindow* self, glong handle)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->clearTimeout(handle);
}

void
webkit_dom_dom_window_clear_interval(WebKitDOMDOMWindow* self, glong handle)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->clearInterval(handle);
}

void
webkit_dom_dom_window_webkit_cancel_animation_frame(WebKitDOMDOMWindow* self, glong id)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->webkitCancelAnimationFrame(id);
}

void
webkit_dom_dom_window_webkit_cancel_request_animation_frame(WebKitDOMDOMWindow* self, glong id)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->webkitCancelRequestAnimationFrame(id);
}

gchar*
webkit_dom_dom_window_atob(WebKitDOMDOMWindow* self, const gchar* string, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(string, 0);
    WTF::String converted_string = WTF::String::fromUTF8(string);
    WebCore::ExceptionCode ec = 0;
    gchar* res = convertToUTF8String(item->atob(converted_string, ec));
    return res;
}

gchar*
webkit_dom_dom_window_btoa(WebKitDOMDOMWindow* self, const gchar* string, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(string, 0);
    WTF::String converted_string = WTF::String::fromUTF8(string);
    WebCore::ExceptionCode ec = 0;
    gchar* res = convertToUTF8String(item->btoa(converted_string, ec));
    return res;
}

gboolean
webkit_dom_dom_window_dispatch_event(WebKitDOMDOMWindow* self, WebKitDOMEvent* evt, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_val_if_fail(evt, 0);
    WebCore::Event * converted_evt = NULL;
    if (evt != NULL) {
        converted_evt = WebKit::core(evt);
        g_return_val_if_fail(converted_evt, 0);
    }
    WebCore::ExceptionCode ec = 0;
    gboolean res = item->dispatchEvent(converted_evt, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    return res;
}

void
webkit_dom_dom_window_capture_events(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->captureEvents();
}

void
webkit_dom_dom_window_release_events(WebKitDOMDOMWindow* self)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    item->releaseEvents();
}

WebKitDOMScreen*
webkit_dom_dom_window_get_screen(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::Screen> g_res = WTF::getPtr(item->screen());
    WebKitDOMScreen* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMHistory*
webkit_dom_dom_window_get_history(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::History> g_res = WTF::getPtr(item->history());
    WebKitDOMHistory* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMBarInfo*
webkit_dom_dom_window_get_locationbar(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::BarInfo> g_res = WTF::getPtr(item->locationbar());
    WebKitDOMBarInfo* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMBarInfo*
webkit_dom_dom_window_get_menubar(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::BarInfo> g_res = WTF::getPtr(item->menubar());
    WebKitDOMBarInfo* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMBarInfo*
webkit_dom_dom_window_get_personalbar(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::BarInfo> g_res = WTF::getPtr(item->personalbar());
    WebKitDOMBarInfo* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMBarInfo*
webkit_dom_dom_window_get_scrollbars(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::BarInfo> g_res = WTF::getPtr(item->scrollbars());
    WebKitDOMBarInfo* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMBarInfo*
webkit_dom_dom_window_get_statusbar(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::BarInfo> g_res = WTF::getPtr(item->statusbar());
    WebKitDOMBarInfo* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMBarInfo*
webkit_dom_dom_window_get_toolbar(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::BarInfo> g_res = WTF::getPtr(item->toolbar());
    WebKitDOMBarInfo* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNavigator*
webkit_dom_dom_window_get_navigator(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::Navigator> g_res = WTF::getPtr(item->navigator());
    WebKitDOMNavigator* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNavigator*
webkit_dom_dom_window_get_client_information(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::Navigator> g_res = WTF::getPtr(item->clientInformation());
    WebKitDOMNavigator* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMElement*
webkit_dom_dom_window_get_frame_element(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::Element> g_res = WTF::getPtr(item->frameElement());
    WebKitDOMElement* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_dom_window_get_offscreen_buffering(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gboolean res = item->offscreenBuffering();
    return res;
}

glong
webkit_dom_dom_window_get_outer_height(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->outerHeight();
    return res;
}

glong
webkit_dom_dom_window_get_outer_width(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->outerWidth();
    return res;
}

glong
webkit_dom_dom_window_get_inner_height(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->innerHeight();
    return res;
}

glong
webkit_dom_dom_window_get_inner_width(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->innerWidth();
    return res;
}

glong
webkit_dom_dom_window_get_screen_x(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->screenX();
    return res;
}

glong
webkit_dom_dom_window_get_screen_y(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->screenY();
    return res;
}

glong
webkit_dom_dom_window_get_screen_left(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->screenLeft();
    return res;
}

glong
webkit_dom_dom_window_get_screen_top(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->screenTop();
    return res;
}

glong
webkit_dom_dom_window_get_scroll_x(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->scrollX();
    return res;
}

glong
webkit_dom_dom_window_get_scroll_y(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->scrollY();
    return res;
}

glong
webkit_dom_dom_window_get_page_x_offset(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->pageXOffset();
    return res;
}

glong
webkit_dom_dom_window_get_page_y_offset(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    glong res = item->pageYOffset();
    return res;
}

gboolean
webkit_dom_dom_window_get_closed(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gboolean res = item->closed();
    return res;
}

gulong
webkit_dom_dom_window_get_length(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gulong res = item->length();
    return res;
}

gchar*
webkit_dom_dom_window_get_name(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->name());
    return res;
}

void
webkit_dom_dom_window_set_name(WebKitDOMDOMWindow* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setName(converted_value);
}

gchar*
webkit_dom_dom_window_get_status(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->status());
    return res;
}

void
webkit_dom_dom_window_set_status(WebKitDOMDOMWindow* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setStatus(converted_value);
}

gchar*
webkit_dom_dom_window_get_default_status(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gchar* res = convertToUTF8String(item->defaultStatus());
    return res;
}

void
webkit_dom_dom_window_set_default_status(WebKitDOMDOMWindow* self, const gchar* value)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    g_return_if_fail(value);
    WTF::String converted_value = WTF::String::fromUTF8(value);
    item->setDefaultStatus(converted_value);
}

WebKitDOMDOMWindow*
webkit_dom_dom_window_get_self(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->self());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMWindow*
webkit_dom_dom_window_get_window(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->window());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMWindow*
webkit_dom_dom_window_get_frames(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->frames());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMWindow*
webkit_dom_dom_window_get_opener(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->opener());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMWindow*
webkit_dom_dom_window_get_parent(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->parent());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDOMWindow*
webkit_dom_dom_window_get_top(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMWindow> g_res = WTF::getPtr(item->top());
    WebKitDOMDOMWindow* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMDocument*
webkit_dom_dom_window_get_document(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::Document> g_res = WTF::getPtr(item->document());
    WebKitDOMDocument* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMStyleMedia*
webkit_dom_dom_window_get_style_media(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::StyleMedia> g_res = WTF::getPtr(item->styleMedia());
    WebKitDOMStyleMedia* res = WebKit::kit(g_res.get());
    return res;
}

gdouble
webkit_dom_dom_window_get_device_pixel_ratio(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    gdouble res = item->devicePixelRatio();
    return res;
}

WebKitDOMDOMApplicationCache*
webkit_dom_dom_window_get_application_cache(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::DOMApplicationCache> g_res = WTF::getPtr(item->applicationCache());
    WebKitDOMDOMApplicationCache* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMStorage*
webkit_dom_dom_window_get_session_storage(WebKitDOMDOMWindow* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Storage> g_res = WTF::getPtr(item->sessionStorage(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMStorage* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMStorage*
webkit_dom_dom_window_get_local_storage(WebKitDOMDOMWindow* self, GError **error)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    PassRefPtr<WebCore::Storage> g_res = WTF::getPtr(item->localStorage(ec));
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
    WebKitDOMStorage* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMConsole*
webkit_dom_dom_window_get_console(WebKitDOMDOMWindow* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::DOMWindow * item = WebKit::core(self);
    PassRefPtr<WebCore::Console> g_res = WTF::getPtr(item->console());
    WebKitDOMConsole* res = WebKit::kit(g_res.get());
    return res;
}

