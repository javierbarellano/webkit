/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include <glib-object.h>
#include "config.h"

#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>
#include "DOMObjectCache.h"
#include "ExceptionCode.h"
#include "JSMainThreadExecState.h"
#include "Node.h"
#include "NodeFilter.h"
#include "TreeWalker.h"
#include "WebKitDOMBinding.h"
#include "gobject/ConvertToUTF8String.h"
#include "webkit/WebKitDOMNode.h"
#include "webkit/WebKitDOMNodeFilter.h"
#include "webkit/WebKitDOMNodeFilterPrivate.h"
#include "webkit/WebKitDOMNodePrivate.h"
#include "webkit/WebKitDOMTreeWalker.h"
#include "webkit/WebKitDOMTreeWalkerPrivate.h"
#include "webkitdefines.h"
#include "webkitglobalsprivate.h"
#include "webkitmarshal.h"

namespace WebKit {

WebKitDOMTreeWalker* kit(WebCore::TreeWalker* obj)
{
    g_return_val_if_fail(obj, 0);

    if (gpointer ret = DOMObjectCache::get(obj))
        return static_cast<WebKitDOMTreeWalker*>(ret);

    return static_cast<WebKitDOMTreeWalker*>(DOMObjectCache::put(obj, WebKit::wrapTreeWalker(obj)));
}

WebCore::TreeWalker* core(WebKitDOMTreeWalker* request)
{
    g_return_val_if_fail(request, 0);

    WebCore::TreeWalker* coreObject = static_cast<WebCore::TreeWalker*>(WEBKIT_DOM_OBJECT(request)->coreObject);
    g_return_val_if_fail(coreObject, 0);

    return coreObject;
}

WebKitDOMTreeWalker* wrapTreeWalker(WebCore::TreeWalker* coreObject)
{
    g_return_val_if_fail(coreObject, 0);

    /* We call ref() rather than using a C++ smart pointer because we can't store a C++ object
     * in a C-allocated GObject structure.  See the finalize() code for the
     * matching deref().
     */
    coreObject->ref();

    return  WEBKIT_DOM_TREE_WALKER(g_object_new(WEBKIT_TYPE_DOM_TREE_WALKER,
                                               "core-object", coreObject, NULL));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMTreeWalker, webkit_dom_tree_walker, WEBKIT_TYPE_DOM_OBJECT)

enum {
    PROP_0,
    PROP_ROOT,
    PROP_WHAT_TO_SHOW,
    PROP_FILTER,
    PROP_EXPAND_ENTITY_REFERENCES,
    PROP_CURRENT_NODE,
};

static void webkit_dom_tree_walker_finalize(GObject* object)
{

    WebKitDOMObject* dom_object = WEBKIT_DOM_OBJECT(object);
    
    if (dom_object->coreObject) {
        WebCore::TreeWalker* coreObject = static_cast<WebCore::TreeWalker *>(dom_object->coreObject);

        WebKit::DOMObjectCache::forget(coreObject);
        coreObject->deref();

        dom_object->coreObject = NULL;
    }


    G_OBJECT_CLASS(webkit_dom_tree_walker_parent_class)->finalize(object);
}

static void webkit_dom_tree_walker_set_property(GObject* object, guint prop_id, const GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    switch (prop_id) {
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_tree_walker_get_property(GObject* object, guint prop_id, GValue* value, GParamSpec* pspec)
{
    WebCore::JSMainThreadNullState state;
    WebKitDOMTreeWalker* self = WEBKIT_DOM_TREE_WALKER(object);
    WebCore::TreeWalker* coreSelf = WebKit::core(self);
    switch (prop_id) {
    case PROP_ROOT:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->root();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_WHAT_TO_SHOW:
    {
        g_value_set_ulong(value, coreSelf->whatToShow());
        break;
    }
    case PROP_FILTER:
    {
        RefPtr<WebCore::NodeFilter> ptr = coreSelf->filter();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    case PROP_EXPAND_ENTITY_REFERENCES:
    {
        g_value_set_boolean(value, coreSelf->expandEntityReferences());
        break;
    }
    case PROP_CURRENT_NODE:
    {
        RefPtr<WebCore::Node> ptr = coreSelf->currentNode();
        g_value_set_object(value, WebKit::kit(ptr.get()));
        break;
    }
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
        break;
    }
}


static void webkit_dom_tree_walker_constructed(GObject* object)
{

    if (G_OBJECT_CLASS(webkit_dom_tree_walker_parent_class)->constructed)
        G_OBJECT_CLASS(webkit_dom_tree_walker_parent_class)->constructed(object);
}

static void webkit_dom_tree_walker_class_init(WebKitDOMTreeWalkerClass* requestClass)
{
    GObjectClass *gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->finalize = webkit_dom_tree_walker_finalize;
    gobjectClass->set_property = webkit_dom_tree_walker_set_property;
    gobjectClass->get_property = webkit_dom_tree_walker_get_property;
    gobjectClass->constructed = webkit_dom_tree_walker_constructed;

    g_object_class_install_property(gobjectClass,
                                    PROP_ROOT,
                                    g_param_spec_object("root", /* name */
                                                           "tree_walker_root", /* short description */
                                                           "read-only  WebKitDOMNode* TreeWalker.root", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_WHAT_TO_SHOW,
                                    g_param_spec_ulong("what-to-show", /* name */
                                                           "tree_walker_what-to-show", /* short description */
                                                           "read-only  gulong TreeWalker.what-to-show", /* longer - could do with some extra doc stuff here */
                                                           0, /* min */
G_MAXULONG, /* max */
0, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_FILTER,
                                    g_param_spec_object("filter", /* name */
                                                           "tree_walker_filter", /* short description */
                                                           "read-only  WebKitDOMNodeFilter* TreeWalker.filter", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE_FILTER, /* gobject type */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_EXPAND_ENTITY_REFERENCES,
                                    g_param_spec_boolean("expand-entity-references", /* name */
                                                           "tree_walker_expand-entity-references", /* short description */
                                                           "read-only  gboolean TreeWalker.expand-entity-references", /* longer - could do with some extra doc stuff here */
                                                           FALSE, /* default */
                                                           WEBKIT_PARAM_READABLE));
    g_object_class_install_property(gobjectClass,
                                    PROP_CURRENT_NODE,
                                    g_param_spec_object("current-node", /* name */
                                                           "tree_walker_current-node", /* short description */
                                                           "read-write  WebKitDOMNode* TreeWalker.current-node", /* longer - could do with some extra doc stuff here */
                                                           WEBKIT_TYPE_DOM_NODE, /* gobject type */
                                                           WEBKIT_PARAM_READWRITE));


}

static void webkit_dom_tree_walker_init(WebKitDOMTreeWalker* request)
{
}

WebKitDOMNode*
webkit_dom_tree_walker_parent_node(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->parentNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_first_child(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->firstChild());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_last_child(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->lastChild());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_previous_sibling(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->previousSibling());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_next_sibling(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->nextSibling());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_previous_node(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->previousNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_next_node(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->nextNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_get_root(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->root());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

gulong
webkit_dom_tree_walker_get_what_to_show(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    gulong res = item->whatToShow();
    return res;
}

WebKitDOMNodeFilter*
webkit_dom_tree_walker_get_filter(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::NodeFilter> g_res = WTF::getPtr(item->filter());
    WebKitDOMNodeFilter* res = WebKit::kit(g_res.get());
    return res;
}

gboolean
webkit_dom_tree_walker_get_expand_entity_references(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    gboolean res = item->expandEntityReferences();
    return res;
}

WebKitDOMNode*
webkit_dom_tree_walker_get_current_node(WebKitDOMTreeWalker* self)
{
    g_return_val_if_fail(self, 0);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    PassRefPtr<WebCore::Node> g_res = WTF::getPtr(item->currentNode());
    WebKitDOMNode* res = WebKit::kit(g_res.get());
    return res;
}

void
webkit_dom_tree_walker_set_current_node(WebKitDOMTreeWalker* self, WebKitDOMNode* value, GError **error)
{
    g_return_if_fail(self);
    WebCore::JSMainThreadNullState state;
    WebCore::TreeWalker * item = WebKit::core(self);
    g_return_if_fail(value);
    WebCore::Node * converted_value = NULL;
    if (value != NULL) {
        converted_value = WebKit::core(value);
        g_return_if_fail(converted_value);
    }
    WebCore::ExceptionCode ec = 0;
    item->setCurrentNode(converted_value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

